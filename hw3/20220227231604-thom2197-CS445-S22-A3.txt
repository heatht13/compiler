=================================================
Output of Building User Code
Exploding tar files
20220227231604-thom2197-CS445-S22-A3.tar
scanType.h
treeDef.h
astUtils.h
ourgetopt.h
symbolTable.h
semantics.h
c-.y
c-.l
astUtils.c
ourgetopt.c
symbolTable.cpp
semantics.cpp
makefile
Undossing tarred files assumes all files are ascii and not binary
undosing scanType.h
undosing treeDef.h
undosing astUtils.h
undosing ourgetopt.h
undosing symbolTable.h
undosing semantics.h
undosing c-.y
undosing c-.l
undosing astUtils.c
undosing ourgetopt.c
undosing symbolTable.cpp
undosing semantics.cpp
undosing makefile
Extracting test files
allbad.c-
allgood.c-
array.c-
arrayops.c-
arrayx.c-
assignb.c-
assignBool.c-
assignChar.c-
assignInt.c-
break2.c-
break3.c-
break4.c-
break.c-
call2.c-
call3.c-
call.c-
callerr.c-
constants.c-
cover.c-
decl.c-
emptyline.c-
everythingS22.c-
exp.c-
expL.c-
expR.c-
for2.c-
fora.c-
forb.c-
for.c-
forscope.c-
funcscope.c-
if.c-
ifNest.c-
init2.c-
init3.c-
init4.c-
init.c-
mixedControl2.c-
mixedControl3.c-
mixedControl.c-
nest.c-
ops.c-
optype.c-
overlapArray.c-
overlap.c-
overlapStatic.c-
part2.c-
randomRoll.c-
return.c-
scope.c-
static.c-
strange.c-
types3.c-
types.c-
undeclared.c-
uninit2.c-
uninit.c-
varAssign.c-
var.c-
varPair.c-
while.c-
whileif.c-
remove Tmp dir contents
Now start the build process

find makefile (lowercase)
makefile
A makefile is here and you compiler will be built with it
make the program
Alter compiler with special development tool set including g++ 4.9
semantics.cpp: In function 'void semanticAnalysis(TreeNode*, SymbolTable*)':
semantics.cpp:408:30: warning: statement will never be executed [-Wswitch-unreachable]
                 needCompound = 0;
                 ~~~~~~~~~~~~~^~~
Output from build is 9 lines long
Output from build will be trimmed to 1000 lines if it is too long.
bison -v -t -d c-.y
flex c-.l
g++    -c -o lex.yy.o lex.yy.c
g++    -c -o c-.tab.o c-.tab.c
g++    -c -o astUtils.o astUtils.c
g++    -c -o ourgetopt.o ourgetopt.c
g++    -c -o symbolTable.o symbolTable.cpp
g++    -c -o semantics.o semantics.cpp
g++ -g lex.yy.o c-.tab.o astUtils.o ourgetopt.o symbolTable.o semantics.o -o c-
was a program called c- built?
c- is here and you compiler will now be tested
-rwx--x--x. 1 rs-cs-heckendo domain_users 129616 Feb 27 23:20 c-

END OF BUILD
=================================================
Complete Output of Testing
Limited to 30 seconds total run time and 8000 lines of output

* ================================================ *
|      Tests for CS445 Assignment 3                |
|       Comparison with Expected Output            |
|            Semantic Analysis I                   |
|  Errors and Warnings will be sorted by line num  |
|                                                  |
* ================================================ *

/home/rs-cs-heckendo/TestWorld
-rwxrwxrwx jp/jp          1520 2021-12-22 08:44 allbad.c-
-rwxrwxrwx jp/jp          1284 2021-12-22 08:44 allgood.c-
-rwxrwxrwx jp/jp           175 2021-12-22 08:44 array.c-
-rwxrwxrwx jp/jp           860 2021-12-22 08:44 arrayops.c-
-rwxrwxrwx jp/jp           273 2021-12-22 08:44 arrayx.c-
-rwxrwxrwx jp/jp           175 2021-12-22 08:44 assignb.c-
-rwxrwxrwx jp/jp           492 2021-12-22 08:44 assignBool.c-
-rwxrwxrwx jp/jp           483 2021-12-22 08:44 assignChar.c-
-rwxrwxrwx jp/jp           470 2021-12-22 08:44 assignInt.c-
-rwxrwxrwx jp/jp           281 2021-12-22 08:44 break2.c-
-rwxrwxrwx jp/jp           110 2021-12-22 08:44 break3.c-
-rwxrwxrwx jp/jp           155 2021-12-22 08:44 break4.c-
-rwxrwxrwx jp/jp           122 2021-12-22 08:44 break.c-
-rwxrwxrwx jp/jp           340 2021-12-22 08:44 call2.c-
-rwxrwxrwx jp/jp           415 2021-12-22 08:44 call3.c-
-rwxrwxrwx jp/jp           929 2021-12-22 08:44 call.c-
-rwxrwxrwx jp/jp           293 2021-12-22 08:44 callerr.c-
-rwxrwxrwx jp/jp           117 2021-12-22 08:44 constants.c-
-rwxrwxrwx jp/jp          1148 2021-12-22 08:44 cover.c-
-rwxrwxrwx jp/jp            62 2021-12-22 08:44 decl.c-
-rwxrwxrwx jp/jp           206 2021-12-22 08:44 emptyline.c-
-rwxrwxrwx jp/jp          3288 2021-12-22 08:44 everythingS22.c-
-rwxrwxrwx jp/jp          1079 2021-12-22 08:44 exp.c-
-rwxrwxrwx jp/jp            59 2021-12-22 08:44 expL.c-
-rwxrwxrwx jp/jp            59 2021-12-22 08:44 expR.c-
-rwxrwxrwx jp/jp           164 2021-12-22 08:44 for2.c-
-rwxrwxrwx jp/jp           200 2021-12-22 08:44 fora.c-
-rwxrwxrwx jp/jp           137 2021-12-22 08:44 forb.c-
-rwxrwxrwx jp/jp           463 2021-12-22 08:44 for.c-
-rwxrwxrwx jp/jp           984 2021-12-22 08:44 forscope.c-
-rwxrwxrwx jp/jp           763 2021-12-22 08:44 funcscope.c-
-rwxrwxrwx jp/jp           112 2021-12-22 08:44 if.c-
-rwxrwxrwx jp/jp           299 2021-12-22 08:44 ifNest.c-
-rwxrwxrwx jp/jp           272 2021-12-22 08:44 init2.c-
-rwxrwxrwx jp/jp           411 2021-12-22 08:44 init3.c-
-rwxrwxrwx jp/jp           105 2021-12-22 08:44 init4.c-
-rwxrwxrwx jp/jp           146 2021-12-22 08:44 init.c-
-rwxrwxrwx jp/jp           298 2021-12-22 08:44 mixedControl2.c-
-rwxrwxrwx jp/jp           360 2021-12-22 08:44 mixedControl3.c-
-rwxrwxrwx jp/jp           490 2021-12-22 08:44 mixedControl.c-
-rwxrwxrwx jp/jp          1547 2021-12-22 08:44 nest.c-
-rwxrwxrwx jp/jp          4230 2021-12-22 08:44 ops.c-
-rwxrwxrwx jp/jp           226 2021-12-22 08:44 optype.c-
-rwxrwxrwx jp/jp           445 2021-12-22 08:44 overlapArray.c-
-rwxrwxrwx jp/jp           408 2021-12-22 08:44 overlap.c-
-rwxrwxrwx jp/jp           672 2021-12-22 08:44 overlapStatic.c-
-rwxrwxrwx jp/jp           539 2021-12-22 08:44 part2.c-
-rwxrwxrwx jp/jp           321 2021-12-22 08:44 randomRoll.c-
-rwxrwxrwx jp/jp           483 2021-12-22 08:44 return.c-
-rwxrwxrwx jp/jp           650 2021-12-22 08:44 scope.c-
-rwxrwxrwx jp/jp            93 2021-12-22 08:44 static.c-
-rwxrwxrwx jp/jp           464 2021-12-22 08:44 strange.c-
-rwxrwxrwx jp/jp           244 2021-12-22 08:44 types3.c-
-rwxrwxrwx jp/jp          1748 2021-12-22 08:44 types.c-
-rwxrwxrwx jp/jp           101 2021-12-22 08:44 undeclared.c-
-rwxrwxrwx jp/jp           217 2021-12-22 08:44 uninit2.c-
-rwxrwxrwx jp/jp           201 2021-12-22 08:44 uninit.c-
-rwxrwxrwx jp/jp           947 2021-12-22 08:44 varAssign.c-
-rwxrwxrwx jp/jp           216 2021-12-22 08:44 var.c-
-rwxrwxrwx jp/jp           664 2021-12-22 08:44 varPair.c-
-rwxrwxrwx jp/jp            75 2021-12-22 08:44 while.c-
-rwxrwxrwx jp/jp          1792 2021-12-22 08:44 whileif.c-

==============
==============
Test invalid input
./c- gcd.c- (should produce no tree)
Error: failed to open 'gcd.c-'

==============
==============
./c- -P allbad.c-

==============
==============
./c- -P allgood.c-
ERROR(5) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(6) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(7) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(9) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(10) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(11) : '<=' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(11) : '>=' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(12) : '=' requires operands of the same type but lhs is type int and rhs is type (null).
ERROR(13) : 'and' requires operands of type bool but lhs is of type (null).
ERROR(13) : Unary 'not' requires an operand of type bool but was given type (null).
ERROR(14) : 'or' requires operands of type bool but lhs is of type (null).
ERROR(14) : Unary 'not' requires an operand of type bool but was given type (null).
ERROR(15) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(19) : '+' requires operands of type int but lhs is of type (null).
ERROR(20) : '-' requires operands of type int but rhs is of type (null).
ERROR(21) : '*' requires operands of type int but lhs is of type (null).
ERROR(22) : '/' requires operands of type int but rhs is of type (null).
ERROR(23) : '%' requires operands of type int but lhs is of type (null).
ERROR(25) : '+=' requires operands of type int but lhs is of type (null).
ERROR(26) : '-=' requires operands of type int but lhs is of type (null).
ERROR(27) : '*=' requires operands of type int but lhs is of type (null).
ERROR(28) : '/=' requires operands of type int but lhs is of type (null).
ERROR(30) : Unary 'chsign' requires an operand of type int but was given type (null).
ERROR(31) : Unary 'not' requires an operand of type bool but was given type (null).
ERROR(32) : Unary '?' requires an operand of type int but was given type (null).
ERROR(40) : Cannot index nonarray 'aa'.
ERROR(41) : Cannot index nonarray 'ba'.
ERROR(42) : Cannot index nonarray 'aa'.
ERROR(42) : Cannot index nonarray 'ca'.
ERROR(44) : The operation 'sizeof' only works with arrays.
ERROR(47) : '+' requires operands of type int but lhs is of type (null).
ERROR(48) : 'and' requires operands of type bool but lhs is of type (null).
ERROR(48) : Symbol 'z' is already declared.
ERROR(49) : Symbol 'z' is already declared.
ERROR(68) : '=' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(83) : '!=' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(83) : Cannot index nonarray 'ccc'.
ERROR(85) : '+' requires operands of type int but lhs is of type (null).
===========  Symbol Table  ===========
Scope: Global          -----------------
                 ant:  
Scope: ant             -----------------
                 bat: ÀjÚ 
Scope: bat             -----------------
                   a:  
                   c:  
                 cat:  
Scope: cat             -----------------
                   a:  
                  aa:  
                   b:  
                  ba:  
                   c:  
                  ca:  
                 dog: ðBÛ 
                   z:  
Scope: dog             -----------------
                   i:  
                main:  
Scope: main            -----------------
                 bbb:  
                 ccc:  
===========  ============  ===========
0 0 59
Func: ant returns type int [line: 1]
.   Child: 1  Compound [line: 1]
.   .   Child: 1  Return [line: 1]
.   .   .   Child: 0  Const 111 of type int [line: 1]
Sibling: 1  Func: bat returns type void [line: 2]
.   Child: 0  Parm: a of type int [line: 2]
.   Sibling: 1  Parm: c of type char [line: 2]
.   Child: 1  Compound [line: 2]
.   .   Child: 0  Init: : of type bool [line: 3]
.   .   .   Child: 0  Var: b of type (null) [line: 3]
.   .   .   Child: 1  Const false of type bool [line: 3]
.   .   Child: 1  Assign: <- of type (null) [line: 5]
.   .   .   Child: 0  Id: a of type int [line: 5]
.   .   .   Child: 1  Const 222 of type int [line: 5]
.   .   Sibling: 1  Assign: <- of type (null) [line: 6]
.   .   .   Child: 0  Id: b of type (null) [line: 6]
.   .   .   Child: 1  Const true of type bool [line: 6]
.   .   Sibling: 2  Assign: <- of type (null) [line: 7]
.   .   .   Child: 0  Id: c of type char [line: 7]
.   .   .   Child: 1  Const 'z' of type char [line: 7]
.   .   Sibling: 3  If [line: 9]
.   .   .   Child: 0  Op: > of type (null) [line: 9]
.   .   .   .   Child: 0  Id: a of type int [line: 9]
.   .   .   .   Child: 1  Const 222 of type int [line: 9]
.   .   .   Child: 1  Const 333 of type int [line: 9]
.   .   Sibling: 4  If [line: 10]
.   .   .   Child: 0  Op: < of type (null) [line: 10]
.   .   .   .   Child: 0  Id: a of type int [line: 10]
.   .   .   .   Child: 1  Const 333 of type int [line: 10]
.   .   .   Child: 1  Const 444 of type int [line: 10]
.   .   .   Child: 2  Const 555 of type int [line: 10]
.   .   Sibling: 5  If [line: 11]
.   .   .   Child: 0  Op: <= of type (null) [line: 11]
.   .   .   .   Child: 0  Id: a of type int [line: 11]
.   .   .   .   Child: 1  Const 666 of type int [line: 11]
.   .   .   Child: 1  If [line: 11]
.   .   .   .   Child: 0  Op: >= of type (null) [line: 11]
.   .   .   .   .   Child: 0  Id: a of type int [line: 11]
.   .   .   .   .   Child: 1  Const 777 of type int [line: 11]
.   .   .   .   Child: 1  Const 888 of type int [line: 11]
.   .   .   .   Child: 2  Const 555 of type int [line: 11]
.   .   Sibling: 6  While [line: 12]
.   .   .   Child: 0  Op: = of type (null) [line: 12]
.   .   .   .   Child: 0  Const 999 of type int [line: 12]
.   .   .   .   Child: 1  Id: a of type int [line: 12]
.   .   .   Child: 1  Const 1010 of type int [line: 12]
.   .   Sibling: 7  If [line: 13]
.   .   .   Child: 0  Id: b of type (null) [line: 13]
.   .   .   Child: 1  If [line: 13]
.   .   .   .   Child: 0  Op: not of type (null) [line: 13]
.   .   .   .   .   Child: 0  Id: b of type (null) [line: 13]
.   .   .   .   Child: 1  While [line: 13]
.   .   .   .   .   Child: 0  Op: and of type (null) [line: 13]
.   .   .   .   .   .   Child: 0  Id: b of type (null) [line: 13]
.   .   .   .   .   .   Child: 1  Const true of type bool [line: 13]
.   .   .   .   .   Child: 1  Const 1111 of type int [line: 13]
.   .   .   .   Child: 2  Const 1212 of type int [line: 13]
.   .   Sibling: 8  If [line: 14]
.   .   .   Child: 0  Id: b of type (null) [line: 14]
.   .   .   Child: 1  If [line: 14]
.   .   .   .   Child: 0  Op: not of type (null) [line: 14]
.   .   .   .   .   Child: 0  Id: b of type (null) [line: 14]
.   .   .   .   Child: 1  While [line: 14]
.   .   .   .   .   Child: 0  Op: or of type (null) [line: 14]
.   .   .   .   .   .   Child: 0  Id: b of type (null) [line: 14]
.   .   .   .   .   .   Child: 1  Const true of type bool [line: 14]
.   .   .   .   .   Child: 1  Const 1313 of type int [line: 14]
.   .   .   .   Child: 2  Const 1414 of type int [line: 14]
.   .   .   Child: 2  Const 1515 of type int [line: 14]
.   .   Sibling: 9  If [line: 15]
.   .   .   Child: 0  Assign: <- of type (null) [line: 15]
.   .   .   .   Child: 0  Id: b of type (null) [line: 15]
.   .   .   .   Child: 1  Const true of type bool [line: 15]
.   .   .   Child: 1  Const 1616 of type int [line: 15]
.   .   Sibling: 10  While [line: 17]
.   .   .   Child: 0  Const false of type bool [line: 17]
.   .   .   Child: 1  Break [line: 17]
.   .   Sibling: 11  Op: + of type (null) [line: 19]
.   .   .   Child: 0  Id: a of type int [line: 19]
.   .   .   Child: 1  Const 1717 of type int [line: 19]
.   .   Sibling: 12  Op: - of type (null) [line: 20]
.   .   .   Child: 0  Const 1818 of type int [line: 20]
.   .   .   Child: 1  Id: a of type int [line: 20]
.   .   Sibling: 13  Op: * of type (null) [line: 21]
.   .   .   Child: 0  Id: a of type int [line: 21]
.   .   .   Child: 1  Const 1919 of type int [line: 21]
.   .   Sibling: 14  Op: / of type (null) [line: 22]
.   .   .   Child: 0  Const 2020 of type int [line: 22]
.   .   .   Child: 1  Id: a of type int [line: 22]
.   .   Sibling: 15  Op: % of type (null) [line: 23]
.   .   .   Child: 0  Id: a of type int [line: 23]
.   .   .   Child: 1  Const 2121 of type int [line: 23]
.   .   Sibling: 16  Assign: += of type (null) [line: 25]
.   .   .   Child: 0  Id: a of type int [line: 25]
.   .   .   Child: 1  Const 1 of type int [line: 25]
.   .   Sibling: 17  Assign: -= of type (null) [line: 26]
.   .   .   Child: 0  Id: a of type int [line: 26]
.   .   .   Child: 1  Const 2 of type int [line: 26]
.   .   Sibling: 18  Assign: *= of type (null) [line: 27]
.   .   .   Child: 0  Id: a of type int [line: 27]
.   .   .   Child: 1  Const 3 of type int [line: 27]
.   .   Sibling: 19  Assign: /= of type (null) [line: 28]
.   .   .   Child: 0  Id: a of type int [line: 28]
.   .   .   Child: 1  Const 4 of type int [line: 28]
.   .   Sibling: 20  Op: chsign of type (null) [line: 30]
.   .   .   Child: 0  Id: a of type int [line: 30]
.   .   Sibling: 21  Op: not of type (null) [line: 31]
.   .   .   Child: 0  Id: b of type (null) [line: 31]
.   .   Sibling: 22  Op: ? of type (null) [line: 32]
.   .   .   Child: 0  Id: a of type int [line: 32]
Sibling: 2  Func: cat returns type char [line: 35]
.   Child: 1  Compound [line: 36]
.   .   Child: 0  Var: a of type int [line: 37]
.   .   Sibling: 1  Var: b of type bool [line: 37]
.   .   Sibling: 2  Var: c of type char [line: 37]
.   .   Sibling: 3  Var: aa of array of type int [line: 38]
.   .   Sibling: 4  Var: ba of array of type bool [line: 38]
.   .   Sibling: 5  Var: ca of array of type char [line: 38]
.   .   Child: 1  Op: [ of type (null) [line: 40]
.   .   .   Child: 0  Id: aa of type int [line: 40]
.   .   .   Child: 1  Const 2 of type int [line: 40]
.   .   Sibling: 1  Assign: <- of type (null) [line: 41]
.   .   .   Child: 0  Op: [ of type (null) [line: 41]
.   .   .   .   Child: 0  Id: ba of type bool [line: 41]
.   .   .   .   Child: 1  Id: a of type int [line: 41]
.   .   .   Child: 1  Id: b of type bool [line: 41]
.   .   Sibling: 2  Assign: <- of type (null) [line: 42]
.   .   .   Child: 0  Op: [ of type (null) [line: 42]
.   .   .   .   Child: 0  Id: ca of type char [line: 42]
.   .   .   .   Child: 1  Op: [ of type (null) [line: 42]
.   .   .   .   .   Child: 0  Id: aa of type int [line: 42]
.   .   .   .   .   Child: 1  Const 1 of type int [line: 42]
.   .   .   Child: 1  Id: c of type char [line: 42]
.   .   Sibling: 3  Op: sizeof of type (null) [line: 44]
.   .   .   Child: 0  Id: ba of type bool [line: 44]
.   .   Sibling: 4  Op: ? of type (null) [line: 45]
.   .   .   Child: 0  Const 11 of type int [line: 45]
.   .   Sibling: 5  For [line: 47]
.   .   .   Child: 0  Var: z of type int [line: 47]
.   .   .   Child: 1  Range [line: 47]
.   .   .   .   Child: 0  Id: aa of type int [line: 47]
.   .   .   .   Child: 1  Id: aa of type int [line: 47]
.   .   .   Child: 2  Op: + of type (null) [line: 47]
.   .   .   .   Child: 0  Id: z of type int [line: 47]
.   .   .   .   Child: 1  Id: z of type int [line: 47]
.   .   Sibling: 6  For [line: 48]
.   .   .   Child: 0  Var: z of type int [line: 48]
.   .   .   Child: 1  Range [line: 48]
.   .   .   .   Child: 0  Id: ba of type bool [line: 48]
.   .   .   .   Child: 1  Id: aa of type int [line: 48]
.   .   .   .   Child: 2  Id: aa of type int [line: 48]
.   .   .   Child: 2  Op: and of type (null) [line: 48]
.   .   .   .   Child: 0  Id: b of type bool [line: 48]
.   .   .   .   Child: 1  Id: b of type bool [line: 48]
.   .   Sibling: 7  For [line: 49]
.   .   .   Child: 0  Var: z of type int [line: 49]
.   .   .   Child: 1  Range [line: 49]
.   .   .   .   Child: 0  Op: + of type (null) [line: 49]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 49]
.   .   .   .   .   Child: 1  Const 4 of type int [line: 49]
.   .   .   .   Child: 1  Op: * of type (null) [line: 49]
.   .   .   .   .   Child: 0  Const 7 of type int [line: 49]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 49]
.   .   .   .   Child: 2  Op: % of type (null) [line: 49]
.   .   .   .   .   Child: 0  Const 15 of type int [line: 49]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 49]
.   .   .   Child: 2  Compound [line: 49]
.   .   .   .   Child: 1  Assign: <- of type (null) [line: 50]
.   .   .   .   .   Child: 0  Id: a of type int [line: 50]
.   .   .   .   .   Child: 1  Id: z of type int [line: 50]
.   .   .   .   Sibling: 1  Assign: <- of type (null) [line: 51]
.   .   .   .   .   Child: 0  Id: z of type int [line: 51]
.   .   .   .   .   Child: 1  Id: a of type int [line: 51]
.   .   Sibling: 8  Assign: <- of type (null) [line: 54]
.   .   .   Child: 0  Id: aa of type int [line: 54]
.   .   .   Child: 1  Id: aa of type int [line: 54]
.   .   Sibling: 9  Op: = of type (null) [line: 55]
.   .   .   Child: 0  Id: ba of type bool [line: 55]
.   .   .   Child: 1  Id: ba of type bool [line: 55]
.   .   Sibling: 10  Op: != of type (null) [line: 56]
.   .   .   Child: 0  Id: ca of type char [line: 56]
.   .   .   Child: 1  Id: ca of type char [line: 56]
.   .   Sibling: 11  Op: > of type (null) [line: 57]
.   .   .   Child: 0  Id: aa of type int [line: 57]
.   .   .   Child: 1  Id: aa of type int [line: 57]
.   .   Sibling: 12  Op: >= of type (null) [line: 58]
.   .   .   Child: 0  Id: ba of type bool [line: 58]
.   .   .   Child: 1  Id: ba of type bool [line: 58]
.   .   Sibling: 13  Op: < of type (null) [line: 59]
.   .   .   Child: 0  Id: ca of type char [line: 59]
.   .   .   Child: 1  Id: ca of type char [line: 59]
.   .   Sibling: 14  Op: <= of type (null) [line: 60]
.   .   .   Child: 0  Id: aa of type int [line: 60]
.   .   .   Child: 1  Id: aa of type int [line: 60]
.   .   Sibling: 15  Assign: <- of type (null) [line: 62]
.   .   .   Child: 0  Id: ca of type char [line: 62]
.   .   .   Child: 1  Const "dogs are great" of type (null) [line: 62]
.   .   Sibling: 16  Return [line: 64]
.   .   .   Child: 0  Const 'm' of type char [line: 64]
Sibling: 3  Func: dog returns type void [line: 67]
.   Child: 0  Parm: i of type int [line: 67]
.   Child: 1  Compound [line: 67]
.   .   Child: 1  If [line: 68]
.   .   .   Child: 0  Op: = of type (null) [line: 68]
.   .   .   .   Child: 0  Id: i of type int [line: 68]
.   .   .   .   Child: 1  Const 3 of type int [line: 68]
.   .   .   Child: 1  Compound [line: 68]
.   .   .   .   Child: 0  Var: i of type int [line: 69]
.   .   .   .   Child: 1  Assign: <- of type (null) [line: 70]
.   .   .   .   .   Child: 0  Id: i of type int [line: 70]
.   .   .   .   .   Child: 1  Id: i of type int [line: 70]
Sibling: 4  Func: main returns type int [line: 74]
.   Child: 1  Compound [line: 75]
.   .   Child: 0  Var: bbb of static type bool [line: 76]
.   .   Sibling: 1  Init: : of type char [line: 77]
.   .   .   Child: 0  Var: ccc of array of type (null) [line: 77]
.   .   .   Child: 1  Const "cows" of type (null) [line: 77]
.   .   Child: 1  Call: ant of type int [line: 79]
.   .   Sibling: 1  Call: bat of type void [line: 80]
.   .   .   Child: 0  Const 676 of type int [line: 80]
.   .   .   Sibling: 1  Const 'g' of type char [line: 80]
.   .   Sibling: 2  Call: cat of type char [line: 81]
.   .   Sibling: 3  Call: bat of type void [line: 82]
.   .   .   Child: 0  Call: ant of type (null) [line: 82]
.   .   .   Sibling: 1  Call: cat of type (null) [line: 82]
.   .   Sibling: 4  Assign: <- of type (null) [line: 83]
.   .   .   Child: 0  Id: bbb of type bool [line: 83]
.   .   .   Child: 1  Op: != of type (null) [line: 83]
.   .   .   .   Child: 0  Op: [ of type (null) [line: 83]
.   .   .   .   .   Child: 0  Id: ccc of type (null) [line: 83]
.   .   .   .   .   Child: 1  Const 2 of type int [line: 83]
.   .   .   .   Child: 1  Const 'r' of type char [line: 83]
.   .   Sibling: 5  Return [line: 85]
.   .   .   Child: 0  Op: + of type (null) [line: 85]
.   .   .   .   Child: 0  Call: ant of type int [line: 85]
.   .   .   .   Child: 1  Const 807 of type int [line: 85]
Number of warnings: 0
Number of errors: 33

==============
==============
./c- -P array.c-
ERROR(9) : Cannot index nonarray 'c'.
ERROR(11) : Symbol 'output' is not declared.
ERROR(12) : Symbol 'output' is not declared.
ERROR(13) : Symbol 'output' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
                   a:  
                main:  
Scope: main            -----------------
                   b:  
                   c:  
===========  ============  ===========
Var: a of array of type int [line: 2]
Sibling: 1  Func: main returns type void [line: 4]
.   Child: 1  Compound [line: 5]
.   .   Child: 0  Var: b of array of type int [line: 6]
.   .   Sibling: 1  Var: c of array of type int [line: 7]
.   .   Child: 1  Op: [ of type (null) [line: 9]
.   .   .   Child: 0  Id: c of type int [line: 9]
.   .   .   Child: 1  Const 22 of type int [line: 9]
.   .   Sibling: 1  Const 999 of type int [line: 10]
.   .   Sibling: 2  Call: output of type (null) [line: 11]
.   .   .   Child: 0  Op: sizeof of type (null) [line: 11]
.   .   .   .   Child: 0  Id: a of type (null) [line: 11]
.   .   Sibling: 3  Call: output of type (null) [line: 12]
.   .   .   Child: 0  Op: sizeof of type (null) [line: 12]
.   .   .   .   Child: 0  Id: b of type (null) [line: 12]
.   .   Sibling: 4  Call: output of type (null) [line: 13]
.   .   .   Child: 0  Op: sizeof of type (null) [line: 13]
.   .   .   .   Child: 0  Id: c of type (null) [line: 13]
Number of warnings: 0
Number of errors: 3

==============
==============
./c- -P arrayops.c-
ERROR(9) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(9) : Cannot index nonarray 'bb'.
ERROR(10) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(10) : Cannot index nonarray 'aa'.
ERROR(17) : Unary 'chsign' requires an operand of type int but was given type (null).
ERROR(18) : Unary 'chsign' requires an operand of type int but was given type (null).
ERROR(19) : Unary 'chsign' requires an operand of type int but was given type (null).
ERROR(19) : Unary 'chsign' requires an operand of type int but was given type (null).
ERROR(21) : Cannot index nonarray 'a'.
ERROR(22) : Cannot index nonarray 'a'.
ERROR(23) : Cannot index nonarray 'aa'.
ERROR(24) : Cannot index nonarray 'aa'.
ERROR(26) : The operation 'sizeof' only works with arrays.
ERROR(27) : The operation 'sizeof' only works with arrays.
ERROR(28) : Unary '?' requires an operand of type int but was given type (null).
ERROR(29) : Unary '?' requires an operand of type int but was given type (null).
ERROR(30) : Unary 'not' requires an operand of type bool but was given type (null).
ERROR(31) : Unary 'not' requires an operand of type bool but was given type (null).
ERROR(32) : Unary '++' requires an operand of type int but was given type (null).
ERROR(33) : Unary '++' requires an operand of type int but was given type (null).
ERROR(35) : '+' requires operands of type int but lhs is of type (null).
ERROR(36) : '+' requires operands of type int but lhs is of type (null).
ERROR(37) : '+' requires operands of type int but lhs is of type (null).
ERROR(38) : '+' requires operands of type int but lhs is of type (null).
ERROR(40) : 'and' requires operands of type bool but lhs is of type (null).
ERROR(41) : 'and' requires operands of type bool but lhs is of type (null).
ERROR(42) : 'and' requires operands of type bool but lhs is of type (null).
ERROR(43) : 'and' requires operands of type bool but lhs is of type (null).
ERROR(45) : Cannot index nonarray 'c'.
ERROR(46) : Cannot index nonarray 'cc'.
ERROR(47) : Cannot index nonarray 'c'.
ERROR(48) : Cannot index nonarray 'cc'.
ERROR(50) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(51) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(52) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(52) : Cannot index nonarray 'cc'.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   a:  
                  aa:  
                   b:  
                  bb:  
                   c:  
                  cc:  
===========  ============  ===========
ID: a ParentID: <-
yes, we found ID: a
ID: a ParentID: <-
yes, we found ID: a
ID: a ParentID: <-
yes, we found ID: a
0 0 68
0 0 69
0 0 70
0 0 71
0 0 72
0 0 73
0 0 75
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: a of type int [line: 4]
.   .   Sibling: 1  Var: aa of array of type int [line: 4]
.   .   Sibling: 2  Var: b of type bool [line: 5]
.   .   Sibling: 3  Var: bb of array of type bool [line: 5]
.   .   Sibling: 4  Var: c of type char [line: 6]
.   .   Sibling: 5  Var: cc of array of type char [line: 6]
.   .   Child: 1  Assign: <- of type int [line: 8]
.   .   .   Child: 0  Id: a of type int [line: 8]
.   .   .   Child: 1  Const 42 of type int [line: 8]
.   .   Sibling: 1  Assign: <- of type (null) [line: 9]
.   .   .   Child: 0  Id: b of type bool [line: 9]
.   .   .   Child: 1  Assign: <- of type (null) [line: 9]
.   .   .   .   Child: 0  Op: [ of type (null) [line: 9]
.   .   .   .   .   Child: 0  Id: bb of type bool [line: 9]
.   .   .   .   .   Child: 1  Const 2 of type int [line: 9]
.   .   .   .   Child: 1  Const true of type bool [line: 9]
.   .   Sibling: 2  Assign: <- of type (null) [line: 10]
.   .   .   Child: 0  Op: [ of type (null) [line: 10]
.   .   .   .   Child: 0  Id: aa of type int [line: 10]
.   .   .   .   Child: 1  Const 1 of type int [line: 10]
.   .   .   Child: 1  Const 666 of type int [line: 10]
.   .   Sibling: 3  Assign: <- of type (null) [line: 12]
.   .   .   Child: 0  Id: a of type int [line: 12]
.   .   .   Child: 1  Id: a of type int [line: 12]
.   .   Sibling: 4  Assign: <- of type (null) [line: 13]
.   .   .   Child: 0  Id: a of type int [line: 13]
.   .   .   Child: 1  Id: aa of type int [line: 13]
.   .   Sibling: 5  Assign: <- of type (null) [line: 14]
.   .   .   Child: 0  Id: aa of type int [line: 14]
.   .   .   Child: 1  Id: a of type int [line: 14]
.   .   Sibling: 6  Assign: <- of type (null) [line: 15]
.   .   .   Child: 0  Id: aa of type int [line: 15]
.   .   .   Child: 1  Id: aa of type int [line: 15]
.   .   Sibling: 7  Op: chsign of type (null) [line: 17]
.   .   .   Child: 0  Id: a of type int [line: 17]
.   .   Sibling: 8  Op: chsign of type (null) [line: 18]
.   .   .   Child: 0  Id: aa of type int [line: 18]
.   .   Sibling: 9  Op: chsign of type (null) [line: 19]
.   .   .   Child: 0  Op: chsign of type (null) [line: 19]
.   .   .   .   Child: 0  Id: aa of type int [line: 19]
.   .   Sibling: 10  Op: [ of type (null) [line: 21]
.   .   .   Child: 0  Id: a of type int [line: 21]
.   .   .   Child: 1  Id: a of type int [line: 21]
.   .   Sibling: 11  Op: [ of type (null) [line: 22]
.   .   .   Child: 0  Id: a of type int [line: 22]
.   .   .   Child: 1  Id: aa of type int [line: 22]
.   .   Sibling: 12  Op: [ of type (null) [line: 23]
.   .   .   Child: 0  Id: aa of type int [line: 23]
.   .   .   Child: 1  Id: a of type int [line: 23]
.   .   Sibling: 13  Op: [ of type (null) [line: 24]
.   .   .   Child: 0  Id: aa of type int [line: 24]
.   .   .   Child: 1  Id: aa of type int [line: 24]
.   .   Sibling: 14  Op: sizeof of type (null) [line: 26]
.   .   .   Child: 0  Id: a of type int [line: 26]
.   .   Sibling: 15  Op: sizeof of type (null) [line: 27]
.   .   .   Child: 0  Id: aa of type int [line: 27]
.   .   Sibling: 16  Op: ? of type (null) [line: 28]
.   .   .   Child: 0  Id: a of type int [line: 28]
.   .   Sibling: 17  Op: ? of type (null) [line: 29]
.   .   .   Child: 0  Id: aa of type int [line: 29]
.   .   Sibling: 18  Op: not of type (null) [line: 30]
.   .   .   Child: 0  Id: b of type bool [line: 30]
.   .   Sibling: 19  Op: not of type (null) [line: 31]
.   .   .   Child: 0  Id: bb of type bool [line: 31]
.   .   Sibling: 20  Assign: ++ of type (null) [line: 32]
.   .   .   Child: 0  Id: a of type int [line: 32]
.   .   Sibling: 21  Assign: ++ of type (null) [line: 33]
.   .   .   Child: 0  Id: aa of type int [line: 33]
.   .   Sibling: 22  Op: + of type (null) [line: 35]
.   .   .   Child: 0  Id: a of type int [line: 35]
.   .   .   Child: 1  Id: a of type int [line: 35]
.   .   Sibling: 23  Op: + of type (null) [line: 36]
.   .   .   Child: 0  Id: a of type int [line: 36]
.   .   .   Child: 1  Id: aa of type int [line: 36]
.   .   Sibling: 24  Op: + of type (null) [line: 37]
.   .   .   Child: 0  Id: aa of type int [line: 37]
.   .   .   Child: 1  Id: a of type int [line: 37]
.   .   Sibling: 25  Op: + of type (null) [line: 38]
.   .   .   Child: 0  Id: aa of type int [line: 38]
.   .   .   Child: 1  Id: aa of type int [line: 38]
.   .   Sibling: 26  Op: and of type (null) [line: 40]
.   .   .   Child: 0  Id: b of type bool [line: 40]
.   .   .   Child: 1  Id: b of type bool [line: 40]
.   .   Sibling: 27  Op: and of type (null) [line: 41]
.   .   .   Child: 0  Id: b of type bool [line: 41]
.   .   .   Child: 1  Id: bb of type bool [line: 41]
.   .   Sibling: 28  Op: and of type (null) [line: 42]
.   .   .   Child: 0  Id: bb of type bool [line: 42]
.   .   .   Child: 1  Id: b of type bool [line: 42]
.   .   Sibling: 29  Op: and of type (null) [line: 43]
.   .   .   Child: 0  Id: bb of type bool [line: 43]
.   .   .   Child: 1  Id: bb of type bool [line: 43]
.   .   Sibling: 30  Assign: <- of type (null) [line: 45]
.   .   .   Child: 0  Id: c of type char [line: 45]
.   .   .   Child: 1  Op: [ of type (null) [line: 45]
.   .   .   .   Child: 0  Id: c of type char [line: 45]
.   .   .   .   Child: 1  Const 3 of type int [line: 45]
.   .   Sibling: 31  Assign: <- of type (null) [line: 46]
.   .   .   Child: 0  Id: c of type char [line: 46]
.   .   .   Child: 1  Op: [ of type (null) [line: 46]
.   .   .   .   Child: 0  Id: cc of type char [line: 46]
.   .   .   .   Child: 1  Const 3 of type int [line: 46]
.   .   Sibling: 32  Assign: <- of type (null) [line: 47]
.   .   .   Child: 0  Id: cc of type char [line: 47]
.   .   .   Child: 1  Op: [ of type (null) [line: 47]
.   .   .   .   Child: 0  Id: c of type char [line: 47]
.   .   .   .   Child: 1  Const 3 of type int [line: 47]
.   .   Sibling: 33  Assign: <- of type (null) [line: 48]
.   .   .   Child: 0  Id: cc of type char [line: 48]
.   .   .   Child: 1  Op: [ of type (null) [line: 48]
.   .   .   .   Child: 0  Id: cc of type char [line: 48]
.   .   .   .   Child: 1  Const 3 of type int [line: 48]
.   .   Sibling: 34  Assign: <- of type (null) [line: 50]
.   .   .   Child: 0  Id: c of type char [line: 50]
.   .   .   Child: 1  Const 'a' of type char [line: 50]
.   .   Sibling: 35  Assign: <- of type (null) [line: 51]
.   .   .   Child: 0  Id: cc of type char [line: 51]
.   .   .   Child: 1  Const 'b' of type char [line: 51]
.   .   Sibling: 36  Assign: <- of type (null) [line: 52]
.   .   .   Child: 0  Op: [ of type (null) [line: 52]
.   .   .   .   Child: 0  Id: cc of type char [line: 52]
.   .   .   .   Child: 1  Const 0 of type int [line: 52]
.   .   .   Child: 1  Const 'c' of type char [line: 52]
.   .   Sibling: 37  Op: = of type (null) [line: 54]
.   .   .   Child: 0  Id: aa of type int [line: 54]
.   .   .   Child: 1  Id: aa of type int [line: 54]
.   .   Sibling: 38  Op: = of type (null) [line: 55]
.   .   .   Child: 0  Id: cc of type char [line: 55]
.   .   .   Child: 1  Id: cc of type char [line: 55]
.   .   Sibling: 39  Op: = of type (null) [line: 56]
.   .   .   Child: 0  Id: aa of type int [line: 56]
.   .   .   Child: 1  Id: cc of type char [line: 56]
.   .   Sibling: 40  Op: = of type (null) [line: 57]
.   .   .   Child: 0  Id: a of type int [line: 57]
.   .   .   Child: 1  Id: aa of type int [line: 57]
.   .   Sibling: 41  Op: = of type (null) [line: 58]
.   .   .   Child: 0  Id: aa of type int [line: 58]
.   .   .   Child: 1  Id: a of type int [line: 58]
.   .   Sibling: 42  Op: = of type (null) [line: 59]
.   .   .   Child: 0  Id: a of type int [line: 59]
.   .   .   Child: 1  Id: a of type int [line: 59]
.   .   Sibling: 43  Op: >= of type (null) [line: 61]
.   .   .   Child: 0  Id: aa of type int [line: 61]
.   .   .   Child: 1  Id: aa of type int [line: 61]
.   .   Sibling: 44  Op: >= of type (null) [line: 62]
.   .   .   Child: 0  Id: cc of type char [line: 62]
.   .   .   Child: 1  Id: cc of type char [line: 62]
.   .   Sibling: 45  Op: >= of type (null) [line: 63]
.   .   .   Child: 0  Id: aa of type int [line: 63]
.   .   .   Child: 1  Id: cc of type char [line: 63]
.   .   Sibling: 46  Op: >= of type (null) [line: 64]
.   .   .   Child: 0  Id: a of type int [line: 64]
.   .   .   Child: 1  Id: aa of type int [line: 64]
.   .   Sibling: 47  Op: >= of type (null) [line: 65]
.   .   .   Child: 0  Id: aa of type int [line: 65]
.   .   .   Child: 1  Id: a of type int [line: 65]
.   .   Sibling: 48  Op: >= of type (null) [line: 66]
.   .   .   Child: 0  Id: a of type int [line: 66]
.   .   .   Child: 1  Id: a of type int [line: 66]
.   .   Sibling: 49  Op: < of type (null) [line: 68]
.   .   .   Child: 0  Id: aa of type int [line: 68]
.   .   .   Child: 1  Id: aa of type int [line: 68]
.   .   Sibling: 50  Op: < of type (null) [line: 69]
.   .   .   Child: 0  Id: cc of type char [line: 69]
.   .   .   Child: 1  Id: cc of type char [line: 69]
.   .   Sibling: 51  Op: < of type (null) [line: 70]
.   .   .   Child: 0  Id: aa of type int [line: 70]
.   .   .   Child: 1  Id: cc of type char [line: 70]
.   .   Sibling: 52  Op: < of type (null) [line: 71]
.   .   .   Child: 0  Id: a of type int [line: 71]
.   .   .   Child: 1  Id: aa of type int [line: 71]
.   .   Sibling: 53  Op: < of type (null) [line: 72]
.   .   .   Child: 0  Id: aa of type int [line: 72]
.   .   .   Child: 1  Id: a of type int [line: 72]
.   .   Sibling: 54  Op: < of type (null) [line: 73]
.   .   .   Child: 0  Id: a of type int [line: 73]
.   .   .   Child: 1  Id: a of type int [line: 73]
.   .   Sibling: 55  Op: < of type (null) [line: 75]
.   .   .   Child: 0  Id: c of type char [line: 75]
.   .   .   Child: 1  Id: aa of type int [line: 75]
Number of warnings: 0
Number of errors: 25

==============
==============
./c- -P arrayx.c-
ERROR(10) : '<-' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(11) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(12) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(16) : Cannot index nonarray 'i'.
ERROR(17) : Cannot index nonarray 'i'.
ERROR(18) : Cannot index nonarray 'i'.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   a:  
                   b:  
                  bb:  
                   c:  
                  cc:  
                   d:  
                   e:  
                   i:  
                  ii:  
===========  ============  ===========
ID: b ParentID: <-
yes, we found ID: b
ID: b ParentID: <-
yes, we found ID: b
ID: b ParentID: <-
yes, we found ID: b
Func: main returns type void [line: 1]
.   Child: 1  Compound [line: 1]
.   .   Child: 0  Var: a of type int [line: 2]
.   .   Sibling: 1  Var: d of type int [line: 2]
.   .   Sibling: 2  Var: e of type int [line: 2]
.   .   Sibling: 3  Var: b of array of type bool [line: 3]
.   .   Sibling: 4  Var: c of array of type char [line: 4]
.   .   Sibling: 5  Var: i of array of type int [line: 5]
.   .   Sibling: 6  Init: : of type bool [line: 6]
.   .   .   Child: 0  Var: bb of array of type (null) [line: 6]
.   .   .   Child: 1  Const true of type bool [line: 6]
.   .   Sibling: 7  Init: : of type char [line: 7]
.   .   .   Child: 0  Var: cc of array of type (null) [line: 7]
.   .   .   Child: 1  Const 'x' of type char [line: 7]
.   .   Sibling: 8  Init: : of type int [line: 8]
.   .   .   Child: 0  Var: ii of array of type (null) [line: 8]
.   .   .   Child: 1  Const 666 of type int [line: 8]
.   .   Child: 1  Assign: <- of type bool [line: 10]
.   .   .   Child: 0  Id: b of type bool [line: 10]
.   .   .   Child: 1  Const true of type bool [line: 10]
.   .   Sibling: 1  Assign: <- of type (null) [line: 11]
.   .   .   Child: 0  Id: c of type char [line: 11]
.   .   .   Child: 1  Const 'x' of type char [line: 11]
.   .   Sibling: 2  Assign: <- of type (null) [line: 12]
.   .   .   Child: 0  Id: i of type int [line: 12]
.   .   .   Child: 1  Const 10 of type int [line: 12]
.   .   Sibling: 3  Assign: <- of type (null) [line: 13]
.   .   .   Child: 0  Id: bb of type (null) [line: 13]
.   .   .   Child: 1  Id: b of type bool [line: 13]
.   .   Sibling: 4  Assign: <- of type (null) [line: 14]
.   .   .   Child: 0  Id: cc of type (null) [line: 14]
.   .   .   Child: 1  Const "dogs" of type (null) [line: 14]
.   .   Sibling: 5  Assign: <- of type (null) [line: 15]
.   .   .   Child: 0  Id: ii of type (null) [line: 15]
.   .   .   Child: 1  Id: i of type int [line: 15]
.   .   Sibling: 6  Op: [ of type (null) [line: 16]
.   .   .   Child: 0  Id: i of type int [line: 16]
.   .   .   Child: 1  Const 3 of type int [line: 16]
.   .   Sibling: 7  Assign: <- of type (null) [line: 17]
.   .   .   Child: 0  Id: a of type int [line: 17]
.   .   .   Child: 1  Op: [ of type (null) [line: 17]
.   .   .   .   Child: 0  Id: i of type int [line: 17]
.   .   .   .   Child: 1  Const 3 of type int [line: 17]
.   .   Sibling: 8  Assign: <- of type (null) [line: 18]
.   .   .   Child: 0  Op: [ of type (null) [line: 18]
.   .   .   .   Child: 0  Id: i of type int [line: 18]
.   .   .   .   Child: 1  Const 3 of type int [line: 18]
.   .   .   Child: 1  Id: a of type int [line: 18]
.   .   Sibling: 9  Assign: <- of type (null) [line: 19]
.   .   .   Child: 0  Id: a of type int [line: 19]
.   .   .   Child: 1  Id: d of type int [line: 19]
Number of warnings: 0
Number of errors: 3

==============
==============
./c- -P assignBool.c-
ERROR(9) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(10) : Symbol 'outputb' is not declared.
ERROR(11) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(11) : Cannot index nonarray 'gy'.
ERROR(12) : Symbol 'outputb' is not declared.
ERROR(13) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(14) : Symbol 'outputb' is not declared.
ERROR(15) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(15) : Cannot index nonarray 'y'.
ERROR(16) : Symbol 'outputb' is not declared.
ERROR(17) : Symbol 'outnl' is not declared.
ERROR(19) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(20) : Symbol 'outputb' is not declared.
ERROR(21) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(21) : Cannot index nonarray 'py'.
ERROR(22) : Symbol 'outputb' is not declared.
ERROR(23) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(24) : Symbol 'outputb' is not declared.
ERROR(25) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(25) : Cannot index nonarray 'sy'.
ERROR(26) : Symbol 'outputb' is not declared.
ERROR(27) : Symbol 'outnl' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
           esperanza: p9Ô 
                  gx:  
                  gy:  
Scope: esperanza       -----------------
                main:  
                  px:  
                  py:  
Scope: main            -----------------
                  zx:  
                  zy:  
===========  ============  ===========
Var: gx of type bool [line: 2]
Sibling: 1  Var: gy of array of type bool [line: 2]
Sibling: 2  Func: esperanza returns type void [line: 4]
.   Child: 0  Parm: px of type bool [line: 4]
.   Sibling: 1  Parm: py of array of type bool [line: 4]
.   Child: 1  Compound [line: 5]
.   .   Child: 0  Var: x of type bool [line: 6]
.   .   Sibling: 1  Var: y of array of type bool [line: 6]
.   .   Sibling: 2  Var: sx of static type bool [line: 7]
.   .   Sibling: 3  Var: sy of array of type bool [line: 7]
.   .   Child: 1  Assign: <- of type (null) [line: 9]
.   .   .   Child: 0  Id: gx of type bool [line: 9]
.   .   .   Child: 1  Const true of type bool [line: 9]
.   .   Sibling: 1  Call: outputb of type (null) [line: 10]
.   .   .   Child: 0  Id: gx of type (null) [line: 10]
.   .   Sibling: 2  Assign: <- of type (null) [line: 11]
.   .   .   Child: 0  Op: [ of type (null) [line: 11]
.   .   .   .   Child: 0  Id: gy of type bool [line: 11]
.   .   .   .   Child: 1  Const 9 of type int [line: 11]
.   .   .   Child: 1  Const true of type bool [line: 11]
.   .   Sibling: 3  Call: outputb of type (null) [line: 12]
.   .   .   Child: 0  Op: [ of type (null) [line: 12]
.   .   .   .   Child: 0  Id: gy of type (null) [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   Sibling: 4  Assign: <- of type (null) [line: 13]
.   .   .   Child: 0  Id: x of type bool [line: 13]
.   .   .   Child: 1  Const true of type bool [line: 13]
.   .   Sibling: 5  Call: outputb of type (null) [line: 14]
.   .   .   Child: 0  Id: x of type (null) [line: 14]
.   .   Sibling: 6  Assign: <- of type (null) [line: 15]
.   .   .   Child: 0  Op: [ of type (null) [line: 15]
.   .   .   .   Child: 0  Id: y of type bool [line: 15]
.   .   .   .   Child: 1  Const 9 of type int [line: 15]
.   .   .   Child: 1  Const true of type bool [line: 15]
.   .   Sibling: 7  Call: outputb of type (null) [line: 16]
.   .   .   Child: 0  Op: [ of type (null) [line: 16]
.   .   .   .   Child: 0  Id: y of type (null) [line: 16]
.   .   .   .   Child: 1  Const 9 of type int [line: 16]
.   .   Sibling: 8  Call: outnl of type (null) [line: 17]
.   .   Sibling: 9  Assign: <- of type (null) [line: 19]
.   .   .   Child: 0  Id: px of type bool [line: 19]
.   .   .   Child: 1  Const true of type bool [line: 19]
.   .   Sibling: 10  Call: outputb of type (null) [line: 20]
.   .   .   Child: 0  Id: px of type (null) [line: 20]
.   .   Sibling: 11  Assign: <- of type (null) [line: 21]
.   .   .   Child: 0  Op: [ of type (null) [line: 21]
.   .   .   .   Child: 0  Id: py of type bool [line: 21]
.   .   .   .   Child: 1  Const 9 of type int [line: 21]
.   .   .   Child: 1  Const true of type bool [line: 21]
.   .   Sibling: 12  Call: outputb of type (null) [line: 22]
.   .   .   Child: 0  Op: [ of type (null) [line: 22]
.   .   .   .   Child: 0  Id: py of type (null) [line: 22]
.   .   .   .   Child: 1  Const 9 of type int [line: 22]
.   .   Sibling: 13  Assign: <- of type (null) [line: 23]
.   .   .   Child: 0  Id: sx of type bool [line: 23]
.   .   .   Child: 1  Const true of type bool [line: 23]
.   .   Sibling: 14  Call: outputb of type (null) [line: 24]
.   .   .   Child: 0  Id: sx of type (null) [line: 24]
.   .   Sibling: 15  Assign: <- of type (null) [line: 25]
.   .   .   Child: 0  Op: [ of type (null) [line: 25]
.   .   .   .   Child: 0  Id: sy of type bool [line: 25]
.   .   .   .   Child: 1  Const 9 of type int [line: 25]
.   .   .   Child: 1  Const true of type bool [line: 25]
.   .   Sibling: 16  Call: outputb of type (null) [line: 26]
.   .   .   Child: 0  Op: [ of type (null) [line: 26]
.   .   .   .   Child: 0  Id: sy of type (null) [line: 26]
.   .   .   .   Child: 1  Const 9 of type int [line: 26]
.   .   Sibling: 17  Call: outnl of type (null) [line: 27]
Sibling: 3  Func: main returns type void [line: 31]
.   Child: 1  Compound [line: 32]
.   .   Child: 0  Var: zx of type bool [line: 33]
.   .   Sibling: 1  Var: zy of array of type bool [line: 33]
.   .   Child: 1  Call: esperanza of type void [line: 34]
.   .   .   Child: 0  Id: zx of type (null) [line: 34]
.   .   .   Sibling: 1  Id: zy of type (null) [line: 34]
Number of warnings: 0
Number of errors: 18

==============
==============
./c- -P assignChar.c-
ERROR(9) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(10) : Symbol 'outputc' is not declared.
ERROR(11) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(11) : Cannot index nonarray 'gy'.
ERROR(12) : Symbol 'outputc' is not declared.
ERROR(13) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(14) : Symbol 'outputc' is not declared.
ERROR(15) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(15) : Cannot index nonarray 'y'.
ERROR(16) : Symbol 'outputc' is not declared.
ERROR(17) : Symbol 'outnl' is not declared.
ERROR(18) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(19) : Symbol 'outputc' is not declared.
ERROR(20) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(20) : Cannot index nonarray 'py'.
ERROR(21) : Symbol 'outputc' is not declared.
ERROR(22) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(23) : Symbol 'outputc' is not declared.
ERROR(24) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(24) : Cannot index nonarray 'sy'.
ERROR(25) : Symbol 'outputc' is not declared.
ERROR(26) : Symbol 'outnl' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
           esperanza: p) 
                  gx:  
                  gy:  
Scope: esperanza       -----------------
                main:  
                  px:  
                  py:  
Scope: main            -----------------
                  zx:  
                  zy:  
===========  ============  ===========
Var: gx of type char [line: 2]
Sibling: 1  Var: gy of array of type char [line: 2]
Sibling: 2  Func: esperanza returns type void [line: 4]
.   Child: 0  Parm: px of type char [line: 4]
.   Sibling: 1  Parm: py of array of type char [line: 4]
.   Child: 1  Compound [line: 5]
.   .   Child: 0  Var: x of type char [line: 6]
.   .   Sibling: 1  Var: y of array of type char [line: 6]
.   .   Sibling: 2  Var: sx of static type char [line: 7]
.   .   Sibling: 3  Var: sy of array of type char [line: 7]
.   .   Child: 1  Assign: <- of type (null) [line: 9]
.   .   .   Child: 0  Id: gx of type char [line: 9]
.   .   .   Child: 1  Const 'a' of type char [line: 9]
.   .   Sibling: 1  Call: outputc of type (null) [line: 10]
.   .   .   Child: 0  Id: gx of type (null) [line: 10]
.   .   Sibling: 2  Assign: <- of type (null) [line: 11]
.   .   .   Child: 0  Op: [ of type (null) [line: 11]
.   .   .   .   Child: 0  Id: gy of type char [line: 11]
.   .   .   .   Child: 1  Const 9 of type int [line: 11]
.   .   .   Child: 1  Const 'b' of type char [line: 11]
.   .   Sibling: 3  Call: outputc of type (null) [line: 12]
.   .   .   Child: 0  Op: [ of type (null) [line: 12]
.   .   .   .   Child: 0  Id: gy of type (null) [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   Sibling: 4  Assign: <- of type (null) [line: 13]
.   .   .   Child: 0  Id: x of type char [line: 13]
.   .   .   Child: 1  Const 'c' of type char [line: 13]
.   .   Sibling: 5  Call: outputc of type (null) [line: 14]
.   .   .   Child: 0  Id: x of type (null) [line: 14]
.   .   Sibling: 6  Assign: <- of type (null) [line: 15]
.   .   .   Child: 0  Op: [ of type (null) [line: 15]
.   .   .   .   Child: 0  Id: y of type char [line: 15]
.   .   .   .   Child: 1  Const 9 of type int [line: 15]
.   .   .   Child: 1  Const 'd' of type char [line: 15]
.   .   Sibling: 7  Call: outputc of type (null) [line: 16]
.   .   .   Child: 0  Op: [ of type (null) [line: 16]
.   .   .   .   Child: 0  Id: y of type (null) [line: 16]
.   .   .   .   Child: 1  Const 9 of type int [line: 16]
.   .   Sibling: 8  Call: outnl of type (null) [line: 17]
.   .   Sibling: 9  Assign: <- of type (null) [line: 18]
.   .   .   Child: 0  Id: px of type char [line: 18]
.   .   .   Child: 1  Const 'e' of type char [line: 18]
.   .   Sibling: 10  Call: outputc of type (null) [line: 19]
.   .   .   Child: 0  Id: px of type (null) [line: 19]
.   .   Sibling: 11  Assign: <- of type (null) [line: 20]
.   .   .   Child: 0  Op: [ of type (null) [line: 20]
.   .   .   .   Child: 0  Id: py of type char [line: 20]
.   .   .   .   Child: 1  Const 9 of type int [line: 20]
.   .   .   Child: 1  Const 'f' of type char [line: 20]
.   .   Sibling: 12  Call: outputc of type (null) [line: 21]
.   .   .   Child: 0  Op: [ of type (null) [line: 21]
.   .   .   .   Child: 0  Id: py of type (null) [line: 21]
.   .   .   .   Child: 1  Const 9 of type int [line: 21]
.   .   Sibling: 13  Assign: <- of type (null) [line: 22]
.   .   .   Child: 0  Id: sx of type char [line: 22]
.   .   .   Child: 1  Const 'f' of type char [line: 22]
.   .   Sibling: 14  Call: outputc of type (null) [line: 23]
.   .   .   Child: 0  Id: sx of type (null) [line: 23]
.   .   Sibling: 15  Assign: <- of type (null) [line: 24]
.   .   .   Child: 0  Op: [ of type (null) [line: 24]
.   .   .   .   Child: 0  Id: sy of type char [line: 24]
.   .   .   .   Child: 1  Const 9 of type int [line: 24]
.   .   .   Child: 1  Const 'h' of type char [line: 24]
.   .   Sibling: 16  Call: outputc of type (null) [line: 25]
.   .   .   Child: 0  Op: [ of type (null) [line: 25]
.   .   .   .   Child: 0  Id: sy of type (null) [line: 25]
.   .   .   .   Child: 1  Const 9 of type int [line: 25]
.   .   Sibling: 17  Call: outnl of type (null) [line: 26]
Sibling: 3  Func: main returns type void [line: 30]
.   Child: 1  Compound [line: 31]
.   .   Child: 0  Var: zx of type char [line: 32]
.   .   Sibling: 1  Var: zy of array of type char [line: 32]
.   .   Child: 1  Call: esperanza of type void [line: 33]
.   .   .   Child: 0  Id: zx of type (null) [line: 33]
.   .   .   Sibling: 1  Id: zy of type (null) [line: 33]
Number of warnings: 0
Number of errors: 18

==============
==============
./c- -P assignInt.c-
ERROR(9) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(10) : Symbol 'output' is not declared.
ERROR(11) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(11) : Cannot index nonarray 'gy'.
ERROR(12) : Symbol 'output' is not declared.
ERROR(13) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(14) : Symbol 'output' is not declared.
ERROR(15) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(15) : Cannot index nonarray 'y'.
ERROR(16) : Symbol 'output' is not declared.
ERROR(17) : Symbol 'outnl' is not declared.
ERROR(18) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(19) : Symbol 'output' is not declared.
ERROR(20) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(20) : Cannot index nonarray 'py'.
ERROR(21) : Symbol 'output' is not declared.
ERROR(22) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(23) : Symbol 'output' is not declared.
ERROR(24) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(24) : Cannot index nonarray 'sy'.
ERROR(25) : Symbol 'output' is not declared.
ERROR(26) : Symbol 'outnl' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
           esperanza: pÈ 
                  gx:  
                  gy:  
Scope: esperanza       -----------------
                main:  
                  px:  
                  py:  
Scope: main            -----------------
                  zx:  
                  zy:  
===========  ============  ===========
Var: gx of type int [line: 2]
Sibling: 1  Var: gy of array of type int [line: 2]
Sibling: 2  Func: esperanza returns type void [line: 4]
.   Child: 0  Parm: px of type int [line: 4]
.   Sibling: 1  Parm: py of array of type int [line: 4]
.   Child: 1  Compound [line: 5]
.   .   Child: 0  Var: x of type int [line: 6]
.   .   Sibling: 1  Var: y of array of type int [line: 6]
.   .   Sibling: 2  Var: sx of static type int [line: 7]
.   .   Sibling: 3  Var: sy of array of type int [line: 7]
.   .   Child: 1  Assign: <- of type (null) [line: 9]
.   .   .   Child: 0  Id: gx of type int [line: 9]
.   .   .   Child: 1  Const 111 of type int [line: 9]
.   .   Sibling: 1  Call: output of type (null) [line: 10]
.   .   .   Child: 0  Id: gx of type (null) [line: 10]
.   .   Sibling: 2  Assign: <- of type (null) [line: 11]
.   .   .   Child: 0  Op: [ of type (null) [line: 11]
.   .   .   .   Child: 0  Id: gy of type int [line: 11]
.   .   .   .   Child: 1  Const 9 of type int [line: 11]
.   .   .   Child: 1  Const 222 of type int [line: 11]
.   .   Sibling: 3  Call: output of type (null) [line: 12]
.   .   .   Child: 0  Op: [ of type (null) [line: 12]
.   .   .   .   Child: 0  Id: gy of type (null) [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   Sibling: 4  Assign: <- of type (null) [line: 13]
.   .   .   Child: 0  Id: x of type int [line: 13]
.   .   .   Child: 1  Const 333 of type int [line: 13]
.   .   Sibling: 5  Call: output of type (null) [line: 14]
.   .   .   Child: 0  Id: x of type (null) [line: 14]
.   .   Sibling: 6  Assign: <- of type (null) [line: 15]
.   .   .   Child: 0  Op: [ of type (null) [line: 15]
.   .   .   .   Child: 0  Id: y of type int [line: 15]
.   .   .   .   Child: 1  Const 9 of type int [line: 15]
.   .   .   Child: 1  Const 444 of type int [line: 15]
.   .   Sibling: 7  Call: output of type (null) [line: 16]
.   .   .   Child: 0  Op: [ of type (null) [line: 16]
.   .   .   .   Child: 0  Id: y of type (null) [line: 16]
.   .   .   .   Child: 1  Const 9 of type int [line: 16]
.   .   Sibling: 8  Call: outnl of type (null) [line: 17]
.   .   Sibling: 9  Assign: <- of type (null) [line: 18]
.   .   .   Child: 0  Id: px of type int [line: 18]
.   .   .   Child: 1  Const 555 of type int [line: 18]
.   .   Sibling: 10  Call: output of type (null) [line: 19]
.   .   .   Child: 0  Id: px of type (null) [line: 19]
.   .   Sibling: 11  Assign: <- of type (null) [line: 20]
.   .   .   Child: 0  Op: [ of type (null) [line: 20]
.   .   .   .   Child: 0  Id: py of type int [line: 20]
.   .   .   .   Child: 1  Const 9 of type int [line: 20]
.   .   .   Child: 1  Const 666 of type int [line: 20]
.   .   Sibling: 12  Call: output of type (null) [line: 21]
.   .   .   Child: 0  Op: [ of type (null) [line: 21]
.   .   .   .   Child: 0  Id: py of type (null) [line: 21]
.   .   .   .   Child: 1  Const 9 of type int [line: 21]
.   .   Sibling: 13  Assign: <- of type (null) [line: 22]
.   .   .   Child: 0  Id: sx of type int [line: 22]
.   .   .   Child: 1  Const 777 of type int [line: 22]
.   .   Sibling: 14  Call: output of type (null) [line: 23]
.   .   .   Child: 0  Id: sx of type (null) [line: 23]
.   .   Sibling: 15  Assign: <- of type (null) [line: 24]
.   .   .   Child: 0  Op: [ of type (null) [line: 24]
.   .   .   .   Child: 0  Id: sy of type int [line: 24]
.   .   .   .   Child: 1  Const 9 of type int [line: 24]
.   .   .   Child: 1  Const 888 of type int [line: 24]
.   .   Sibling: 16  Call: output of type (null) [line: 25]
.   .   .   Child: 0  Op: [ of type (null) [line: 25]
.   .   .   .   Child: 0  Id: sy of type (null) [line: 25]
.   .   .   .   Child: 1  Const 9 of type int [line: 25]
.   .   Sibling: 17  Call: outnl of type (null) [line: 26]
Sibling: 3  Func: main returns type void [line: 30]
.   Child: 1  Compound [line: 31]
.   .   Child: 0  Var: zx of type int [line: 32]
.   .   Sibling: 1  Var: zy of array of type int [line: 32]
.   .   Child: 1  Call: esperanza of type void [line: 33]
.   .   .   Child: 0  Id: zx of type (null) [line: 33]
.   .   .   Sibling: 1  Id: zy of type (null) [line: 33]
Number of warnings: 0
Number of errors: 18

==============
==============
./c- -P assignb.c-
ERROR(7) : Symbol 'x' is not declared.
ERROR(7) : Symbol 'x' is not declared.
ERROR(8) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(8) : Symbol 'x' is not declared.
ERROR(9) : Cannot index nonarray 'aa'.
ERROR(10) : Cannot index nonarray 'bb'.
ERROR(12) : '!=' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(12) : Cannot index nonarray 'cc'.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   a:  
                  aa:  
                   b:  
                  bb:  
                   c:  
                  cc:  
===========  ============  ===========
ID: x ParentID: <-
we did not find ID
ID: x ParentID: <-
we did not find ID
ID: x ParentID: <-
we did not find ID
ID: x ParentID: <-
we did not find ID
ID: x ParentID: <-
we did not find ID
ID: x ParentID: <-
we did not find ID
Func: main returns type void [line: 1]
.   Child: 1  Compound [line: 2]
.   .   Child: 0  Var: aa of array of type int [line: 3]
.   .   Sibling: 1  Var: a of type int [line: 3]
.   .   Sibling: 2  Var: bb of array of type bool [line: 4]
.   .   Sibling: 3  Var: b of type bool [line: 4]
.   .   Sibling: 4  Var: cc of array of type char [line: 5]
.   .   Sibling: 5  Var: c of type char [line: 5]
.   .   Child: 1  Assign: <- of type (null) [line: 7]
.   .   .   Child: 0  Id: x of type (null) [line: 7]
.   .   .   Child: 1  Id: x of type (null) [line: 7]
.   .   Sibling: 1  Assign: <- of type (null) [line: 8]
.   .   .   Child: 0  Id: x of type (null) [line: 8]
.   .   .   Child: 1  Const 3 of type int [line: 8]
.   .   Sibling: 2  Op: [ of type (null) [line: 9]
.   .   .   Child: 0  Id: aa of type int [line: 9]
.   .   .   Child: 1  Const 2 of type int [line: 9]
.   .   Sibling: 3  Assign: <- of type (null) [line: 10]
.   .   .   Child: 0  Op: [ of type (null) [line: 10]
.   .   .   .   Child: 0  Id: bb of type bool [line: 10]
.   .   .   .   Child: 1  Id: a of type int [line: 10]
.   .   .   Child: 1  Id: b of type bool [line: 10]
.   .   Sibling: 4  Assign: <- of type (null) [line: 12]
.   .   .   Child: 0  Id: b of type bool [line: 12]
.   .   .   Child: 1  Op: != of type (null) [line: 12]
.   .   .   .   Child: 0  Op: [ of type (null) [line: 12]
.   .   .   .   .   Child: 0  Id: cc of type char [line: 12]
.   .   .   .   .   Child: 1  Const 2 of type int [line: 12]
.   .   .   .   Child: 1  Const '4' of type char [line: 12]
Number of warnings: 0
Number of errors: 5

==============
==============
./c- -P break.c-
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
===========  ============  ===========
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 1  While [line: 4]
.   .   .   Child: 0  Const true of type bool [line: 4]
.   .   .   Child: 1  Compound [line: 4]
.   .   .   .   Child: 1  Const 666 of type int [line: 5]
.   .   .   .   Sibling: 1  Break [line: 6]
.   .   .   .   Sibling: 2  Const 777 of type int [line: 7]
.   .   .   .   Sibling: 3  Break [line: 8]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P break2.c-
ERROR(9) : Unary '++' requires an operand of type int but was given type (null).
ERROR(10) : Symbol 'output' is not declared.
ERROR(11) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(12) : Symbol 'outnl' is not declared.
ERROR(14) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(16) : Symbol 'output' is not declared.
ERROR(17) : Symbol 'outnl' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   i:  
===========  ============  ===========
ID: i ParentID: <-
yes, we found ID: i
ID: i ParentID: <-
yes, we found ID: i
ID: i ParentID: <-
yes, we found ID: i
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: i of type int [line: 4]
.   .   Child: 1  Assign: <- of type int [line: 6]
.   .   .   Child: 0  Id: i of type int [line: 6]
.   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   Sibling: 1  While [line: 7]
.   .   .   Child: 0  Const true of type bool [line: 7]
.   .   .   Child: 1  Compound [line: 7]
.   .   .   .   Child: 1  While [line: 8]
.   .   .   .   .   Child: 0  Const true of type bool [line: 8]
.   .   .   .   .   Child: 1  Compound [line: 8]
.   .   .   .   .   .   Child: 1  Assign: ++ of type (null) [line: 9]
.   .   .   .   .   .   .   Child: 0  Id: i of type int [line: 9]
.   .   .   .   .   .   Sibling: 1  Call: output of type (null) [line: 10]
.   .   .   .   .   .   .   Child: 0  Id: i of type (null) [line: 10]
.   .   .   .   .   .   Sibling: 2  If [line: 11]
.   .   .   .   .   .   .   Child: 0  Op: > of type (null) [line: 11]
.   .   .   .   .   .   .   .   Child: 0  Id: i of type int [line: 11]
.   .   .   .   .   .   .   .   Child: 1  Const 4 of type int [line: 11]
.   .   .   .   .   .   .   Child: 1  Break [line: 11]
.   .   .   .   .   .   Sibling: 3  Call: outnl of type (null) [line: 12]
.   .   .   .   Sibling: 1  If [line: 14]
.   .   .   .   .   Child: 0  Op: > of type (null) [line: 14]
.   .   .   .   .   .   Child: 0  Id: i of type int [line: 14]
.   .   .   .   .   .   Child: 1  Const 8 of type int [line: 14]
.   .   .   .   .   Child: 1  Break [line: 14]
.   .   Sibling: 2  Call: output of type (null) [line: 16]
.   .   .   Child: 0  Id: i of type (null) [line: 16]
.   .   Sibling: 3  Call: outnl of type (null) [line: 17]
Number of warnings: 0
Number of errors: 7

==============
==============
./c- -P break3.c-
ERROR(5) : Symbol 'x' is already declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   x:  
===========  ============  ===========
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: >
yes, we found ID: x
ID: x ParentID: >
yes, we found ID: x
ID: x ParentID: >
yes, we found ID: x
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   Child: 1  While [line: 5]
.   .   .   Child: 0  Const true of type bool [line: 5]
.   .   .   Child: 1  For [line: 5]
.   .   .   .   Child: 0  Var: x of type int [line: 5]
.   .   .   .   Child: 1  Range [line: 5]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 5]
.   .   .   .   .   Child: 1  Id: x of type int [line: 5]
.   .   .   .   Child: 2  If [line: 5]
.   .   .   .   .   Child: 0  Op: > of type bool [line: 5]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 5]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 5]
.   .   .   .   .   Child: 1  Break [line: 5]
.   .   .   .   .   Child: 2  Break [line: 5]
Number of warnings: 0
Number of errors: 1

==============
==============
./c- -P break4.c-
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
===========  ============  ===========
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 1  While [line: 4]
.   .   .   Child: 0  Const true of type bool [line: 4]
.   .   .   Child: 1  Compound [line: 4]
.   .   .   .   Child: 1  While [line: 5]
.   .   .   .   .   Child: 0  Const true of type bool [line: 5]
.   .   .   .   .   Child: 1  Compound [line: 5]
.   .   .   .   .   .   Child: 1  Break [line: 6]
.   .   .   .   Sibling: 1  Break [line: 8]
.   .   Sibling: 1  Break [line: 10]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P call.c-
ERROR(4) : Symbol 'output' is not declared.
ERROR(5) : Symbol 'outputb' is not declared.
ERROR(6) : Symbol 'outputc' is not declared.
ERROR(7) : Symbol 'outnl' is not declared.
ERROR(13) : Symbol 'output' is not declared.
ERROR(14) : Symbol 'outputb' is not declared.
ERROR(15) : Symbol 'outputc' is not declared.
ERROR(16) : Symbol 'outnl' is not declared.
ERROR(25) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(25) : Cannot index nonarray 'b'.
ERROR(26) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(26) : Cannot index nonarray 'c'.
ERROR(42) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(42) : Cannot index nonarray 'a'.
ERROR(43) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(43) : Cannot index nonarray 'b'.
ERROR(44) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(44) : Cannot index nonarray 'c'.
ERROR(50) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(50) : Cannot index nonarray 'ga'.
ERROR(51) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(51) : Cannot index nonarray 'gb'.
ERROR(52) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(52) : Cannot index nonarray 'gc'.
ERROR(60) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(60) : Cannot index nonarray 'ga'.
ERROR(61) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(61) : Cannot index nonarray 'gb'.
ERROR(62) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(62) : Cannot index nonarray 'gc'.
===========  Symbol Table  ===========
Scope: Global          -----------------
            cheyenne: °åÜ 
Scope: cheyenne        -----------------
                   a:  
                   b:  
                   c:  
               sioux:  ÷Ü 
Scope: sioux           -----------------
                   a:  
                   b:  
                   c:  
            comanche: ðÝ 
Scope: comanche        -----------------
                  ga:  
                  gb:  
                  gc:  
                main:  
                   z:  
Scope: main            -----------------
                   a:  
                   b:  
                   c:  
===========  ============  ===========
ID: a ParentID: output
yes, we found ID: a
ID: a ParentID: output
yes, we found ID: a
ID: a ParentID: output
yes, we found ID: a
Func: cheyenne returns type void [line: 2]
.   Child: 0  Parm: a of type int [line: 2]
.   Sibling: 1  Parm: b of type bool [line: 2]
.   Sibling: 2  Parm: c of type char [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 1  Call: output of type (null) [line: 4]
.   .   .   Child: 0  Id: a of type int [line: 4]
.   .   Sibling: 1  Call: outputb of type (null) [line: 5]
.   .   .   Child: 0  Id: b of type (null) [line: 5]
.   .   Sibling: 2  Call: outputc of type (null) [line: 6]
.   .   .   Child: 0  Id: c of type (null) [line: 6]
.   .   Sibling: 3  Call: outnl of type (null) [line: 7]
Sibling: 1  Func: sioux returns type void [line: 11]
.   Child: 0  Parm: a of array of type int [line: 11]
.   Sibling: 1  Parm: b of array of type bool [line: 11]
.   Sibling: 2  Parm: c of array of type char [line: 11]
.   Child: 1  Compound [line: 12]
.   .   Child: 1  Call: output of type (null) [line: 13]
.   .   .   Child: 0  Op: [ of type (null) [line: 13]
.   .   .   .   Child: 0  Id: a of type (null) [line: 13]
.   .   .   .   Child: 1  Const 1 of type int [line: 13]
.   .   Sibling: 1  Call: outputb of type (null) [line: 14]
.   .   .   Child: 0  Op: [ of type (null) [line: 14]
.   .   .   .   Child: 0  Id: b of type (null) [line: 14]
.   .   .   .   Child: 1  Const 2 of type int [line: 14]
.   .   Sibling: 2  Call: outputc of type (null) [line: 15]
.   .   .   Child: 0  Op: [ of type (null) [line: 15]
.   .   .   .   Child: 0  Id: c of type (null) [line: 15]
.   .   .   .   Child: 1  Const 3 of type int [line: 15]
.   .   Sibling: 3  Call: outnl of type (null) [line: 16]
Sibling: 2  Func: comanche returns type void [line: 20]
.   Child: 0  Parm: z of array of type int [line: 20]
.   Child: 1  Compound [line: 21]
.   .   Child: 0  Var: b of array of type bool [line: 22]
.   .   Sibling: 1  Var: c of array of type char [line: 23]
.   .   Child: 1  Assign: <- of type (null) [line: 25]
.   .   .   Child: 0  Op: [ of type (null) [line: 25]
.   .   .   .   Child: 0  Id: b of type bool [line: 25]
.   .   .   .   Child: 1  Const 2 of type int [line: 25]
.   .   .   Child: 1  Const true of type bool [line: 25]
.   .   Sibling: 1  Assign: <- of type (null) [line: 26]
.   .   .   Child: 0  Op: [ of type (null) [line: 26]
.   .   .   .   Child: 0  Id: c of type char [line: 26]
.   .   .   .   Child: 1  Const 3 of type int [line: 26]
.   .   .   Child: 1  Const 'z' of type char [line: 26]
.   .   Sibling: 2  Call: sioux of type void [line: 27]
.   .   .   Child: 0  Id: z of type (null) [line: 27]
.   .   .   Sibling: 1  Id: b of type (null) [line: 27]
.   .   .   Sibling: 2  Id: c of type (null) [line: 27]
Sibling: 3  Var: ga of array of type int [line: 32]
Sibling: 4  Var: gb of array of type bool [line: 33]
Sibling: 5  Var: gc of array of type char [line: 34]
Sibling: 6  Func: main returns type void [line: 36]
.   Child: 1  Compound [line: 37]
.   .   Child: 0  Var: a of array of type int [line: 38]
.   .   Sibling: 1  Var: b of array of type bool [line: 39]
.   .   Sibling: 2  Var: c of array of type char [line: 40]
.   .   Child: 1  Assign: <- of type (null) [line: 42]
.   .   .   Child: 0  Op: [ of type (null) [line: 42]
.   .   .   .   Child: 0  Id: a of type int [line: 42]
.   .   .   .   Child: 1  Const 1 of type int [line: 42]
.   .   .   Child: 1  Const 555 of type int [line: 42]
.   .   Sibling: 1  Assign: <- of type (null) [line: 43]
.   .   .   Child: 0  Op: [ of type (null) [line: 43]
.   .   .   .   Child: 0  Id: b of type bool [line: 43]
.   .   .   .   Child: 1  Const 2 of type int [line: 43]
.   .   .   Child: 1  Const true of type bool [line: 43]
.   .   Sibling: 2  Assign: <- of type (null) [line: 44]
.   .   .   Child: 0  Op: [ of type (null) [line: 44]
.   .   .   .   Child: 0  Id: c of type char [line: 44]
.   .   .   .   Child: 1  Const 3 of type int [line: 44]
.   .   .   Child: 1  Const 'z' of type char [line: 44]
.   .   Sibling: 3  Call: cheyenne of type void [line: 45]
.   .   .   Child: 0  Const 666 of type int [line: 45]
.   .   .   Sibling: 1  Const true of type bool [line: 45]
.   .   .   Sibling: 2  Const 'c' of type char [line: 45]
.   .   Sibling: 4  Call: cheyenne of type void [line: 46]
.   .   .   Child: 0  Const 777 of type int [line: 46]
.   .   .   Sibling: 1  Const false of type bool [line: 46]
.   .   .   Sibling: 2  Const 'd' of type char [line: 46]
.   .   Sibling: 5  Call: sioux of type void [line: 47]
.   .   .   Child: 0  Id: a of type (null) [line: 47]
.   .   .   Sibling: 1  Id: b of type (null) [line: 47]
.   .   .   Sibling: 2  Id: c of type (null) [line: 47]
.   .   Sibling: 6  Call: comanche of type void [line: 48]
.   .   .   Child: 0  Id: a of type (null) [line: 48]
.   .   Sibling: 7  Assign: <- of type (null) [line: 50]
.   .   .   Child: 0  Op: [ of type (null) [line: 50]
.   .   .   .   Child: 0  Id: ga of type int [line: 50]
.   .   .   .   Child: 1  Const 1 of type int [line: 50]
.   .   .   Child: 1  Const 888 of type int [line: 50]
.   .   Sibling: 8  Assign: <- of type (null) [line: 51]
.   .   .   Child: 0  Op: [ of type (null) [line: 51]
.   .   .   .   Child: 0  Id: gb of type bool [line: 51]
.   .   .   .   Child: 1  Const 2 of type int [line: 51]
.   .   .   Child: 1  Const false of type bool [line: 51]
.   .   Sibling: 9  Assign: <- of type (null) [line: 52]
.   .   .   Child: 0  Op: [ of type (null) [line: 52]
.   .   .   .   Child: 0  Id: gc of type char [line: 52]
.   .   .   .   Child: 1  Const 3 of type int [line: 52]
.   .   .   Child: 1  Const 'g' of type char [line: 52]
.   .   Sibling: 10  Call: sioux of type void [line: 53]
.   .   .   Child: 0  Id: ga of type (null) [line: 53]
.   .   .   Sibling: 1  Id: gb of type (null) [line: 53]
.   .   .   Sibling: 2  Id: gc of type (null) [line: 53]
.   .   Sibling: 11  Call: comanche of type void [line: 54]
.   .   .   Child: 0  Id: ga of type (null) [line: 54]
.   .   Sibling: 12  Compound [line: 56]
.   .   .   Child: 0  Var: ga of array of type int [line: 57]
.   .   .   Sibling: 1  Var: gb of array of type bool [line: 58]
.   .   .   Sibling: 2  Var: gc of array of type char [line: 59]
.   .   .   Child: 1  Assign: <- of type (null) [line: 60]
.   .   .   .   Child: 0  Op: [ of type (null) [line: 60]
.   .   .   .   .   Child: 0  Id: ga of type int [line: 60]
.   .   .   .   .   Child: 1  Const 1 of type int [line: 60]
.   .   .   .   Child: 1  Const 999 of type int [line: 60]
.   .   .   Sibling: 1  Assign: <- of type (null) [line: 61]
.   .   .   .   Child: 0  Op: [ of type (null) [line: 61]
.   .   .   .   .   Child: 0  Id: gb of type bool [line: 61]
.   .   .   .   .   Child: 1  Const 2 of type int [line: 61]
.   .   .   .   Child: 1  Const true of type bool [line: 61]
.   .   .   Sibling: 2  Assign: <- of type (null) [line: 62]
.   .   .   .   Child: 0  Op: [ of type (null) [line: 62]
.   .   .   .   .   Child: 0  Id: gc of type char [line: 62]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 62]
.   .   .   .   Child: 1  Const 's' of type char [line: 62]
.   .   .   Sibling: 3  Call: sioux of type void [line: 64]
.   .   .   .   Child: 0  Id: ga of type (null) [line: 64]
.   .   .   .   Sibling: 1  Id: gb of type (null) [line: 64]
.   .   .   .   Sibling: 2  Id: gc of type (null) [line: 64]
.   .   .   Sibling: 4  Call: comanche of type void [line: 65]
.   .   .   .   Child: 0  Id: ga of type (null) [line: 65]
Number of warnings: 0
Number of errors: 19

==============
==============
./c- -P call2.c-
ERROR(3) : Symbol 'output' is not declared.
ERROR(4) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(4) : Cannot index nonarray 'z'.
ERROR(5) : Symbol 'outnl' is not declared.
ERROR(10) : Symbol 'output' is not declared.
ERROR(12) : Symbol 'output' is not declared.
ERROR(17) : Symbol 'output' is not declared.
ERROR(19) : Symbol 'output' is not declared.
ERROR(27) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(27) : Cannot index nonarray 'w'.
ERROR(29) : Symbol 'output' is not declared.
ERROR(30) : Symbol 'outnl' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
               three:  
Scope: three           -----------------
                 two: @&É 
                   z:  
Scope: two             -----------------
                 one: `7É 
                   y:  
Scope: one             -----------------
                main:  
                   x:  
Scope: main            -----------------
                   w:  
===========  ============  ===========
ID: z ParentID: [
yes, we found ID: z
ID: z ParentID: [
yes, we found ID: z
ID: z ParentID: [
yes, we found ID: z
Func: three returns type void [line: 2]
.   Child: 0  Parm: z of array of type int [line: 2]
.   Child: 1  Compound [line: 2]
.   .   Child: 1  Call: output of type (null) [line: 3]
.   .   .   Child: 0  Op: [ of type int [line: 3]
.   .   .   .   Child: 0  Id: z of type int [line: 3]
.   .   .   .   Child: 1  Const 7 of type int [line: 3]
.   .   Sibling: 1  Assign: <- of type (null) [line: 4]
.   .   .   Child: 0  Op: [ of type (null) [line: 4]
.   .   .   .   Child: 0  Id: z of type int [line: 4]
.   .   .   .   Child: 1  Const 7 of type int [line: 4]
.   .   .   Child: 1  Const 666 of type int [line: 4]
.   .   Sibling: 2  Call: outnl of type (null) [line: 5]
Sibling: 1  Func: two returns type void [line: 9]
.   Child: 0  Parm: y of array of type int [line: 9]
.   Child: 1  Compound [line: 9]
.   .   Child: 1  Call: output of type (null) [line: 10]
.   .   .   Child: 0  Op: [ of type (null) [line: 10]
.   .   .   .   Child: 0  Id: y of type (null) [line: 10]
.   .   .   .   Child: 1  Const 7 of type int [line: 10]
.   .   Sibling: 1  Call: three of type void [line: 11]
.   .   .   Child: 0  Id: y of type (null) [line: 11]
.   .   Sibling: 2  Call: output of type (null) [line: 12]
.   .   .   Child: 0  Op: [ of type (null) [line: 12]
.   .   .   .   Child: 0  Id: y of type (null) [line: 12]
.   .   .   .   Child: 1  Const 7 of type int [line: 12]
Sibling: 2  Func: one returns type void [line: 16]
.   Child: 0  Parm: x of array of type int [line: 16]
.   Child: 1  Compound [line: 16]
.   .   Child: 1  Call: output of type (null) [line: 17]
.   .   .   Child: 0  Op: [ of type (null) [line: 17]
.   .   .   .   Child: 0  Id: x of type (null) [line: 17]
.   .   .   .   Child: 1  Const 7 of type int [line: 17]
.   .   Sibling: 1  Call: two of type void [line: 18]
.   .   .   Child: 0  Id: x of type (null) [line: 18]
.   .   Sibling: 2  Call: output of type (null) [line: 19]
.   .   .   Child: 0  Op: [ of type (null) [line: 19]
.   .   .   .   Child: 0  Id: x of type (null) [line: 19]
.   .   .   .   Child: 1  Const 7 of type int [line: 19]
Sibling: 3  Func: main returns type void [line: 23]
.   Child: 1  Compound [line: 24]
.   .   Child: 0  Var: w of array of type int [line: 25]
.   .   Child: 1  Assign: <- of type (null) [line: 27]
.   .   .   Child: 0  Op: [ of type (null) [line: 27]
.   .   .   .   Child: 0  Id: w of type int [line: 27]
.   .   .   .   Child: 1  Const 7 of type int [line: 27]
.   .   .   Child: 1  Const 42 of type int [line: 27]
.   .   Sibling: 1  Call: one of type void [line: 28]
.   .   .   Child: 0  Id: w of type (null) [line: 28]
.   .   Sibling: 2  Call: output of type (null) [line: 29]
.   .   .   Child: 0  Op: [ of type (null) [line: 29]
.   .   .   .   Child: 0  Id: w of type (null) [line: 29]
.   .   .   .   Child: 1  Const 7 of type int [line: 29]
.   .   Sibling: 3  Call: outnl of type (null) [line: 30]
Number of warnings: 0
Number of errors: 10

==============
==============
./c- -P call3.c-
ERROR(3) : Symbol 'output' is not declared.
ERROR(4) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(4) : Cannot index nonarray 'z'.
ERROR(5) : Symbol 'outnl' is not declared.
ERROR(7) : Cannot index nonarray 'z'.
ERROR(12) : Symbol 'output' is not declared.
ERROR(14) : Symbol 'output' is not declared.
ERROR(16) : Cannot index nonarray 'y'.
ERROR(21) : Symbol 'output' is not declared.
ERROR(23) : Symbol 'output' is not declared.
ERROR(25) : Cannot index nonarray 'x'.
ERROR(33) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(33) : Cannot index nonarray 'w'.
ERROR(34) : Symbol 'output' is not declared.
ERROR(35) : Symbol 'output' is not declared.
ERROR(36) : Symbol 'outnl' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
               three: PV 
Scope: three           -----------------
                 two:  k 
                   z:  
Scope: two             -----------------
                 one: Ð 
                   y:  
Scope: one             -----------------
                main:  
                   x:  
Scope: main            -----------------
                   w:  
===========  ============  ===========
ID: z ParentID: [
yes, we found ID: z
ID: z ParentID: [
yes, we found ID: z
ID: z ParentID: [
yes, we found ID: z
Func: three returns type int [line: 2]
.   Child: 0  Parm: z of array of type int [line: 2]
.   Child: 1  Compound [line: 2]
.   .   Child: 1  Call: output of type (null) [line: 3]
.   .   .   Child: 0  Op: [ of type int [line: 3]
.   .   .   .   Child: 0  Id: z of type int [line: 3]
.   .   .   .   Child: 1  Const 7 of type int [line: 3]
.   .   Sibling: 1  Assign: <- of type (null) [line: 4]
.   .   .   Child: 0  Op: [ of type (null) [line: 4]
.   .   .   .   Child: 0  Id: z of type int [line: 4]
.   .   .   .   Child: 1  Const 7 of type int [line: 4]
.   .   .   Child: 1  Const 666 of type int [line: 4]
.   .   Sibling: 2  Call: outnl of type (null) [line: 5]
.   .   Sibling: 3  Return [line: 7]
.   .   .   Child: 0  Op: [ of type (null) [line: 7]
.   .   .   .   Child: 0  Id: z of type int [line: 7]
.   .   .   .   Child: 1  Const 7 of type int [line: 7]
Sibling: 1  Func: two returns type int [line: 11]
.   Child: 0  Parm: y of array of type int [line: 11]
.   Child: 1  Compound [line: 11]
.   .   Child: 1  Call: output of type (null) [line: 12]
.   .   .   Child: 0  Op: [ of type (null) [line: 12]
.   .   .   .   Child: 0  Id: y of type (null) [line: 12]
.   .   .   .   Child: 1  Const 7 of type int [line: 12]
.   .   Sibling: 1  Call: three of type int [line: 13]
.   .   .   Child: 0  Id: y of type (null) [line: 13]
.   .   Sibling: 2  Call: output of type (null) [line: 14]
.   .   .   Child: 0  Op: [ of type (null) [line: 14]
.   .   .   .   Child: 0  Id: y of type (null) [line: 14]
.   .   .   .   Child: 1  Const 7 of type int [line: 14]
.   .   Sibling: 3  Return [line: 16]
.   .   .   Child: 0  Op: [ of type (null) [line: 16]
.   .   .   .   Child: 0  Id: y of type int [line: 16]
.   .   .   .   Child: 1  Const 7 of type int [line: 16]
Sibling: 2  Func: one returns type int [line: 20]
.   Child: 0  Parm: x of array of type int [line: 20]
.   Child: 1  Compound [line: 20]
.   .   Child: 1  Call: output of type (null) [line: 21]
.   .   .   Child: 0  Op: [ of type (null) [line: 21]
.   .   .   .   Child: 0  Id: x of type (null) [line: 21]
.   .   .   .   Child: 1  Const 7 of type int [line: 21]
.   .   Sibling: 1  Call: two of type int [line: 22]
.   .   .   Child: 0  Id: x of type (null) [line: 22]
.   .   Sibling: 2  Call: output of type (null) [line: 23]
.   .   .   Child: 0  Op: [ of type (null) [line: 23]
.   .   .   .   Child: 0  Id: x of type (null) [line: 23]
.   .   .   .   Child: 1  Const 7 of type int [line: 23]
.   .   Sibling: 3  Return [line: 25]
.   .   .   Child: 0  Op: [ of type (null) [line: 25]
.   .   .   .   Child: 0  Id: x of type int [line: 25]
.   .   .   .   Child: 1  Const 7 of type int [line: 25]
Sibling: 3  Func: main returns type void [line: 29]
.   Child: 1  Compound [line: 30]
.   .   Child: 0  Var: w of array of type int [line: 31]
.   .   Child: 1  Assign: <- of type (null) [line: 33]
.   .   .   Child: 0  Op: [ of type (null) [line: 33]
.   .   .   .   Child: 0  Id: w of type int [line: 33]
.   .   .   .   Child: 1  Const 7 of type int [line: 33]
.   .   .   Child: 1  Const 42 of type int [line: 33]
.   .   Sibling: 1  Call: output of type (null) [line: 34]
.   .   .   Child: 0  Call: one of type (null) [line: 34]
.   .   .   .   Child: 0  Id: w of type (null) [line: 34]
.   .   Sibling: 2  Call: output of type (null) [line: 35]
.   .   .   Child: 0  Op: [ of type (null) [line: 35]
.   .   .   .   Child: 0  Id: w of type (null) [line: 35]
.   .   .   .   Child: 1  Const 7 of type int [line: 35]
.   .   Sibling: 3  Call: outnl of type (null) [line: 36]
Number of warnings: 0
Number of errors: 11

==============
==============
./c- -P callerr.c-
ERROR(16) : Symbol 'lyra' is not declared.
ERROR(22) : Symbol 'lyra' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
                dory:  
Scope: dory            -----------------
                ella: Àª, 
Scope: ella            -----------------
                fred:  
                   x:  
Scope: fred            -----------------
                   x:  
===========  ============  ===========
Func: dory returns type int [line: 1]
.   Child: 1  Compound [line: 2]
.   .   Child: 1  Return [line: 3]
.   .   .   Child: 0  Const 6 of type int [line: 3]
Sibling: 1  Func: ella returns type void [line: 6]
.   Child: 0  Parm: x of type int [line: 6]
.   Child: 1  Compound [line: 7]
.   .   Child: 1  Return [line: 8]
.   .   .   Child: 0  Id: x of type int [line: 8]
Sibling: 2  Func: fred returns type void [line: 11]
.   Child: 1  Compound [line: 12]
.   .   Child: 0  Var: x of type int [line: 13]
.   .   Child: 1  Call: fred of type void [line: 15]
.   .   Sibling: 1  Call: lyra of type (null) [line: 16]
.   .   .   Child: 0  Call: ella of type (null) [line: 16]
.   .   .   .   Child: 0  Const 3 of type int [line: 16]
.   .   Sibling: 2  Call: ella of type void [line: 18]
.   .   .   Child: 0  Call: ella of type (null) [line: 18]
.   .   .   .   Child: 0  Const 9 of type int [line: 18]
.   .   Sibling: 3  Call: ella of type void [line: 19]
.   .   .   Child: 0  Call: dory of type (null) [line: 19]
.   .   Sibling: 4  Call: dory of type int [line: 20]
.   .   .   Child: 0  Call: ella of type (null) [line: 20]
.   .   .   .   Child: 0  Const 7 of type int [line: 20]
.   .   Sibling: 5  Call: dory of type int [line: 21]
.   .   .   Child: 0  Call: dory of type (null) [line: 21]
.   .   Sibling: 6  Call: lyra of type (null) [line: 22]
.   .   .   Child: 0  Call: dory of type (null) [line: 22]
.   .   Sibling: 7  Call: dory of type int [line: 23]
.   .   .   Child: 0  Call: lyra of type (null) [line: 23]
.   .   Sibling: 8  Assign: <- of type (null) [line: 26]
.   .   .   Child: 0  Id: x of type int [line: 26]
.   .   .   Child: 1  Call: dory of type int [line: 26]
.   .   Sibling: 9  Assign: <- of type (null) [line: 27]
.   .   .   Child: 0  Id: x of type int [line: 27]
.   .   .   Child: 1  Call: ella of type void [line: 27]
.   .   .   .   Child: 0  Const 8 of type int [line: 27]
Number of warnings: 0
Number of errors: 2

==============
==============
./c- -P constants.c-
ERROR(4) : Symbol 'output' is not declared.
ERROR(5) : Symbol 'outputb' is not declared.
ERROR(6) : Symbol 'outputb' is not declared.
ERROR(7) : Symbol 'outputc' is not declared.
ERROR(8) : Symbol 'outnl' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
===========  ============  ===========
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 1  Call: output of type (null) [line: 4]
.   .   .   Child: 0  Const 111 of type int [line: 4]
.   .   Sibling: 1  Call: outputb of type (null) [line: 5]
.   .   .   Child: 0  Const true of type bool [line: 5]
.   .   Sibling: 2  Call: outputb of type (null) [line: 6]
.   .   .   Child: 0  Const false of type bool [line: 6]
.   .   Sibling: 3  Call: outputc of type (null) [line: 7]
.   .   .   Child: 0  Const 'x' of type char [line: 7]
.   .   Sibling: 4  Call: outnl of type (null) [line: 8]
Number of warnings: 0
Number of errors: 5

==============
==============
./c- -P cover.c-

==============
==============
./c- -P decl.c-
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   a:  
                   b:  
                   c:  
===========  ============  ===========
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: a of type int [line: 4]
.   .   Sibling: 1  Var: b of type bool [line: 5]
.   .   Sibling: 2  Var: c of type char [line: 6]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P emptyline.c-
ERROR(12) : Symbol 'x' is already declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                dogs:  
Scope: dogs            -----------------
                   x:  
===========  ============  ===========
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 2]
Sibling: 1  Func: dogs returns type void [line: 4]
.   Child: 1  Compound [line: 5]
.   .   Child: 0  Var: x of type int [line: 6]
.   .   Child: 1  If [line: 9]
.   .   .   Child: 0  Const true of type bool [line: 9]
.   .   Sibling: 1  While [line: 11]
.   .   .   Child: 0  Const true of type bool [line: 11]
.   .   Sibling: 2  For [line: 12]
.   .   .   Child: 0  Var: x of type int [line: 12]
.   .   .   Child: 1  Range [line: 12]
.   .   .   .   Child: 0  Const 1 of type int [line: 12]
.   .   .   .   Child: 1  Const 10 of type int [line: 12]
.   .   Sibling: 3  Compound [line: 13]
Number of warnings: 0
Number of errors: 1

==============
==============
./c- -P everythingS22.c-
ERROR(135): syntax error, unexpected CHARCONST, expecting SEMI or COMMA
WARNING(135): character is 11 characters long and not a single character: '';
char cat:''. The first char will be used.
Errors found when tokenizing
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P exp.c-
ERROR(8) : Symbol 'output' is not declared.
ERROR(9) : Symbol 'output' is not declared.
ERROR(10) : Symbol 'output' is not declared.
ERROR(11) : Symbol 'outnl' is not declared.
ERROR(12) : Symbol 'output' is not declared.
ERROR(13) : Symbol 'output' is not declared.
ERROR(14) : Symbol 'outnl' is not declared.
ERROR(15) : Symbol 'output' is not declared.
ERROR(16) : Symbol 'output' is not declared.
ERROR(17) : Symbol 'outnl' is not declared.
ERROR(18) : Symbol 'output' is not declared.
ERROR(19) : Symbol 'output' is not declared.
ERROR(20) : Symbol 'output' is not declared.
ERROR(21) : Symbol 'outnl' is not declared.
ERROR(22) : Symbol 'outputb' is not declared.
ERROR(23) : Symbol 'outputb' is not declared.
ERROR(24) : Symbol 'outnl' is not declared.
ERROR(25) : Symbol 'outputb' is not declared.
ERROR(26) : Symbol 'outputb' is not declared.
ERROR(27) : Symbol 'outnl' is not declared.
ERROR(28) : Symbol 'outputb' is not declared.
ERROR(29) : Symbol 'outputb' is not declared.
ERROR(30) : Symbol 'outnl' is not declared.
ERROR(31) : Symbol 'outputb' is not declared.
ERROR(32) : Symbol 'outnl' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
               ident:  
Scope: ident           -----------------
                main:  
                   x:  
Scope: main            -----------------
                   x:  
===========  ============  ===========
ID: x ParentID: return
yes, we found ID: x
ID: x ParentID: return
yes, we found ID: x
ID: x ParentID: return
yes, we found ID: x
Func: ident returns type int [line: 2]
.   Child: 0  Parm: x of type int [line: 2]
.   Child: 1  Compound [line: 2]
.   .   Child: 1  Return [line: 2]
.   .   .   Child: 0  Id: x of type int [line: 2]
Sibling: 1  Func: main returns type void [line: 4]
.   Child: 1  Compound [line: 5]
.   .   Child: 0  Var: x of type bool [line: 6]
.   .   Child: 1  Call: output of type (null) [line: 8]
.   .   .   Child: 0  Call: ident of type (null) [line: 8]
.   .   .   .   Child: 0  Const 111 of type int [line: 8]
.   .   Sibling: 1  Call: output of type (null) [line: 9]
.   .   .   Child: 0  Op: * of type (null) [line: 9]
.   .   .   .   Child: 0  Call: ident of type (null) [line: 9]
.   .   .   .   .   Child: 0  Const 111 of type int [line: 9]
.   .   .   .   Child: 1  Const 222 of type int [line: 9]
.   .   Sibling: 2  Call: output of type (null) [line: 10]
.   .   .   Child: 0  Op: * of type (null) [line: 10]
.   .   .   .   Child: 0  Const 222 of type int [line: 10]
.   .   .   .   Child: 1  Call: ident of type (null) [line: 10]
.   .   .   .   .   Child: 0  Const 111 of type int [line: 10]
.   .   Sibling: 3  Call: outnl of type (null) [line: 11]
.   .   Sibling: 4  Call: output of type (null) [line: 12]
.   .   .   Child: 0  Op: + of type (null) [line: 12]
.   .   .   .   Child: 0  Op: * of type (null) [line: 12]
.   .   .   .   .   Child: 0  Call: ident of type (null) [line: 12]
.   .   .   .   .   .   Child: 0  Const 111 of type int [line: 12]
.   .   .   .   .   Child: 1  Const 222 of type int [line: 12]
.   .   .   .   Child: 1  Const 333 of type int [line: 12]
.   .   Sibling: 5  Call: output of type (null) [line: 13]
.   .   .   Child: 0  Op: * of type (null) [line: 13]
.   .   .   .   Child: 0  Op: + of type (null) [line: 13]
.   .   .   .   .   Child: 0  Call: ident of type (null) [line: 13]
.   .   .   .   .   .   Child: 0  Const 111 of type int [line: 13]
.   .   .   .   .   Child: 1  Const 222 of type int [line: 13]
.   .   .   .   Child: 1  Const 333 of type int [line: 13]
.   .   Sibling: 6  Call: outnl of type (null) [line: 14]
.   .   Sibling: 7  Call: output of type (null) [line: 15]
.   .   .   Child: 0  Op: chsign of type (null) [line: 15]
.   .   .   .   Child: 0  Op: + of type (null) [line: 15]
.   .   .   .   .   Child: 0  Call: ident of type (null) [line: 15]
.   .   .   .   .   .   Child: 0  Const 111 of type int [line: 15]
.   .   .   .   .   Child: 1  Const 222 of type int [line: 15]
.   .   Sibling: 8  Call: output of type (null) [line: 16]
.   .   .   Child: 0  Op: chsign of type (null) [line: 16]
.   .   .   .   Child: 0  Op: chsign of type (null) [line: 16]
.   .   .   .   .   Child: 0  Op: + of type (null) [line: 16]
.   .   .   .   .   .   Child: 0  Call: ident of type (null) [line: 16]
.   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 16]
.   .   .   .   .   .   Child: 1  Const 222 of type int [line: 16]
.   .   Sibling: 9  Call: outnl of type (null) [line: 17]
.   .   Sibling: 10  Call: output of type (null) [line: 18]
.   .   .   Child: 0  Op: * of type (null) [line: 18]
.   .   .   .   Child: 0  Op: chsign of type (null) [line: 18]
.   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 18]
.   .   .   .   .   .   Child: 0  Op: + of type (null) [line: 18]
.   .   .   .   .   .   .   Child: 0  Call: ident of type (null) [line: 18]
.   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 18]
.   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 18]
.   .   .   .   Child: 1  Const 333 of type int [line: 18]
.   .   Sibling: 11  Call: output of type (null) [line: 19]
.   .   .   Child: 0  Op: / of type (null) [line: 19]
.   .   .   .   Child: 0  Op: * of type (null) [line: 19]
.   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 19]
.   .   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 19]
.   .   .   .   .   .   .   Child: 0  Op: + of type (null) [line: 19]
.   .   .   .   .   .   .   .   Child: 0  Call: ident of type (null) [line: 19]
.   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 19]
.   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 19]
.   .   .   .   .   Child: 1  Const 333 of type int [line: 19]
.   .   .   .   Child: 1  Const 444 of type int [line: 19]
.   .   Sibling: 12  Call: output of type (null) [line: 20]
.   .   .   Child: 0  Op: % of type (null) [line: 20]
.   .   .   .   Child: 0  Op: / of type (null) [line: 20]
.   .   .   .   .   Child: 0  Op: * of type (null) [line: 20]
.   .   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 20]
.   .   .   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 20]
.   .   .   .   .   .   .   .   Child: 0  Op: + of type (null) [line: 20]
.   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type (null) [line: 20]
.   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 20]
.   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 20]
.   .   .   .   .   .   Child: 1  Const 333 of type int [line: 20]
.   .   .   .   .   Child: 1  Const 444 of type int [line: 20]
.   .   .   .   Child: 1  Const 42 of type int [line: 20]
.   .   Sibling: 13  Call: outnl of type (null) [line: 21]
.   .   Sibling: 14  Call: outputb of type (null) [line: 22]
.   .   .   Child: 0  Op: <= of type (null) [line: 22]
.   .   .   .   Child: 0  Op: + of type (null) [line: 22]
.   .   .   .   .   Child: 0  Op: % of type (null) [line: 22]
.   .   .   .   .   .   Child: 0  Op: / of type (null) [line: 22]
.   .   .   .   .   .   .   Child: 0  Op: * of type (null) [line: 22]
.   .   .   .   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 22]
.   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 22]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type (null) [line: 22]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type (null) [line: 22]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 22]
.   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 22]
.   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 22]
.   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 22]
.   .   .   .   .   .   Child: 1  Const 42 of type int [line: 22]
.   .   .   .   .   Child: 1  Const 555 of type int [line: 22]
.   .   .   .   Child: 1  Const 666 of type int [line: 22]
.   .   Sibling: 15  Call: outputb of type (null) [line: 23]
.   .   .   Child: 0  Op: >= of type (null) [line: 23]
.   .   .   .   Child: 0  Op: + of type (null) [line: 23]
.   .   .   .   .   Child: 0  Op: % of type (null) [line: 23]
.   .   .   .   .   .   Child: 0  Op: / of type (null) [line: 23]
.   .   .   .   .   .   .   Child: 0  Op: * of type (null) [line: 23]
.   .   .   .   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 23]
.   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 23]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type (null) [line: 23]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type (null) [line: 23]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 23]
.   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 23]
.   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 23]
.   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 23]
.   .   .   .   .   .   Child: 1  Const 42 of type int [line: 23]
.   .   .   .   .   Child: 1  Const 555 of type int [line: 23]
.   .   .   .   Child: 1  Const 666 of type int [line: 23]
.   .   Sibling: 16  Call: outnl of type (null) [line: 24]
.   .   Sibling: 17  Call: outputb of type (null) [line: 25]
.   .   .   Child: 0  Op: not of type (null) [line: 25]
.   .   .   .   Child: 0  Op: <= of type (null) [line: 25]
.   .   .   .   .   Child: 0  Op: + of type (null) [line: 25]
.   .   .   .   .   .   Child: 0  Op: % of type (null) [line: 25]
.   .   .   .   .   .   .   Child: 0  Op: / of type (null) [line: 25]
.   .   .   .   .   .   .   .   Child: 0  Op: * of type (null) [line: 25]
.   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 25]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 25]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type (null) [line: 25]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type (null) [line: 25]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 25]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 25]
.   .   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 25]
.   .   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 25]
.   .   .   .   .   .   .   Child: 1  Const 42 of type int [line: 25]
.   .   .   .   .   .   Child: 1  Const 555 of type int [line: 25]
.   .   .   .   .   Child: 1  Const 666 of type int [line: 25]
.   .   Sibling: 18  Call: outputb of type (null) [line: 26]
.   .   .   Child: 0  Op: not of type (null) [line: 26]
.   .   .   .   Child: 0  Op: not of type (null) [line: 26]
.   .   .   .   .   Child: 0  Op: <= of type (null) [line: 26]
.   .   .   .   .   .   Child: 0  Op: + of type (null) [line: 26]
.   .   .   .   .   .   .   Child: 0  Op: % of type (null) [line: 26]
.   .   .   .   .   .   .   .   Child: 0  Op: / of type (null) [line: 26]
.   .   .   .   .   .   .   .   .   Child: 0  Op: * of type (null) [line: 26]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 26]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 26]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type (null) [line: 26]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type (null) [line: 26]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 26]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 26]
.   .   .   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 26]
.   .   .   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 26]
.   .   .   .   .   .   .   .   Child: 1  Const 42 of type int [line: 26]
.   .   .   .   .   .   .   Child: 1  Const 555 of type int [line: 26]
.   .   .   .   .   .   Child: 1  Const 666 of type int [line: 26]
.   .   Sibling: 19  Call: outnl of type (null) [line: 27]
.   .   Sibling: 20  Call: outputb of type (null) [line: 28]
.   .   .   Child: 0  Op: and of type (null) [line: 28]
.   .   .   .   Child: 0  Op: not of type (null) [line: 28]
.   .   .   .   .   Child: 0  Op: not of type (null) [line: 28]
.   .   .   .   .   .   Child: 0  Op: <= of type (null) [line: 28]
.   .   .   .   .   .   .   Child: 0  Op: + of type (null) [line: 28]
.   .   .   .   .   .   .   .   Child: 0  Op: % of type (null) [line: 28]
.   .   .   .   .   .   .   .   .   Child: 0  Op: / of type (null) [line: 28]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: * of type (null) [line: 28]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 28]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 28]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type (null) [line: 28]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type (null) [line: 28]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 28]
.   .   .   .   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 28]
.   .   .   .   .   .   .   .   .   Child: 1  Const 42 of type int [line: 28]
.   .   .   .   .   .   .   .   Child: 1  Const 555 of type int [line: 28]
.   .   .   .   .   .   .   Child: 1  Const 666 of type int [line: 28]
.   .   .   .   Child: 1  Op: < of type (null) [line: 28]
.   .   .   .   .   Child: 0  Const 777 of type int [line: 28]
.   .   .   .   .   Child: 1  Const 888 of type int [line: 28]
.   .   Sibling: 21  Call: outputb of type (null) [line: 29]
.   .   .   Child: 0  Op: or of type (null) [line: 29]
.   .   .   .   Child: 0  Op: and of type (null) [line: 29]
.   .   .   .   .   Child: 0  Op: not of type (null) [line: 29]
.   .   .   .   .   .   Child: 0  Op: not of type (null) [line: 29]
.   .   .   .   .   .   .   Child: 0  Op: <= of type (null) [line: 29]
.   .   .   .   .   .   .   .   Child: 0  Op: + of type (null) [line: 29]
.   .   .   .   .   .   .   .   .   Child: 0  Op: % of type (null) [line: 29]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: / of type (null) [line: 29]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: * of type (null) [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type (null) [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type (null) [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 29]
.   .   .   .   .   .   .   .   .   .   Child: 1  Const 42 of type int [line: 29]
.   .   .   .   .   .   .   .   .   Child: 1  Const 555 of type int [line: 29]
.   .   .   .   .   .   .   .   Child: 1  Const 666 of type int [line: 29]
.   .   .   .   .   Child: 1  Op: < of type (null) [line: 29]
.   .   .   .   .   .   Child: 0  Const 777 of type int [line: 29]
.   .   .   .   .   .   Child: 1  Const 888 of type int [line: 29]
.   .   .   .   Child: 1  Op: != of type (null) [line: 29]
.   .   .   .   .   Child: 0  Const 999 of type int [line: 29]
.   .   .   .   .   Child: 1  Const 1000 of type int [line: 29]
.   .   Sibling: 22  Call: outnl of type (null) [line: 30]
.   .   Sibling: 23  Call: outputb of type (null) [line: 31]
.   .   .   Child: 0  Assign: <- of type (null) [line: 31]
.   .   .   .   Child: 0  Id: x of type (null) [line: 31]
.   .   .   .   Child: 1  Op: or of type (null) [line: 31]
.   .   .   .   .   Child: 0  Op: and of type (null) [line: 31]
.   .   .   .   .   .   Child: 0  Op: not of type (null) [line: 31]
.   .   .   .   .   .   .   Child: 0  Op: not of type (null) [line: 31]
.   .   .   .   .   .   .   .   Child: 0  Op: <= of type (null) [line: 31]
.   .   .   .   .   .   .   .   .   Child: 0  Op: + of type (null) [line: 31]
.   .   .   .   .   .   .   .   .   .   Child: 0  Op: % of type (null) [line: 31]
.   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: / of type (null) [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: * of type (null) [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: chsign of type (null) [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Op: + of type (null) [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Call: ident of type (null) [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 0  Const 111 of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 222 of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 333 of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 444 of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   .   Child: 1  Const 42 of type int [line: 31]
.   .   .   .   .   .   .   .   .   .   Child: 1  Const 555 of type int [line: 31]
.   .   .   .   .   .   .   .   .   Child: 1  Const 666 of type int [line: 31]
.   .   .   .   .   .   Child: 1  Op: < of type (null) [line: 31]
.   .   .   .   .   .   .   Child: 0  Const 777 of type int [line: 31]
.   .   .   .   .   .   .   Child: 1  Const 888 of type int [line: 31]
.   .   .   .   .   Child: 1  Op: != of type (null) [line: 31]
.   .   .   .   .   .   Child: 0  Const 999 of type int [line: 31]
.   .   .   .   .   .   Child: 1  Const 1000 of type int [line: 31]
.   .   Sibling: 24  Call: outnl of type (null) [line: 32]
Number of warnings: 0
Number of errors: 25

==============
==============
./c- -P expL.c-
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   x:  
===========  ============  ===========
ID: x ParentID: +
yes, we found ID: x
ID: x ParentID: +
yes, we found ID: x
ID: x ParentID: +
yes, we found ID: x
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   Child: 1  Op: > of type bool [line: 6]
.   .   .   Child: 0  Op: + of type int [line: 6]
.   .   .   .   Child: 0  Op: * of type int [line: 6]
.   .   .   .   .   Child: 0  Const 555 of type int [line: 6]
.   .   .   .   .   Child: 1  Const 666 of type int [line: 6]
.   .   .   .   Child: 1  Id: x of type int [line: 6]
.   .   .   Child: 1  Const 777 of type int [line: 6]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P expR.c-
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   x:  
===========  ============  ===========
ID: x ParentID: *
yes, we found ID: x
ID: x ParentID: *
yes, we found ID: x
ID: x ParentID: *
yes, we found ID: x
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   Child: 1  Op: > of type bool [line: 6]
.   .   .   Child: 0  Const 555 of type int [line: 6]
.   .   .   Child: 1  Op: + of type int [line: 6]
.   .   .   .   Child: 0  Const 666 of type int [line: 6]
.   .   .   .   Child: 1  Op: * of type int [line: 6]
.   .   .   .   .   Child: 0  Id: x of type int [line: 6]
.   .   .   .   .   Child: 1  Const 777 of type int [line: 6]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P for.c-
ERROR(8) : '<-' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(9) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(9) : Cannot index nonarray 'aa'.
ERROR(10) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(10) : Cannot index nonarray 'aa'.
ERROR(12) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(12) : Cannot index nonarray 'bb'.
ERROR(12) : Symbol 'bb' is not declared.
ERROR(13) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(13) : Cannot index nonarray 'bb'.
ERROR(13) : Symbol 'bb' is not declared.
ERROR(14) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(14) : Cannot index nonarray 'bb'.
ERROR(14) : Symbol 'bb' is not declared.
ERROR(16) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(16) : Cannot index nonarray 'cc'.
ERROR(16) : Symbol 'cc' is not declared.
ERROR(17) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(17) : Cannot index nonarray 'cc'.
ERROR(17) : Symbol 'cc' is not declared.
ERROR(18) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.
ERROR(18) : Cannot index nonarray 'ca'.
ERROR(20) : Symbol 'output' is not declared.
ERROR(21) : Symbol 'outnl' is not declared.
ERROR(23) : Symbol 'i' is already declared.
ERROR(23) : Symbol 'outputb' is not declared.
ERROR(24) : Symbol 'outnl' is not declared.
ERROR(26) : Symbol 'i' is already declared.
ERROR(26) : Symbol 'outputc' is not declared.
ERROR(27) : Symbol 'outnl' is not declared.
ERROR(29) : Symbol 'i' is already declared.
ERROR(29) : Symbol 'output' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                  aa:  
                  ba:  
                  ca:  
                   i:  
                   j:  
===========  ============  ===========
ID: aa ParentID: [
yes, we found ID: aa
ID: aa ParentID: [
yes, we found ID: aa
ID: aa ParentID: [
yes, we found ID: aa
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: aa of array of type int [line: 4]
.   .   Sibling: 1  Var: ba of array of type bool [line: 5]
.   .   Sibling: 2  Var: ca of array of type char [line: 6]
.   .   Child: 1  Assign: <- of type int [line: 8]
.   .   .   Child: 0  Op: [ of type int [line: 8]
.   .   .   .   Child: 0  Id: aa of type int [line: 8]
.   .   .   .   Child: 1  Const 0 of type int [line: 8]
.   .   .   Child: 1  Const 100 of type int [line: 8]
.   .   Sibling: 1  Assign: <- of type (null) [line: 9]
.   .   .   Child: 0  Op: [ of type (null) [line: 9]
.   .   .   .   Child: 0  Id: aa of type int [line: 9]
.   .   .   .   Child: 1  Const 1 of type int [line: 9]
.   .   .   Child: 1  Const 101 of type int [line: 9]
.   .   Sibling: 2  Assign: <- of type (null) [line: 10]
.   .   .   Child: 0  Op: [ of type (null) [line: 10]
.   .   .   .   Child: 0  Id: aa of type int [line: 10]
.   .   .   .   Child: 1  Const 2 of type int [line: 10]
.   .   .   Child: 1  Const 102 of type int [line: 10]
.   .   Sibling: 3  Assign: <- of type (null) [line: 12]
.   .   .   Child: 0  Op: [ of type (null) [line: 12]
.   .   .   .   Child: 0  Id: bb of type (null) [line: 12]
.   .   .   .   Child: 1  Const 0 of type int [line: 12]
.   .   .   Child: 1  Const true of type bool [line: 12]
.   .   Sibling: 4  Assign: <- of type (null) [line: 13]
.   .   .   Child: 0  Op: [ of type (null) [line: 13]
.   .   .   .   Child: 0  Id: bb of type (null) [line: 13]
.   .   .   .   Child: 1  Const 1 of type int [line: 13]
.   .   .   Child: 1  Const false of type bool [line: 13]
.   .   Sibling: 5  Assign: <- of type (null) [line: 14]
.   .   .   Child: 0  Op: [ of type (null) [line: 14]
.   .   .   .   Child: 0  Id: bb of type (null) [line: 14]
.   .   .   .   Child: 1  Const 2 of type int [line: 14]
.   .   .   Child: 1  Const true of type bool [line: 14]
.   .   Sibling: 6  Assign: <- of type (null) [line: 16]
.   .   .   Child: 0  Op: [ of type (null) [line: 16]
.   .   .   .   Child: 0  Id: cc of type (null) [line: 16]
.   .   .   .   Child: 1  Const 0 of type int [line: 16]
.   .   .   Child: 1  Const 'a' of type char [line: 16]
.   .   Sibling: 7  Assign: <- of type (null) [line: 17]
.   .   .   Child: 0  Op: [ of type (null) [line: 17]
.   .   .   .   Child: 0  Id: cc of type (null) [line: 17]
.   .   .   .   Child: 1  Const 1 of type int [line: 17]
.   .   .   Child: 1  Const 'b' of type char [line: 17]
.   .   Sibling: 8  Assign: <- of type (null) [line: 18]
.   .   .   Child: 0  Op: [ of type (null) [line: 18]
.   .   .   .   Child: 0  Id: ca of type char [line: 18]
.   .   .   .   Child: 1  Const 2 of type int [line: 18]
.   .   .   Child: 1  Const 'c' of type char [line: 18]
.   .   Sibling: 9  For [line: 20]
.   .   .   Child: 0  Var: i of type int [line: 20]
.   .   .   Child: 1  Range [line: 20]
.   .   .   .   Child: 0  Const 0 of type int [line: 20]
.   .   .   .   Child: 1  Const 2 of type int [line: 20]
.   .   .   Child: 2  Call: output of type (null) [line: 20]
.   .   .   .   Child: 0  Op: [ of type (null) [line: 20]
.   .   .   .   .   Child: 0  Id: a of type (null) [line: 20]
.   .   .   .   .   Child: 1  Id: i of type (null) [line: 20]
.   .   Sibling: 10  Call: outnl of type (null) [line: 21]
.   .   Sibling: 11  For [line: 23]
.   .   .   Child: 0  Var: i of type int [line: 23]
.   .   .   Child: 1  Range [line: 23]
.   .   .   .   Child: 0  Const 0 of type int [line: 23]
.   .   .   .   Child: 1  Const 2 of type int [line: 23]
.   .   .   Child: 2  Call: outputb of type (null) [line: 23]
.   .   .   .   Child: 0  Op: [ of type (null) [line: 23]
.   .   .   .   .   Child: 0  Id: b of type (null) [line: 23]
.   .   .   .   .   Child: 1  Id: i of type (null) [line: 23]
.   .   Sibling: 12  Call: outnl of type (null) [line: 24]
.   .   Sibling: 13  For [line: 26]
.   .   .   Child: 0  Var: i of type int [line: 26]
.   .   .   Child: 1  Range [line: 26]
.   .   .   .   Child: 0  Const 0 of type int [line: 26]
.   .   .   .   Child: 1  Const 2 of type int [line: 26]
.   .   .   Child: 2  Call: outputc of type (null) [line: 26]
.   .   .   .   Child: 0  Op: [ of type (null) [line: 26]
.   .   .   .   .   Child: 0  Id: c of type (null) [line: 26]
.   .   .   .   .   Child: 1  Id: i of type (null) [line: 26]
.   .   Sibling: 14  Call: outnl of type (null) [line: 27]
.   .   Sibling: 15  For [line: 29]
.   .   .   Child: 0  Var: i of type int [line: 29]
.   .   .   Child: 1  Range [line: 29]
.   .   .   .   Child: 0  Const 1 of type int [line: 29]
.   .   .   .   Child: 1  Const 3 of type int [line: 29]
.   .   .   Child: 2  For [line: 29]
.   .   .   .   Child: 0  Var: j of type int [line: 29]
.   .   .   .   Child: 1  Range [line: 29]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 29]
.   .   .   .   .   Child: 1  Const 6 of type int [line: 29]
.   .   .   .   .   Child: 2  Const 2 of type int [line: 29]
.   .   .   .   Child: 2  Call: output of type (null) [line: 29]
.   .   .   .   .   Child: 0  Op: * of type (null) [line: 29]
.   .   .   .   .   .   Child: 0  Id: i of type (null) [line: 29]
.   .   .   .   .   .   Child: 1  Id: j of type (null) [line: 29]
Number of warnings: 0
Number of errors: 24

==============
==============
./c- -P for2.c-
ERROR(5) : Symbol 'j' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   a:  
                   i:  
                   j:  
===========  ============  ===========
ID: a ParentID: to
yes, we found ID: a
ID: a ParentID: to
yes, we found ID: a
ID: a ParentID: to
yes, we found ID: a
ID: j ParentID: to
yes, we found ID: j
ID: j ParentID: to
yes, we found ID: j
ID: j ParentID: to
yes, we found ID: j
ID: a ParentID: to
yes, we found ID: a
ID: a ParentID: to
yes, we found ID: a
ID: a ParentID: to
yes, we found ID: a
ID: i ParentID: to
yes, we found ID: i
ID: i ParentID: to
yes, we found ID: i
ID: i ParentID: to
yes, we found ID: i
ID: i ParentID: +
yes, we found ID: i
ID: i ParentID: +
yes, we found ID: i
ID: i ParentID: +
yes, we found ID: i
ID: j ParentID: +
yes, we found ID: j
ID: j ParentID: +
yes, we found ID: j
ID: j ParentID: +
yes, we found ID: j
Func: main returns type void [line: 1]
.   Child: 1  Compound [line: 2]
.   .   Child: 0  Var: a of array of type int [line: 3]
.   .   Child: 1  For [line: 5]
.   .   .   Child: 0  Var: i of type int [line: 5]
.   .   .   Child: 1  Range [line: 5]
.   .   .   .   Child: 0  Id: a of type int [line: 5]
.   .   .   .   Child: 1  Id: j of type int [line: 5]
.   .   .   Child: 2  For [line: 6]
.   .   .   .   Child: 0  Var: j of type int [line: 6]
.   .   .   .   Child: 1  Range [line: 6]
.   .   .   .   .   Child: 0  Id: a of type int [line: 6]
.   .   .   .   .   Child: 1  Id: i of type int [line: 6]
.   .   .   .   Child: 2  Compound [line: 6]
.   .   .   .   .   Child: 0  Var: i of type int [line: 7]
.   .   .   .   .   Sibling: 1  Var: j of type int [line: 8]
.   .   .   .   .   Child: 1  Op: + of type int [line: 9]
.   .   .   .   .   .   Child: 0  Id: i of type int [line: 9]
.   .   .   .   .   .   Child: 1  Id: j of type int [line: 9]
Number of warnings: 0
Number of errors: 1

==============
==============
./c- -P fora.c-
ERROR(5) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(7) : Symbol 'i' is already declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   i:  
                   j:  
===========  ============  ===========
ID: i ParentID: <-
yes, we found ID: i
ID: i ParentID: <-
yes, we found ID: i
ID: i ParentID: <-
yes, we found ID: i
Func: main returns type void [line: 1]
.   Child: 1  Compound [line: 2]
.   .   Child: 1  For [line: 3]
.   .   .   Child: 0  Var: i of type int [line: 3]
.   .   .   Child: 1  Range [line: 3]
.   .   .   .   Child: 0  Const 1 of type int [line: 3]
.   .   .   .   Child: 1  Const 11 of type int [line: 3]
.   .   .   Child: 2  Assign: <- of type int [line: 3]
.   .   .   .   Child: 0  Id: i of type int [line: 3]
.   .   .   .   Child: 1  Const 3 of type int [line: 3]
.   .   Sibling: 1  For [line: 5]
.   .   .   Child: 0  Var: j of type int [line: 5]
.   .   .   Child: 1  Range [line: 5]
.   .   .   .   Child: 0  Const 2 of type int [line: 5]
.   .   .   .   Child: 1  Const 22 of type int [line: 5]
.   .   .   .   Child: 2  Const 3 of type int [line: 5]
.   .   .   Child: 2  Assign: <- of type (null) [line: 5]
.   .   .   .   Child: 0  Id: j of type int [line: 5]
.   .   .   .   Child: 1  Const 7 of type int [line: 5]
.   .   Sibling: 2  For [line: 7]
.   .   .   Child: 0  Var: i of type int [line: 7]
.   .   .   Child: 1  Range [line: 7]
.   .   .   .   Child: 0  Id: i of type int [line: 7]
.   .   .   .   Child: 1  Id: i of type int [line: 7]
.   .   .   .   Child: 2  Id: i of type int [line: 7]
.   .   .   Child: 2  Const 666 of type int [line: 7]
Number of warnings: 0
Number of errors: 2

==============
==============
./c- -P forb.c-
ERROR(7) : Symbol 'x' is already declared.
ERROR(8) : Symbol 'x' is already declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   x:  
                   y:  
                   z:  
===========  ============  ===========
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: for
yes, we found ID: x
ID: x ParentID: for
yes, we found ID: x
ID: x ParentID: for
yes, we found ID: x
Func: main returns type void [line: 1]
.   Child: 1  Compound [line: 2]
.   .   Child: 0  Var: y of type int [line: 3]
.   .   Sibling: 1  Var: z of array of type int [line: 3]
.   .   Child: 1  For [line: 4]
.   .   .   Child: 0  Var: x of type int [line: 4]
.   .   .   Child: 1  Range [line: 5]
.   .   .   .   Child: 0  Id: x of type int [line: 5]
.   .   .   .   Child: 1  Id: x of type int [line: 5]
.   .   .   .   Child: 2  Id: x of type int [line: 5]
.   .   .   Child: 2  Id: x of type int [line: 6]
.   .   Sibling: 1  For [line: 7]
.   .   .   Child: 0  Var: x of type int [line: 7]
.   .   .   Child: 1  Range [line: 7]
.   .   .   .   Child: 0  Id: y of type int [line: 7]
.   .   .   .   Child: 1  Id: x of type int [line: 7]
.   .   .   Child: 2  Id: x of type int [line: 7]
.   .   Sibling: 2  For [line: 8]
.   .   .   Child: 0  Var: x of type int [line: 8]
.   .   .   Child: 1  Range [line: 8]
.   .   .   .   Child: 0  Id: z of type int [line: 8]
.   .   .   .   Child: 1  Id: x of type int [line: 8]
.   .   .   Child: 2  Id: x of type int [line: 8]
Number of warnings: 0
Number of errors: 2

==============
==============
./c- -P forscope.c-
ERROR(3) : '<-' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(7) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(10) : Symbol 'x' is already declared.
ERROR(12) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(15) : Symbol 'x' is already declared.
ERROR(19) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(22) : Symbol 'x' is already declared.
ERROR(23) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(25) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(28) : Symbol 'x' is already declared.
ERROR(30) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(31) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(35) : Symbol 'x' is already declared.
ERROR(37) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(38) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(41) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(44) : Symbol 'x' is already declared.
ERROR(46) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(48) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
              values:  
                   x:  
===========  ============  ===========
ID: values ParentID: [
yes, we found ID: values
ID: values ParentID: [
yes, we found ID: values
ID: values ParentID: [
yes, we found ID: values
Func: main returns type void [line: 1]
.   Child: 1  Compound [line: 1]
.   .   Child: 0  Var: values of array of type int [line: 2]
.   .   Child: 1  Assign: <- of type int [line: 3]
.   .   .   Child: 0  Op: [ of type int [line: 3]
.   .   .   .   Child: 0  Id: values of type int [line: 3]
.   .   .   .   Child: 1  Const 0 of type int [line: 3]
.   .   .   Child: 1  Const 3 of type int [line: 3]
.   .   Sibling: 1  For [line: 5]
.   .   .   Child: 0  Var: x of type int [line: 5]
.   .   .   Child: 1  Range [line: 5]
.   .   .   .   Child: 0  Id: values of type int [line: 5]
.   .   .   .   Child: 1  Const 10 of type int [line: 5]
.   .   .   Child: 2  Compound [line: 5]
.   .   .   .   Child: 0  Var: x of type int [line: 6]
.   .   .   .   Child: 1  Assign: <- of type (null) [line: 7]
.   .   .   .   .   Child: 0  Id: x of type int [line: 7]
.   .   .   .   .   Child: 1  Const 1 of type int [line: 7]
.   .   Sibling: 2  For [line: 10]
.   .   .   Child: 0  Var: x of type int [line: 10]
.   .   .   Child: 1  Range [line: 10]
.   .   .   .   Child: 0  Id: values of type int [line: 10]
.   .   .   .   Child: 1  Const 20 of type int [line: 10]
.   .   .   Child: 2  Compound [line: 10]
.   .   .   .   Child: 1  Compound [line: 10]
.   .   .   .   .   Child: 0  Var: x of type int [line: 11]
.   .   .   .   .   Child: 1  Assign: <- of type (null) [line: 12]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 12]
.   .   .   .   .   .   Child: 1  Const 2 of type int [line: 12]
.   .   Sibling: 3  For [line: 15]
.   .   .   Child: 0  Var: x of type int [line: 15]
.   .   .   Child: 1  Range [line: 15]
.   .   .   .   Child: 0  Id: values of type int [line: 15]
.   .   .   .   Child: 1  Const 30 of type int [line: 15]
.   .   .   Child: 2  Compound [line: 15]
.   .   .   .   Child: 0  Var: x of type int [line: 16]
.   .   .   .   Child: 1  Compound [line: 17]
.   .   .   .   .   Child: 0  Var: x of type int [line: 18]
.   .   .   .   .   Child: 1  Assign: <- of type (null) [line: 19]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 19]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 19]
.   .   Sibling: 4  For [line: 22]
.   .   .   Child: 0  Var: x of type int [line: 22]
.   .   .   Child: 1  Range [line: 22]
.   .   .   .   Child: 0  Id: values of type int [line: 22]
.   .   .   .   Child: 1  Const 40 of type int [line: 22]
.   .   .   Child: 2  If [line: 23]
.   .   .   .   Child: 0  Op: > of type (null) [line: 23]
.   .   .   .   .   Child: 0  Id: x of type int [line: 23]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 23]
.   .   .   .   Child: 1  Compound [line: 23]
.   .   .   .   .   Child: 0  Var: x of type int [line: 24]
.   .   .   .   .   Child: 1  Assign: <- of type (null) [line: 25]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 25]
.   .   .   .   .   .   Child: 1  Const 4 of type int [line: 25]
.   .   Sibling: 5  For [line: 28]
.   .   .   Child: 0  Var: x of type int [line: 28]
.   .   .   Child: 1  Range [line: 28]
.   .   .   .   Child: 0  Id: values of type int [line: 28]
.   .   .   .   Child: 1  Const 50 of type int [line: 28]
.   .   .   Child: 2  Compound [line: 28]
.   .   .   .   Child: 0  Var: x of type int [line: 29]
.   .   .   .   Child: 1  If [line: 30]
.   .   .   .   .   Child: 0  Op: > of type (null) [line: 30]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 30]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 30]
.   .   .   .   .   Child: 1  Compound [line: 30]
.   .   .   .   .   .   Child: 0  Var: x of type int [line: 31]
.   .   .   .   .   .   Child: 1  Assign: <- of type (null) [line: 31]
.   .   .   .   .   .   .   Child: 0  Id: x of type int [line: 31]
.   .   .   .   .   .   .   Child: 1  Const 5 of type int [line: 31]
.   .   Sibling: 6  For [line: 35]
.   .   .   Child: 0  Var: x of type int [line: 35]
.   .   .   Child: 1  Range [line: 35]
.   .   .   .   Child: 0  Id: values of type int [line: 35]
.   .   .   .   Child: 1  Const 60 of type int [line: 35]
.   .   .   Child: 2  While [line: 36]
.   .   .   .   Child: 0  Const true of type bool [line: 36]
.   .   .   .   Child: 1  If [line: 37]
.   .   .   .   .   Child: 0  Op: > of type (null) [line: 37]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 37]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 37]
.   .   .   .   .   Child: 1  Compound [line: 37]
.   .   .   .   .   .   Child: 0  Var: x of type int [line: 38]
.   .   .   .   .   .   Child: 1  Assign: <- of type (null) [line: 38]
.   .   .   .   .   .   .   Child: 0  Id: x of type int [line: 38]
.   .   .   .   .   .   .   Child: 1  Const 6 of type int [line: 38]
.   .   .   .   .   Child: 2  Compound [line: 40]
.   .   .   .   .   .   Child: 0  Var: x of type int [line: 41]
.   .   .   .   .   .   Child: 1  Assign: <- of type (null) [line: 41]
.   .   .   .   .   .   .   Child: 0  Id: x of type int [line: 41]
.   .   .   .   .   .   .   Child: 1  Const 7 of type int [line: 41]
.   .   Sibling: 7  For [line: 44]
.   .   .   Child: 0  Var: x of type int [line: 44]
.   .   .   Child: 1  Range [line: 44]
.   .   .   .   Child: 0  Id: values of type int [line: 44]
.   .   .   .   Child: 1  Const 70 of type int [line: 44]
.   .   .   Child: 2  While [line: 45]
.   .   .   .   Child: 0  Const true of type bool [line: 45]
.   .   .   .   Child: 1  If [line: 46]
.   .   .   .   .   Child: 0  Op: > of type (null) [line: 46]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 46]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 46]
.   .   .   .   .   Child: 1  Const 666 of type int [line: 46]
.   .   .   .   .   Child: 2  Compound [line: 47]
.   .   .   .   .   .   Child: 0  Var: x of type int [line: 48]
.   .   .   .   .   .   Child: 1  Assign: <- of type (null) [line: 48]
.   .   .   .   .   .   .   Child: 0  Id: x of type int [line: 48]
.   .   .   .   .   .   .   Child: 1  Const 7 of type int [line: 48]
Number of warnings: 0
Number of errors: 19

==============
==============
./c- -P funcscope.c-
ERROR(5) : Symbol 'x' is already declared.
ERROR(5) : Symbol 'x' is already declared.
ERROR(6) : Symbol 'x' is already declared.
ERROR(12) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(16) : Symbol 'x' is already declared.
ERROR(19) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(23) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(25) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(29) : Symbol 'x' is already declared.
ERROR(30) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(31) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(37) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(38) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(41) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(47) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(49) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
===========  Symbol Table  ===========
Scope: Global          -----------------
                 ant: °Y 
Scope: ant             -----------------
                 bat: pY 
                   x:  
Scope: bat             -----------------
                 cat: )Y 
                   x:  
Scope: cat             -----------------
                 dog: @4Y 
                   x:  
Scope: dog             -----------------
                 elk: ÐAY 
                   x:  
Scope: elk             -----------------
                 fox: ðPY 
                   x:  
Scope: fox             -----------------
                 gnu: °fY 
                   x:  
Scope: gnu             -----------------
                   x:  
===========  ============  ===========
ID: x ParentID: <-
yes, we found ID: x
ID: x ParentID: <-
yes, we found ID: x
ID: x ParentID: <-
yes, we found ID: x
Func: ant returns type void [line: 5]
.   Child: 0  Parm: x of type int [line: 5]
.   Sibling: 1  Parm: x of type int [line: 5]
.   Child: 1  Compound [line: 5]
.   .   Child: 0  Var: x of type int [line: 6]
.   .   Child: 1  Assign: <- of type int [line: 7]
.   .   .   Child: 0  Id: x of type int [line: 7]
.   .   .   Child: 1  Const 1 of type int [line: 7]
Sibling: 1  Func: bat returns type void [line: 10]
.   Child: 0  Parm: x of type int [line: 10]
.   Child: 1  Compound [line: 10]
.   .   Child: 1  Compound [line: 10]
.   .   .   Child: 0  Var: x of type int [line: 11]
.   .   .   Child: 1  Assign: <- of type (null) [line: 12]
.   .   .   .   Child: 0  Id: x of type int [line: 12]
.   .   .   .   Child: 1  Const 2 of type int [line: 12]
Sibling: 2  Func: cat returns type void [line: 15]
.   Child: 0  Parm: x of type int [line: 15]
.   Child: 1  Compound [line: 15]
.   .   Child: 0  Var: x of type int [line: 16]
.   .   Child: 1  Compound [line: 17]
.   .   .   Child: 0  Var: x of type int [line: 18]
.   .   .   Child: 1  Assign: <- of type (null) [line: 19]
.   .   .   .   Child: 0  Id: x of type int [line: 19]
.   .   .   .   Child: 1  Const 3 of type int [line: 19]
Sibling: 3  Func: dog returns type void [line: 22]
.   Child: 0  Parm: x of type int [line: 22]
.   Child: 1  Compound [line: 22]
.   .   Child: 1  If [line: 23]
.   .   .   Child: 0  Op: > of type (null) [line: 23]
.   .   .   .   Child: 0  Id: x of type int [line: 23]
.   .   .   .   Child: 1  Const 3 of type int [line: 23]
.   .   .   Child: 1  Compound [line: 23]
.   .   .   .   Child: 0  Var: x of type int [line: 24]
.   .   .   .   Child: 1  Assign: <- of type (null) [line: 25]
.   .   .   .   .   Child: 0  Id: x of type int [line: 25]
.   .   .   .   .   Child: 1  Const 4 of type int [line: 25]
Sibling: 4  Func: elk returns type void [line: 28]
.   Child: 0  Parm: x of type int [line: 28]
.   Child: 1  Compound [line: 28]
.   .   Child: 0  Var: x of type int [line: 29]
.   .   Child: 1  If [line: 30]
.   .   .   Child: 0  Op: > of type (null) [line: 30]
.   .   .   .   Child: 0  Id: x of type int [line: 30]
.   .   .   .   Child: 1  Const 3 of type int [line: 30]
.   .   .   Child: 1  Compound [line: 30]
.   .   .   .   Child: 0  Var: x of type int [line: 31]
.   .   .   .   Child: 1  Assign: <- of type (null) [line: 31]
.   .   .   .   .   Child: 0  Id: x of type int [line: 31]
.   .   .   .   .   Child: 1  Const 5 of type int [line: 31]
Sibling: 5  Func: fox returns type void [line: 35]
.   Child: 0  Parm: x of type int [line: 35]
.   Child: 1  Compound [line: 35]
.   .   Child: 1  While [line: 36]
.   .   .   Child: 0  Const true of type bool [line: 36]
.   .   .   Child: 1  If [line: 37]
.   .   .   .   Child: 0  Op: > of type (null) [line: 37]
.   .   .   .   .   Child: 0  Id: x of type int [line: 37]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 37]
.   .   .   .   Child: 1  Compound [line: 37]
.   .   .   .   .   Child: 0  Var: x of type int [line: 38]
.   .   .   .   .   Child: 1  Assign: <- of type (null) [line: 38]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 38]
.   .   .   .   .   .   Child: 1  Const 6 of type int [line: 38]
.   .   .   .   Child: 2  Compound [line: 40]
.   .   .   .   .   Child: 0  Var: x of type int [line: 41]
.   .   .   .   .   Child: 1  Assign: <- of type (null) [line: 41]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 41]
.   .   .   .   .   .   Child: 1  Const 7 of type int [line: 41]
Sibling: 6  Func: gnu returns type void [line: 45]
.   Child: 0  Parm: x of type int [line: 45]
.   Child: 1  Compound [line: 45]
.   .   Child: 1  While [line: 46]
.   .   .   Child: 0  Const true of type bool [line: 46]
.   .   .   Child: 1  If [line: 47]
.   .   .   .   Child: 0  Op: > of type (null) [line: 47]
.   .   .   .   .   Child: 0  Id: x of type int [line: 47]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 47]
.   .   .   .   Child: 1  Const 666 of type int [line: 47]
.   .   .   .   Child: 2  Compound [line: 48]
.   .   .   .   .   Child: 0  Var: x of type int [line: 49]
.   .   .   .   .   Child: 1  Assign: <- of type (null) [line: 49]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 49]
.   .   .   .   .   .   Child: 1  Const 7 of type int [line: 49]
Number of warnings: 0
Number of errors: 16

==============
==============
./c- -P if.c-
ERROR(8) : Unary '++' requires an operand of type int but was given type (null).
ERROR(10) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(10) : Unary '++' requires an operand of type int but was given type (null).
ERROR(11) : Unary '--' requires an operand of type int but was given type (null).
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   x:  
===========  ============  ===========
ID: x ParentID: <-
yes, we found ID: x
ID: x ParentID: <-
yes, we found ID: x
ID: x ParentID: <-
yes, we found ID: x
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   Child: 1  Assign: <- of type int [line: 6]
.   .   .   Child: 0  Id: x of type int [line: 6]
.   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   Sibling: 1  If [line: 8]
.   .   .   Child: 0  Const false of type bool [line: 8]
.   .   .   Child: 1  Assign: ++ of type (null) [line: 8]
.   .   .   .   Child: 0  Id: x of type int [line: 8]
.   .   Sibling: 2  If [line: 10]
.   .   .   Child: 0  Op: < of type (null) [line: 10]
.   .   .   .   Child: 0  Id: x of type int [line: 10]
.   .   .   .   Child: 1  Const 10 of type int [line: 10]
.   .   .   Child: 1  Assign: ++ of type (null) [line: 10]
.   .   .   .   Child: 0  Id: x of type int [line: 10]
.   .   .   Child: 2  Assign: -- of type (null) [line: 11]
.   .   .   .   Child: 0  Id: x of type int [line: 11]
Number of warnings: 0
Number of errors: 4

==============
==============
./c- -P ifNest.c-
ERROR(10) : '>=' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(13) : '>=' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(17) : '>=' requires operands of the same type but lhs is type (null) and rhs is type int.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   x:  
                   y:  
                   z:  
===========  ============  ===========
ID: x ParentID: >=
yes, we found ID: x
ID: x ParentID: >=
yes, we found ID: x
ID: x ParentID: >=
yes, we found ID: x
ID: x ParentID: if
yes, we found ID: x
ID: x ParentID: if
yes, we found ID: x
ID: x ParentID: if
yes, we found ID: x
ID: y ParentID: if
yes, we found ID: y
ID: y ParentID: if
yes, we found ID: y
ID: y ParentID: if
yes, we found ID: y
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   Sibling: 1  Var: y of type int [line: 4]
.   .   Sibling: 2  Var: z of type int [line: 4]
.   .   Child: 1  If [line: 6]
.   .   .   Child: 0  Op: >= of type bool [line: 6]
.   .   .   .   Child: 0  Id: x of type int [line: 6]
.   .   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   .   Child: 1  If [line: 7]
.   .   .   .   Child: 0  Const true of type bool [line: 7]
.   .   .   .   Child: 1  Id: x of type int [line: 7]
.   .   .   .   Child: 2  Id: y of type int [line: 8]
.   .   Sibling: 1  Const 111 of type int [line: 9]
.   .   Sibling: 2  If [line: 10]
.   .   .   Child: 0  Op: >= of type (null) [line: 10]
.   .   .   .   Child: 0  Id: y of type int [line: 10]
.   .   .   .   Child: 1  Const 0 of type int [line: 10]
.   .   .   Child: 1  Id: y of type int [line: 10]
.   .   .   Child: 2  If [line: 11]
.   .   .   .   Child: 0  Const true of type bool [line: 11]
.   .   .   .   Child: 1  Id: z of type int [line: 11]
.   .   Sibling: 3  Const 222 of type int [line: 12]
.   .   Sibling: 4  If [line: 13]
.   .   .   Child: 0  Op: >= of type (null) [line: 13]
.   .   .   .   Child: 0  Id: y of type int [line: 13]
.   .   .   .   Child: 1  Const 0 of type int [line: 13]
.   .   .   Child: 1  Id: y of type int [line: 13]
.   .   .   Child: 2  If [line: 14]
.   .   .   .   Child: 0  Const true of type bool [line: 14]
.   .   .   .   Child: 1  Id: z of type int [line: 14]
.   .   .   .   Child: 2  Id: x of type int [line: 15]
.   .   Sibling: 5  Const 333 of type int [line: 16]
.   .   Sibling: 6  If [line: 17]
.   .   .   Child: 0  Op: >= of type (null) [line: 17]
.   .   .   .   Child: 0  Id: x of type int [line: 17]
.   .   .   .   Child: 1  Const 0 of type int [line: 17]
.   .   .   Child: 1  If [line: 17]
.   .   .   .   Child: 0  Const true of type bool [line: 17]
.   .   .   .   Child: 1  Id: x of type int [line: 17]
.   .   .   .   Child: 2  Id: y of type int [line: 18]
.   .   .   Child: 2  Id: z of type int [line: 19]
Number of warnings: 0
Number of errors: 3

==============
==============
./c- -P init.c-
ERROR(13) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
===========  Symbol Table  ===========
Scope: Global          -----------------
                   a:  
                main:  
                   x:  
Scope: main            -----------------
                   b:  
                   c:  
                   y:  
                   z:  
===========  ============  ===========
Var: a of array of type int [line: 3]
Sibling: 1  Init: : of type int [line: 4]
.   Child: 0  Var: x of type (null) [line: 4]
.   Child: 1  Const 666 of type int [line: 4]
Sibling: 2  Func: main returns type void [line: 6]
.   Child: 1  Compound [line: 7]
.   .   Child: 0  Var: b of array of type int [line: 8]
.   .   Sibling: 1  Init: : of type int [line: 9]
.   .   .   Child: 0  Var: y of type (null) [line: 9]
.   .   .   Child: 1  Const 777 of type int [line: 9]
.   .   Sibling: 2  Var: c of array of type int [line: 10]
.   .   Sibling: 3  Init: : of type int [line: 11]
.   .   .   Child: 0  Var: z of type (null) [line: 11]
.   .   .   Child: 1  Const 888 of type int [line: 11]
.   .   Child: 1  Assign: <- of type (null) [line: 13]
.   .   .   Child: 0  Id: z of type (null) [line: 13]
.   .   .   Child: 1  Const 999 of type int [line: 13]
Number of warnings: 0
Number of errors: 1

==============
==============
./c- -P init2.c-
ERROR(3) : '+' requires operands of type int but rhs is of type (null).
ERROR(8) : '+' requires operands of type int but rhs is of type (null).
ERROR(10) : '+' requires operands of type int but rhs is of type (null).
ERROR(12) : Symbol 'output' is not declared.
ERROR(13) : Symbol 'output' is not declared.
ERROR(14) : Symbol 'output' is not declared.
ERROR(15) : Symbol 'outnl' is not declared.
ERROR(17) : Symbol 'output' is not declared.
ERROR(18) : Symbol 'output' is not declared.
ERROR(19) : Symbol 'output' is not declared.
ERROR(20) : Symbol 'outnl' is not declared.
ERROR(22) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
===========  Symbol Table  ===========
Scope: Global          -----------------
                   a:  
                main:  
                   x:  
Scope: main            -----------------
                   b:  
                   c:  
                   y:  
                   z:  
===========  ============  ===========
Var: a of array of type int [line: 2]
Sibling: 1  Init: : of type int [line: 3]
.   Child: 0  Var: x of type (null) [line: 3]
.   Child: 1  Op: + of type (null) [line: 3]
.   .   Child: 0  Const 666 of type int [line: 3]
.   .   Child: 1  Op: * of type (null) [line: 3]
.   .   .   Child: 0  Const 777 of type int [line: 3]
.   .   .   Child: 1  Const 888 of type int [line: 3]
Sibling: 2  Func: main returns type void [line: 5]
.   Child: 1  Compound [line: 6]
.   .   Child: 0  Var: b of array of type int [line: 7]
.   .   Sibling: 1  Init: : of type int [line: 8]
.   .   .   Child: 0  Var: y of type (null) [line: 8]
.   .   .   Child: 1  Op: + of type (null) [line: 8]
.   .   .   .   Child: 0  Const 777 of type int [line: 8]
.   .   .   .   Child: 1  Op: * of type (null) [line: 8]
.   .   .   .   .   Child: 0  Const 666 of type int [line: 8]
.   .   .   .   .   Child: 1  Const 888 of type int [line: 8]
.   .   Sibling: 2  Var: c of array of type int [line: 9]
.   .   Sibling: 3  Init: : of type int [line: 10]
.   .   .   Child: 0  Var: z of type (null) [line: 10]
.   .   .   Child: 1  Op: + of type (null) [line: 10]
.   .   .   .   Child: 0  Const 888 of type int [line: 10]
.   .   .   .   Child: 1  Op: * of type (null) [line: 10]
.   .   .   .   .   Child: 0  Const 777 of type int [line: 10]
.   .   .   .   .   Child: 1  Const 666 of type int [line: 10]
.   .   Child: 1  Call: output of type (null) [line: 12]
.   .   .   Child: 0  Op: sizeof of type (null) [line: 12]
.   .   .   .   Child: 0  Id: a of type (null) [line: 12]
.   .   Sibling: 1  Call: output of type (null) [line: 13]
.   .   .   Child: 0  Op: sizeof of type (null) [line: 13]
.   .   .   .   Child: 0  Id: b of type (null) [line: 13]
.   .   Sibling: 2  Call: output of type (null) [line: 14]
.   .   .   Child: 0  Op: sizeof of type (null) [line: 14]
.   .   .   .   Child: 0  Id: c of type (null) [line: 14]
.   .   Sibling: 3  Call: outnl of type (null) [line: 15]
.   .   Sibling: 4  Call: output of type (null) [line: 17]
.   .   .   Child: 0  Id: x of type (null) [line: 17]
.   .   Sibling: 5  Call: output of type (null) [line: 18]
.   .   .   Child: 0  Id: y of type (null) [line: 18]
.   .   Sibling: 6  Call: output of type (null) [line: 19]
.   .   .   Child: 0  Id: z of type (null) [line: 19]
.   .   Sibling: 7  Call: outnl of type (null) [line: 20]
.   .   Sibling: 8  Assign: <- of type (null) [line: 22]
.   .   .   Child: 0  Id: z of type (null) [line: 22]
.   .   .   Child: 1  Const 999 of type int [line: 22]
Number of warnings: 0
Number of errors: 12

==============
==============
./c- -P init3.c-
ERROR(10) : Symbol 'output' is not declared.
ERROR(11) : Symbol 'output' is not declared.
ERROR(12) : Symbol 'output' is not declared.
ERROR(13) : Symbol 'outputb' is not declared.
ERROR(14) : Symbol 'outputc' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
                   x:  
Scope: main            -----------------
                   b:  
                   c:  
                   y:  
                   z:  
===========  ============  ===========
Init: : of type int [line: 2]
.   Child: 0  Var: x of type (null) [line: 2]
.   Child: 1  Const 111 of type int [line: 2]
Sibling: 1  Func: main returns type void [line: 4]
.   Child: 1  Compound [line: 4]
.   .   Child: 0  Init: : of type int [line: 5]
.   .   .   Child: 0  Var: y of type (null) [line: 5]
.   .   .   Child: 1  Const 222 of type int [line: 5]
.   .   Sibling: 1  Init: : of type int [line: 6]
.   .   .   Child: 0  Var: z of type (null) [line: 6]
.   .   .   Child: 1  Const 333 of type int [line: 6]
.   .   Sibling: 2  Init: : of type bool [line: 7]
.   .   .   Child: 0  Var: b of type (null) [line: 7]
.   .   .   Child: 1  Const true of type bool [line: 7]
.   .   Sibling: 3  Init: : of type char [line: 8]
.   .   .   Child: 0  Var: c of type (null) [line: 8]
.   .   .   Child: 1  Const 'Z' of type char [line: 8]
.   .   Child: 1  Call: output of type (null) [line: 10]
.   .   .   Child: 0  Id: x of type (null) [line: 10]
.   .   Sibling: 1  Call: output of type (null) [line: 11]
.   .   .   Child: 0  Id: y of type (null) [line: 11]
.   .   Sibling: 2  Call: output of type (null) [line: 12]
.   .   .   Child: 0  Id: z of type (null) [line: 12]
.   .   Sibling: 3  Call: outputb of type (null) [line: 13]
.   .   .   Child: 0  Id: b of type (null) [line: 13]
.   .   Sibling: 4  Call: outputc of type (null) [line: 14]
.   .   .   Child: 0  Id: c of type (null) [line: 14]
Number of warnings: 0
Number of errors: 5

==============
==============
./c- -P init4.c-
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                roll:  
                   x:  
                   y:  
===========  ============  ===========
Func: main returns type int [line: 1]
.   Child: 1  Compound [line: 2]
.   .   Child: 0  Init: : of type int [line: 3]
.   .   .   Child: 0  Var: x of type (null) [line: 3]
.   .   .   Child: 1  Op: * of type int [line: 3]
.   .   .   .   Child: 0  Const 23 of type int [line: 3]
.   .   .   .   Child: 1  Const 3 of type int [line: 3]
.   .   Sibling: 1  Init: : of type int [line: 4]
.   .   .   Child: 0  Var: y of type (null) [line: 4]
.   .   .   Child: 1  Id: x of type (null) [line: 4]
.   .   Sibling: 2  Init: : of type int [line: 5]
.   .   .   Child: 0  Var: roll of type (null) [line: 5]
.   .   .   Child: 1  Op: ? of type (null) [line: 5]
.   .   .   .   Child: 0  Const 6 of type int [line: 5]
.   .   Child: 1  Const 333 of type int [line: 6]
.   .   Sibling: 1  Const 'z' of type char [line: 7]
.   .   Sibling: 2  Const true of type bool [line: 8]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P mixedControl.c-
ERROR(10) : '>=' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(13) : '>=' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(18) : '>=' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(24) : '>=' requires operands of the same type but lhs is type (null) and rhs is type int.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   x:  
                   y:  
                   z:  
===========  ============  ===========
ID: x ParentID: >=
yes, we found ID: x
ID: x ParentID: >=
yes, we found ID: x
ID: x ParentID: >=
yes, we found ID: x
ID: x ParentID: while
yes, we found ID: x
ID: x ParentID: while
yes, we found ID: x
ID: x ParentID: while
yes, we found ID: x
ID: y ParentID: if
yes, we found ID: y
ID: y ParentID: if
yes, we found ID: y
ID: y ParentID: if
yes, we found ID: y
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   Sibling: 1  Var: y of type int [line: 4]
.   .   Sibling: 2  Var: z of type int [line: 4]
.   .   Child: 1  If [line: 6]
.   .   .   Child: 0  Op: >= of type bool [line: 6]
.   .   .   .   Child: 0  Id: x of type int [line: 6]
.   .   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   .   Child: 1  While [line: 7]
.   .   .   .   Child: 0  Const true of type bool [line: 7]
.   .   .   .   Child: 1  Id: x of type int [line: 7]
.   .   .   Child: 2  Id: y of type int [line: 8]
.   .   Sibling: 1  Const 111 of type int [line: 9]
.   .   Sibling: 2  If [line: 10]
.   .   .   Child: 0  Op: >= of type (null) [line: 10]
.   .   .   .   Child: 0  Id: y of type int [line: 10]
.   .   .   .   Child: 1  Const 0 of type int [line: 10]
.   .   .   Child: 1  Id: y of type int [line: 10]
.   .   .   Child: 2  While [line: 11]
.   .   .   .   Child: 0  Const true of type bool [line: 11]
.   .   .   .   Child: 1  Id: z of type int [line: 11]
.   .   Sibling: 3  Const 222 of type int [line: 12]
.   .   Sibling: 4  If [line: 13]
.   .   .   Child: 0  Op: >= of type (null) [line: 13]
.   .   .   .   Child: 0  Id: y of type int [line: 13]
.   .   .   .   Child: 1  Const 0 of type int [line: 13]
.   .   .   Child: 1  Id: y of type int [line: 13]
.   .   Sibling: 5  While [line: 14]
.   .   .   Child: 0  Const true of type bool [line: 14]
.   .   .   Child: 1  If [line: 15]
.   .   .   .   Child: 0  Const true of type bool [line: 15]
.   .   .   .   Child: 1  Id: z of type int [line: 15]
.   .   .   .   Child: 2  Id: x of type int [line: 16]
.   .   Sibling: 6  Const 333 of type int [line: 17]
.   .   Sibling: 7  If [line: 18]
.   .   .   Child: 0  Op: >= of type (null) [line: 18]
.   .   .   .   Child: 0  Id: x of type int [line: 18]
.   .   .   .   Child: 1  Const 0 of type int [line: 18]
.   .   .   Child: 1  While [line: 19]
.   .   .   .   Child: 0  Const true of type bool [line: 19]
.   .   .   .   Child: 1  If [line: 20]
.   .   .   .   .   Child: 0  Const true of type bool [line: 20]
.   .   .   .   .   Child: 1  Id: x of type int [line: 20]
.   .   .   .   .   Child: 2  Id: y of type int [line: 21]
.   .   .   Child: 2  Id: z of type int [line: 22]
.   .   Sibling: 8  Const 444 of type int [line: 23]
.   .   Sibling: 9  If [line: 24]
.   .   .   Child: 0  Op: >= of type (null) [line: 24]
.   .   .   .   Child: 0  Id: x of type int [line: 24]
.   .   .   .   Child: 1  Const 0 of type int [line: 24]
.   .   .   Child: 1  Id: z of type int [line: 24]
.   .   .   Child: 2  If [line: 26]
.   .   .   .   Child: 0  Const true of type bool [line: 26]
.   .   .   .   Child: 1  While [line: 27]
.   .   .   .   .   Child: 0  Const true of type bool [line: 27]
.   .   .   .   .   Child: 1  If [line: 28]
.   .   .   .   .   .   Child: 0  Const true of type bool [line: 28]
.   .   .   .   .   .   Child: 1  Id: x of type int [line: 28]
.   .   .   .   .   .   Child: 2  Id: y of type int [line: 29]
.   .   .   .   Child: 2  Id: z of type int [line: 30]
Number of warnings: 0
Number of errors: 4

==============
==============
./c- -P mixedControl2.c-
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
===========  ============  ===========
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 1  If [line: 4]
.   .   .   Child: 0  Const 111 of type int [line: 4]
.   .   .   Child: 1  While [line: 5]
.   .   .   .   Child: 0  Const 222 of type int [line: 5]
.   .   .   .   Child: 1  If [line: 6]
.   .   .   .   .   Child: 0  Const 333 of type int [line: 6]
.   .   .   .   .   Child: 1  While [line: 7]
.   .   .   .   .   .   Child: 0  Const 444 of type int [line: 7]
.   .   .   .   .   .   Child: 1  Const 555 of type int [line: 7]
.   .   .   .   .   Child: 2  Const 666 of type int [line: 8]
.   .   .   Child: 2  Const 777 of type int [line: 9]
.   .   Sibling: 1  If [line: 11]
.   .   .   Child: 0  Const 111 of type int [line: 11]
.   .   .   Child: 1  While [line: 12]
.   .   .   .   Child: 0  Const 222 of type int [line: 12]
.   .   .   .   Child: 1  Const 333 of type int [line: 12]
.   .   .   Child: 2  While [line: 14]
.   .   .   .   Child: 0  Const 444 of type int [line: 14]
.   .   .   .   Child: 1  Const 555 of type int [line: 14]
.   .   Sibling: 2  If [line: 16]
.   .   .   Child: 0  Const 111 of type int [line: 16]
.   .   .   Child: 1  While [line: 17]
.   .   .   .   Child: 0  Const 222 of type int [line: 17]
.   .   .   .   Child: 1  While [line: 18]
.   .   .   .   .   Child: 0  Const 444 of type int [line: 18]
.   .   .   .   .   Child: 1  Const 555 of type int [line: 18]
.   .   .   Child: 2  Const 666 of type int [line: 19]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P mixedControl3.c-
ERROR(7) : Symbol 'x' is already declared.
ERROR(9) : Symbol 'x' is already declared.
ERROR(14) : '*' requires operands of type int but lhs is of type (null).
ERROR(14) : Symbol 'x' is already declared.
ERROR(16) : Symbol 'x' is already declared.
ERROR(19) : Symbol 'x' is already declared.
ERROR(20) : Symbol 'x' is already declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   x:  
===========  ============  ===========
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
ID: x ParentID: to
yes, we found ID: x
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   Child: 1  If [line: 6]
.   .   .   Child: 0  Const 111 of type int [line: 6]
.   .   .   Child: 1  For [line: 7]
.   .   .   .   Child: 0  Var: x of type int [line: 7]
.   .   .   .   Child: 1  Range [line: 7]
.   .   .   .   .   Child: 0  Id: x of type int [line: 7]
.   .   .   .   .   Child: 1  Id: x of type int [line: 7]
.   .   .   .   .   Child: 2  Id: x of type int [line: 7]
.   .   .   .   Child: 2  If [line: 8]
.   .   .   .   .   Child: 0  Const 333 of type int [line: 8]
.   .   .   .   .   Child: 1  For [line: 9]
.   .   .   .   .   .   Child: 0  Var: x of type int [line: 9]
.   .   .   .   .   .   Child: 1  Range [line: 9]
.   .   .   .   .   .   .   Child: 0  Const 1 of type int [line: 9]
.   .   .   .   .   .   .   Child: 1  Id: x of type int [line: 9]
.   .   .   .   .   .   Child: 2  Const 555 of type int [line: 9]
.   .   .   .   .   Child: 2  Const 666 of type int [line: 10]
.   .   .   Child: 2  Const 777 of type int [line: 11]
.   .   Sibling: 1  If [line: 13]
.   .   .   Child: 0  Const 111 of type int [line: 13]
.   .   .   Child: 1  For [line: 14]
.   .   .   .   Child: 0  Var: x of type int [line: 14]
.   .   .   .   Child: 1  Range [line: 14]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 14]
.   .   .   .   .   Child: 1  Const 2 of type int [line: 14]
.   .   .   .   .   Child: 2  Op: * of type (null) [line: 14]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 14]
.   .   .   .   .   .   Child: 1  Id: x of type int [line: 14]
.   .   .   .   Child: 2  Const 333 of type int [line: 14]
.   .   .   Child: 2  For [line: 16]
.   .   .   .   Child: 0  Var: x of type int [line: 16]
.   .   .   .   Child: 1  Range [line: 16]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 16]
.   .   .   .   .   Child: 1  Id: x of type int [line: 16]
.   .   .   .   Child: 2  Const 555 of type int [line: 16]
.   .   Sibling: 2  If [line: 18]
.   .   .   Child: 0  Const 111 of type int [line: 18]
.   .   .   Child: 1  For [line: 19]
.   .   .   .   Child: 0  Var: x of type int [line: 19]
.   .   .   .   Child: 1  Range [line: 19]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 19]
.   .   .   .   .   Child: 1  Const 10 of type int [line: 19]
.   .   .   .   Child: 2  For [line: 20]
.   .   .   .   .   Child: 0  Var: x of type int [line: 20]
.   .   .   .   .   Child: 1  Range [line: 20]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 20]
.   .   .   .   .   .   Child: 1  Const 10 of type int [line: 20]
.   .   .   .   .   Child: 2  Const 555 of type int [line: 20]
.   .   .   Child: 2  Const 666 of type int [line: 21]
Number of warnings: 0
Number of errors: 7

==============
==============
./c- -P nest.c-
ERROR(13) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(14) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(15) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(16) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(18) : Symbol 'output' is not declared.
ERROR(19) : Symbol 'output' is not declared.
ERROR(20) : Symbol 'output' is not declared.
ERROR(21) : Symbol 'output' is not declared.
ERROR(22) : Symbol 'output' is not declared.
ERROR(23) : Symbol 'outnl' is not declared.
ERROR(24) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(25) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(26) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(27) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(28) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(37) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(38) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(39) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(40) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(41) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(43) : Symbol 'output' is not declared.
ERROR(44) : Symbol 'output' is not declared.
ERROR(45) : Symbol 'output' is not declared.
ERROR(46) : Symbol 'output' is not declared.
ERROR(47) : Symbol 'output' is not declared.
ERROR(48) : Symbol 'outnl' is not declared.
ERROR(54) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(55) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(56) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(58) : Symbol 'output' is not declared.
ERROR(59) : Symbol 'output' is not declared.
ERROR(60) : Symbol 'output' is not declared.
ERROR(61) : Symbol 'output' is not declared.
ERROR(62) : Symbol 'output' is not declared.
ERROR(63) : Symbol 'outnl' is not declared.
ERROR(65) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(66) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(67) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(68) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(69) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(70) : Symbol 'output' is not declared.
ERROR(71) : Symbol 'output' is not declared.
ERROR(72) : Symbol 'output' is not declared.
ERROR(73) : Symbol 'output' is not declared.
ERROR(74) : Symbol 'output' is not declared.
ERROR(75) : Symbol 'outnl' is not declared.
ERROR(77) : Symbol 'output' is not declared.
ERROR(78) : Symbol 'output' is not declared.
ERROR(79) : Symbol 'output' is not declared.
ERROR(80) : Symbol 'output' is not declared.
ERROR(81) : Symbol 'output' is not declared.
ERROR(82) : Symbol 'outnl' is not declared.
ERROR(84) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(85) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(86) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(87) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(88) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(89) : Symbol 'output' is not declared.
ERROR(90) : Symbol 'output' is not declared.
ERROR(91) : Symbol 'output' is not declared.
ERROR(92) : Symbol 'output' is not declared.
ERROR(93) : Symbol 'output' is not declared.
ERROR(94) : Symbol 'outnl' is not declared.
ERROR(97) : Symbol 'output' is not declared.
ERROR(98) : Symbol 'output' is not declared.
ERROR(99) : Symbol 'output' is not declared.
ERROR(100) : Symbol 'output' is not declared.
ERROR(101) : Symbol 'output' is not declared.
ERROR(102) : Symbol 'outnl' is not declared.
ERROR(106) : Symbol 'output' is not declared.
ERROR(107) : Symbol 'output' is not declared.
ERROR(108) : Symbol 'output' is not declared.
ERROR(109) : Symbol 'output' is not declared.
ERROR(110) : Symbol 'output' is not declared.
ERROR(111) : Symbol 'outnl' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
           agamemnon:  
                   x:  
                   y:  
                   z:  
Scope: agamemnon       -----------------
                   a:  
                   b:  
                main:  
                   x:  
Scope: main            -----------------
                   a:  
                   b:  
                   z:  
===========  ============  ===========
Var: x of type int [line: 3]
Sibling: 1  Var: y of type int [line: 4]
Sibling: 2  Var: z of type int [line: 5]
Sibling: 3  Func: agamemnon returns type void [line: 7]
.   Child: 1  Compound [line: 8]
.   .   Child: 0  Var: a of type int [line: 9]
.   .   Sibling: 1  Var: b of type int [line: 10]
.   .   Sibling: 2  Var: x of type int [line: 11]
.   .   Child: 1  Assign: <- of type (null) [line: 13]
.   .   .   Child: 0  Id: a of type int [line: 13]
.   .   .   Child: 1  Const 666 of type int [line: 13]
.   .   Sibling: 1  Assign: <- of type (null) [line: 14]
.   .   .   Child: 0  Id: b of type int [line: 14]
.   .   .   Child: 1  Const 666 of type int [line: 14]
.   .   Sibling: 2  Assign: <- of type (null) [line: 15]
.   .   .   Child: 0  Id: x of type int [line: 15]
.   .   .   Child: 1  Const 666 of type int [line: 15]
.   .   Sibling: 3  Assign: <- of type (null) [line: 16]
.   .   .   Child: 0  Id: z of type int [line: 16]
.   .   .   Child: 1  Const 666 of type int [line: 16]
.   .   Sibling: 4  Call: output of type (null) [line: 18]
.   .   .   Child: 0  Id: a of type (null) [line: 18]
.   .   Sibling: 5  Call: output of type (null) [line: 19]
.   .   .   Child: 0  Id: b of type (null) [line: 19]
.   .   Sibling: 6  Call: output of type (null) [line: 20]
.   .   .   Child: 0  Id: x of type (null) [line: 20]
.   .   Sibling: 7  Call: output of type (null) [line: 21]
.   .   .   Child: 0  Id: y of type (null) [line: 21]
.   .   Sibling: 8  Call: output of type (null) [line: 22]
.   .   .   Child: 0  Id: z of type (null) [line: 22]
.   .   Sibling: 9  Call: outnl of type (null) [line: 23]
.   .   Sibling: 10  Assign: <- of type (null) [line: 24]
.   .   .   Child: 0  Id: a of type int [line: 24]
.   .   .   Child: 1  Const 1 of type int [line: 24]
.   .   Sibling: 11  Assign: <- of type (null) [line: 25]
.   .   .   Child: 0  Id: b of type int [line: 25]
.   .   .   Child: 1  Const 2 of type int [line: 25]
.   .   Sibling: 12  Assign: <- of type (null) [line: 26]
.   .   .   Child: 0  Id: x of type int [line: 26]
.   .   .   Child: 1  Const 3 of type int [line: 26]
.   .   Sibling: 13  Assign: <- of type (null) [line: 27]
.   .   .   Child: 0  Id: y of type int [line: 27]
.   .   .   Child: 1  Const 4 of type int [line: 27]
.   .   Sibling: 14  Assign: <- of type (null) [line: 28]
.   .   .   Child: 0  Id: z of type int [line: 28]
.   .   .   Child: 1  Const 5 of type int [line: 28]
Sibling: 4  Func: main returns type void [line: 31]
.   Child: 1  Compound [line: 32]
.   .   Child: 0  Var: a of type int [line: 33]
.   .   Sibling: 1  Var: b of type int [line: 34]
.   .   Sibling: 2  Var: z of type int [line: 35]
.   .   Child: 1  Assign: <- of type (null) [line: 37]
.   .   .   Child: 0  Id: a of type int [line: 37]
.   .   .   Child: 1  Const 6 of type int [line: 37]
.   .   Sibling: 1  Assign: <- of type (null) [line: 38]
.   .   .   Child: 0  Id: b of type int [line: 38]
.   .   .   Child: 1  Const 7 of type int [line: 38]
.   .   Sibling: 2  Assign: <- of type (null) [line: 39]
.   .   .   Child: 0  Id: x of type int [line: 39]
.   .   .   Child: 1  Const 8 of type int [line: 39]
.   .   Sibling: 3  Assign: <- of type (null) [line: 40]
.   .   .   Child: 0  Id: y of type int [line: 40]
.   .   .   Child: 1  Const 9 of type int [line: 40]
.   .   Sibling: 4  Assign: <- of type (null) [line: 41]
.   .   .   Child: 0  Id: z of type int [line: 41]
.   .   .   Child: 1  Const 10 of type int [line: 41]
.   .   Sibling: 5  Call: output of type (null) [line: 43]
.   .   .   Child: 0  Id: a of type (null) [line: 43]
.   .   Sibling: 6  Call: output of type (null) [line: 44]
.   .   .   Child: 0  Id: b of type (null) [line: 44]
.   .   Sibling: 7  Call: output of type (null) [line: 45]
.   .   .   Child: 0  Id: x of type (null) [line: 45]
.   .   Sibling: 8  Call: output of type (null) [line: 46]
.   .   .   Child: 0  Id: y of type (null) [line: 46]
.   .   Sibling: 9  Call: output of type (null) [line: 47]
.   .   .   Child: 0  Id: z of type (null) [line: 47]
.   .   Sibling: 10  Call: outnl of type (null) [line: 48]
.   .   Sibling: 11  Compound [line: 49]
.   .   .   Child: 0  Var: a of type int [line: 50]
.   .   .   Sibling: 1  Var: b of type int [line: 51]
.   .   .   Sibling: 2  Var: z of type int [line: 52]
.   .   .   Child: 1  Assign: <- of type (null) [line: 54]
.   .   .   .   Child: 0  Id: a of type int [line: 54]
.   .   .   .   Child: 1  Const 666 of type int [line: 54]
.   .   .   Sibling: 1  Assign: <- of type (null) [line: 55]
.   .   .   .   Child: 0  Id: b of type int [line: 55]
.   .   .   .   Child: 1  Const 666 of type int [line: 55]
.   .   .   Sibling: 2  Assign: <- of type (null) [line: 56]
.   .   .   .   Child: 0  Id: z of type int [line: 56]
.   .   .   .   Child: 1  Const 666 of type int [line: 56]
.   .   .   Sibling: 3  Call: output of type (null) [line: 58]
.   .   .   .   Child: 0  Id: a of type (null) [line: 58]
.   .   .   Sibling: 4  Call: output of type (null) [line: 59]
.   .   .   .   Child: 0  Id: b of type (null) [line: 59]
.   .   .   Sibling: 5  Call: output of type (null) [line: 60]
.   .   .   .   Child: 0  Id: x of type (null) [line: 60]
.   .   .   Sibling: 6  Call: output of type (null) [line: 61]
.   .   .   .   Child: 0  Id: y of type (null) [line: 61]
.   .   .   Sibling: 7  Call: output of type (null) [line: 62]
.   .   .   .   Child: 0  Id: z of type (null) [line: 62]
.   .   .   Sibling: 8  Call: outnl of type (null) [line: 63]
.   .   .   Sibling: 9  Assign: <- of type (null) [line: 65]
.   .   .   .   Child: 0  Id: a of type int [line: 65]
.   .   .   .   Child: 1  Const 11 of type int [line: 65]
.   .   .   Sibling: 10  Assign: <- of type (null) [line: 66]
.   .   .   .   Child: 0  Id: b of type int [line: 66]
.   .   .   .   Child: 1  Const 12 of type int [line: 66]
.   .   .   Sibling: 11  Assign: <- of type (null) [line: 67]
.   .   .   .   Child: 0  Id: x of type int [line: 67]
.   .   .   .   Child: 1  Const 13 of type int [line: 67]
.   .   .   Sibling: 12  Assign: <- of type (null) [line: 68]
.   .   .   .   Child: 0  Id: y of type int [line: 68]
.   .   .   .   Child: 1  Const 14 of type int [line: 68]
.   .   .   Sibling: 13  Assign: <- of type (null) [line: 69]
.   .   .   .   Child: 0  Id: z of type int [line: 69]
.   .   .   .   Child: 1  Const 15 of type int [line: 69]
.   .   .   Sibling: 14  Call: output of type (null) [line: 70]
.   .   .   .   Child: 0  Id: a of type (null) [line: 70]
.   .   .   Sibling: 15  Call: output of type (null) [line: 71]
.   .   .   .   Child: 0  Id: b of type (null) [line: 71]
.   .   .   Sibling: 16  Call: output of type (null) [line: 72]
.   .   .   .   Child: 0  Id: x of type (null) [line: 72]
.   .   .   Sibling: 17  Call: output of type (null) [line: 73]
.   .   .   .   Child: 0  Id: y of type (null) [line: 73]
.   .   .   Sibling: 18  Call: output of type (null) [line: 74]
.   .   .   .   Child: 0  Id: z of type (null) [line: 74]
.   .   .   Sibling: 19  Call: outnl of type (null) [line: 75]
.   .   .   Sibling: 20  Compound [line: 76]
.   .   .   .   Child: 1  Call: output of type (null) [line: 77]
.   .   .   .   .   Child: 0  Id: a of type (null) [line: 77]
.   .   .   .   Sibling: 1  Call: output of type (null) [line: 78]
.   .   .   .   .   Child: 0  Id: b of type (null) [line: 78]
.   .   .   .   Sibling: 2  Call: output of type (null) [line: 79]
.   .   .   .   .   Child: 0  Id: x of type (null) [line: 79]
.   .   .   .   Sibling: 3  Call: output of type (null) [line: 80]
.   .   .   .   .   Child: 0  Id: y of type (null) [line: 80]
.   .   .   .   Sibling: 4  Call: output of type (null) [line: 81]
.   .   .   .   .   Child: 0  Id: z of type (null) [line: 81]
.   .   .   .   Sibling: 5  Call: outnl of type (null) [line: 82]
.   .   .   .   Sibling: 6  Assign: <- of type (null) [line: 84]
.   .   .   .   .   Child: 0  Id: a of type int [line: 84]
.   .   .   .   .   Child: 1  Const 16 of type int [line: 84]
.   .   .   .   Sibling: 7  Assign: <- of type (null) [line: 85]
.   .   .   .   .   Child: 0  Id: b of type int [line: 85]
.   .   .   .   .   Child: 1  Const 17 of type int [line: 85]
.   .   .   .   Sibling: 8  Assign: <- of type (null) [line: 86]
.   .   .   .   .   Child: 0  Id: x of type int [line: 86]
.   .   .   .   .   Child: 1  Const 18 of type int [line: 86]
.   .   .   .   Sibling: 9  Assign: <- of type (null) [line: 87]
.   .   .   .   .   Child: 0  Id: y of type int [line: 87]
.   .   .   .   .   Child: 1  Const 19 of type int [line: 87]
.   .   .   .   Sibling: 10  Assign: <- of type (null) [line: 88]
.   .   .   .   .   Child: 0  Id: z of type int [line: 88]
.   .   .   .   .   Child: 1  Const 20 of type int [line: 88]
.   .   .   .   Sibling: 11  Call: output of type (null) [line: 89]
.   .   .   .   .   Child: 0  Id: a of type (null) [line: 89]
.   .   .   .   Sibling: 12  Call: output of type (null) [line: 90]
.   .   .   .   .   Child: 0  Id: b of type (null) [line: 90]
.   .   .   .   Sibling: 13  Call: output of type (null) [line: 91]
.   .   .   .   .   Child: 0  Id: x of type (null) [line: 91]
.   .   .   .   Sibling: 14  Call: output of type (null) [line: 92]
.   .   .   .   .   Child: 0  Id: y of type (null) [line: 92]
.   .   .   .   Sibling: 15  Call: output of type (null) [line: 93]
.   .   .   .   .   Child: 0  Id: z of type (null) [line: 93]
.   .   .   .   Sibling: 16  Call: outnl of type (null) [line: 94]
.   .   .   Sibling: 21  Call: output of type (null) [line: 97]
.   .   .   .   Child: 0  Id: a of type (null) [line: 97]
.   .   .   Sibling: 22  Call: output of type (null) [line: 98]
.   .   .   .   Child: 0  Id: b of type (null) [line: 98]
.   .   .   Sibling: 23  Call: output of type (null) [line: 99]
.   .   .   .   Child: 0  Id: x of type (null) [line: 99]
.   .   .   Sibling: 24  Call: output of type (null) [line: 100]
.   .   .   .   Child: 0  Id: y of type (null) [line: 100]
.   .   .   Sibling: 25  Call: output of type (null) [line: 101]
.   .   .   .   Child: 0  Id: z of type (null) [line: 101]
.   .   .   Sibling: 26  Call: outnl of type (null) [line: 102]
.   .   .   Sibling: 27  Call: agamemnon of type void [line: 104]
.   .   .   Sibling: 28  Call: output of type (null) [line: 106]
.   .   .   .   Child: 0  Id: a of type (null) [line: 106]
.   .   .   Sibling: 29  Call: output of type (null) [line: 107]
.   .   .   .   Child: 0  Id: b of type (null) [line: 107]
.   .   .   Sibling: 30  Call: output of type (null) [line: 108]
.   .   .   .   Child: 0  Id: x of type (null) [line: 108]
.   .   .   Sibling: 31  Call: output of type (null) [line: 109]
.   .   .   .   Child: 0  Id: y of type (null) [line: 109]
.   .   .   Sibling: 32  Call: output of type (null) [line: 110]
.   .   .   .   Child: 0  Id: z of type (null) [line: 110]
.   .   .   Sibling: 33  Call: outnl of type (null) [line: 111]
Number of warnings: 0
Number of errors: 75

==============
==============
./c- -P ops.c-
ERROR(14) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(14) : Cannot index nonarray 'y'.
ERROR(15) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(15) : Cannot index nonarray 'y'.
ERROR(16) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(16) : Cannot index nonarray 'y'.
ERROR(18) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(19) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(20) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(22) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(23) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(25) : Symbol 'outputb' is not declared.
ERROR(26) : Symbol 'outputb' is not declared.
ERROR(27) : Symbol 'outputb' is not declared.
ERROR(28) : Symbol 'outnl' is not declared.
ERROR(30) : Symbol 'outputb' is not declared.
ERROR(31) : Symbol 'outputb' is not declared.
ERROR(32) : Symbol 'outputb' is not declared.
ERROR(33) : Symbol 'outnl' is not declared.
ERROR(35) : Symbol 'outputb' is not declared.
ERROR(36) : Symbol 'outputb' is not declared.
ERROR(37) : Symbol 'outputb' is not declared.
ERROR(38) : Symbol 'outnl' is not declared.
ERROR(40) : Symbol 'outputb' is not declared.
ERROR(41) : Symbol 'outputb' is not declared.
ERROR(42) : Symbol 'outputb' is not declared.
ERROR(43) : Symbol 'outnl' is not declared.
ERROR(45) : Symbol 'outputb' is not declared.
ERROR(46) : Symbol 'outputb' is not declared.
ERROR(47) : Symbol 'outputb' is not declared.
ERROR(48) : Symbol 'outnl' is not declared.
ERROR(50) : Symbol 'outputb' is not declared.
ERROR(51) : Symbol 'outputb' is not declared.
ERROR(52) : Symbol 'outputb' is not declared.
ERROR(53) : Symbol 'outputb' is not declared.
ERROR(54) : Symbol 'outnl' is not declared.
ERROR(56) : Symbol 'outputb' is not declared.
ERROR(57) : Symbol 'outputb' is not declared.
ERROR(58) : Symbol 'outputb' is not declared.
ERROR(59) : Symbol 'outputb' is not declared.
ERROR(60) : Symbol 'outnl' is not declared.
ERROR(62) : Symbol 'outputb' is not declared.
ERROR(63) : Symbol 'outputb' is not declared.
ERROR(64) : Symbol 'outputb' is not declared.
ERROR(65) : Symbol 'outputb' is not declared.
ERROR(66) : Symbol 'outnl' is not declared.
ERROR(68) : Symbol 'outputb' is not declared.
ERROR(69) : Symbol 'outputb' is not declared.
ERROR(70) : Symbol 'outputb' is not declared.
ERROR(71) : Symbol 'outputb' is not declared.
ERROR(72) : Symbol 'outnl' is not declared.
ERROR(74) : Symbol 'output' is not declared.
ERROR(75) : Symbol 'output' is not declared.
ERROR(76) : Symbol 'outnl' is not declared.
ERROR(78) : Symbol 'output' is not declared.
ERROR(79) : Symbol 'output' is not declared.
ERROR(80) : Symbol 'outnl' is not declared.
ERROR(82) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(83) : Symbol 'output' is not declared.
ERROR(84) : Symbol 'output' is not declared.
ERROR(85) : Symbol 'output' is not declared.
ERROR(86) : Symbol 'output' is not declared.
ERROR(87) : Symbol 'output' is not declared.
ERROR(88) : Symbol 'outnl' is not declared.
ERROR(90) : Symbol 'output' is not declared.
ERROR(91) : Symbol 'output' is not declared.
ERROR(92) : Symbol 'output' is not declared.
ERROR(93) : Symbol 'outnl' is not declared.
ERROR(95) : Symbol 'output' is not declared.
ERROR(96) : Symbol 'output' is not declared.
ERROR(97) : Symbol 'output' is not declared.
ERROR(98) : Symbol 'output' is not declared.
ERROR(99) : Symbol 'outnl' is not declared.
ERROR(102) : Symbol 'output' is not declared.
ERROR(103) : Symbol 'output' is not declared.
ERROR(104) : Symbol 'output' is not declared.
ERROR(105) : Symbol 'output' is not declared.
ERROR(106) : Symbol 'output' is not declared.
ERROR(107) : Symbol 'output' is not declared.
ERROR(108) : Symbol 'outnl' is not declared.
ERROR(110) : Symbol 'output' is not declared.
ERROR(111) : Symbol 'output' is not declared.
ERROR(112) : '*' requires operands of type int but lhs is of type (null).
ERROR(112) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(112) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(113) : Symbol 'output' is not declared.
ERROR(114) : Symbol 'outnl' is not declared.
ERROR(116) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(117) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(118) : Symbol 'output' is not declared.
ERROR(119) : Symbol 'output' is not declared.
ERROR(120) : Symbol 'output' is not declared.
ERROR(121) : Symbol 'output' is not declared.
ERROR(122) : Symbol 'outnl' is not declared.
ERROR(124) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(125) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(126) : Symbol 'output' is not declared.
ERROR(127) : Symbol 'output' is not declared.
ERROR(128) : Symbol 'output' is not declared.
ERROR(129) : Symbol 'output' is not declared.
ERROR(130) : Symbol 'outnl' is not declared.
ERROR(132) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(133) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(134) : Symbol 'output' is not declared.
ERROR(135) : Symbol 'output' is not declared.
ERROR(136) : Symbol 'outnl' is not declared.
ERROR(138) : Symbol 'output' is not declared.
ERROR(139) : Symbol 'output' is not declared.
ERROR(140) : Symbol 'output' is not declared.
ERROR(141) : Symbol 'outnl' is not declared.
ERROR(143) : Symbol 'outputb' is not declared.
ERROR(144) : Symbol 'outputb' is not declared.
ERROR(145) : Symbol 'outputb' is not declared.
ERROR(146) : Symbol 'outnl' is not declared.
ERROR(148) : Symbol 'outputb' is not declared.
ERROR(149) : Symbol 'outputb' is not declared.
ERROR(150) : Symbol 'outputb' is not declared.
ERROR(151) : Symbol 'outputb' is not declared.
ERROR(152) : Symbol 'outputb' is not declared.
ERROR(153) : Symbol 'outputb' is not declared.
ERROR(154) : Symbol 'outputb' is not declared.
ERROR(155) : Symbol 'outputb' is not declared.
ERROR(156) : Symbol 'outputb' is not declared.
ERROR(157) : Symbol 'outputb' is not declared.
ERROR(158) : Symbol 'outputb' is not declared.
ERROR(159) : Symbol 'outputb' is not declared.
ERROR(160) : Symbol 'outputb' is not declared.
ERROR(161) : Symbol 'outnl' is not declared.
ERROR(163) : Symbol 'outputb' is not declared.
ERROR(164) : Symbol 'outputb' is not declared.
ERROR(165) : Symbol 'outnl' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
                   x:  
                   y:  
Scope: main            -----------------
                   a:  
                   b:  
                   c:  
                   z:  
===========  ============  ===========
Var: y of array of type int [line: 4]
Sibling: 1  Var: x of type bool [line: 5]
Sibling: 2  Func: main returns type void [line: 7]
.   Child: 1  Compound [line: 8]
.   .   Child: 0  Var: a of type int [line: 9]
.   .   Sibling: 1  Var: b of type int [line: 10]
.   .   Sibling: 2  Var: c of type int [line: 11]
.   .   Sibling: 3  Var: z of type bool [line: 12]
.   .   Child: 1  Assign: <- of type (null) [line: 14]
.   .   .   Child: 0  Op: [ of type (null) [line: 14]
.   .   .   .   Child: 0  Id: y of type int [line: 14]
.   .   .   .   Child: 1  Const 0 of type int [line: 14]
.   .   .   Child: 1  Const 50 of type int [line: 14]
.   .   Sibling: 1  Assign: <- of type (null) [line: 15]
.   .   .   Child: 0  Op: [ of type (null) [line: 15]
.   .   .   .   Child: 0  Id: y of type int [line: 15]
.   .   .   .   Child: 1  Const 5 of type int [line: 15]
.   .   .   Child: 1  Const 1 of type int [line: 15]
.   .   Sibling: 2  Assign: <- of type (null) [line: 16]
.   .   .   Child: 0  Op: [ of type (null) [line: 16]
.   .   .   .   Child: 0  Id: y of type int [line: 16]
.   .   .   .   Child: 1  Const 8 of type int [line: 16]
.   .   .   Child: 1  Const 2 of type int [line: 16]
.   .   Sibling: 3  Assign: <- of type (null) [line: 18]
.   .   .   Child: 0  Id: a of type int [line: 18]
.   .   .   Child: 1  Const 50 of type int [line: 18]
.   .   Sibling: 4  Assign: <- of type (null) [line: 19]
.   .   .   Child: 0  Id: b of type int [line: 19]
.   .   .   Child: 1  Const 1 of type int [line: 19]
.   .   Sibling: 5  Assign: <- of type (null) [line: 20]
.   .   .   Child: 0  Id: c of type int [line: 20]
.   .   .   Child: 1  Const 8 of type int [line: 20]
.   .   Sibling: 6  Assign: <- of type (null) [line: 22]
.   .   .   Child: 0  Id: x of type bool [line: 22]
.   .   .   Child: 1  Const false of type bool [line: 22]
.   .   Sibling: 7  Assign: <- of type (null) [line: 23]
.   .   .   Child: 0  Id: z of type bool [line: 23]
.   .   .   Child: 1  Const true of type bool [line: 23]
.   .   Sibling: 8  Call: outputb of type (null) [line: 25]
.   .   .   Child: 0  Op: <= of type (null) [line: 25]
.   .   .   .   Child: 0  Id: a of type (null) [line: 25]
.   .   .   .   Child: 1  Const 1 of type int [line: 25]
.   .   Sibling: 9  Call: outputb of type (null) [line: 26]
.   .   .   Child: 0  Op: <= of type (null) [line: 26]
.   .   .   .   Child: 0  Id: b of type (null) [line: 26]
.   .   .   .   Child: 1  Const 50 of type int [line: 26]
.   .   Sibling: 10  Call: outputb of type (null) [line: 27]
.   .   .   Child: 0  Op: <= of type (null) [line: 27]
.   .   .   .   Child: 0  Const 50 of type int [line: 27]
.   .   .   .   Child: 1  Const 50 of type int [line: 27]
.   .   Sibling: 11  Call: outnl of type (null) [line: 28]
.   .   Sibling: 12  Call: outputb of type (null) [line: 30]
.   .   .   Child: 0  Op: < of type (null) [line: 30]
.   .   .   .   Child: 0  Const 50 of type int [line: 30]
.   .   .   .   Child: 1  Const 1 of type int [line: 30]
.   .   Sibling: 13  Call: outputb of type (null) [line: 31]
.   .   .   Child: 0  Op: < of type (null) [line: 31]
.   .   .   .   Child: 0  Id: b of type (null) [line: 31]
.   .   .   .   Child: 1  Id: a of type (null) [line: 31]
.   .   Sibling: 14  Call: outputb of type (null) [line: 32]
.   .   .   Child: 0  Op: < of type (null) [line: 32]
.   .   .   .   Child: 0  Id: a of type (null) [line: 32]
.   .   .   .   Child: 1  Id: a of type (null) [line: 32]
.   .   Sibling: 15  Call: outnl of type (null) [line: 33]
.   .   Sibling: 16  Call: outputb of type (null) [line: 35]
.   .   .   Child: 0  Op: > of type (null) [line: 35]
.   .   .   .   Child: 0  Const 50 of type int [line: 35]
.   .   .   .   Child: 1  Const 1 of type int [line: 35]
.   .   Sibling: 17  Call: outputb of type (null) [line: 36]
.   .   .   Child: 0  Op: > of type (null) [line: 36]
.   .   .   .   Child: 0  Const 1 of type int [line: 36]
.   .   .   .   Child: 1  Const 50 of type int [line: 36]
.   .   Sibling: 18  Call: outputb of type (null) [line: 37]
.   .   .   Child: 0  Op: > of type (null) [line: 37]
.   .   .   .   Child: 0  Const 50 of type int [line: 37]
.   .   .   .   Child: 1  Const 50 of type int [line: 37]
.   .   Sibling: 19  Call: outnl of type (null) [line: 38]
.   .   Sibling: 20  Call: outputb of type (null) [line: 40]
.   .   .   Child: 0  Op: >= of type (null) [line: 40]
.   .   .   .   Child: 0  Const 50 of type int [line: 40]
.   .   .   .   Child: 1  Const 1 of type int [line: 40]
.   .   Sibling: 21  Call: outputb of type (null) [line: 41]
.   .   .   Child: 0  Op: >= of type (null) [line: 41]
.   .   .   .   Child: 0  Const 1 of type int [line: 41]
.   .   .   .   Child: 1  Const 50 of type int [line: 41]
.   .   Sibling: 22  Call: outputb of type (null) [line: 42]
.   .   .   Child: 0  Op: >= of type (null) [line: 42]
.   .   .   .   Child: 0  Const 50 of type int [line: 42]
.   .   .   .   Child: 1  Const 50 of type int [line: 42]
.   .   Sibling: 23  Call: outnl of type (null) [line: 43]
.   .   Sibling: 24  Call: outputb of type (null) [line: 45]
.   .   .   Child: 0  Op: = of type (null) [line: 45]
.   .   .   .   Child: 0  Op: [ of type (null) [line: 45]
.   .   .   .   .   Child: 0  Id: y of type (null) [line: 45]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 45]
.   .   .   .   Child: 1  Id: b of type (null) [line: 45]
.   .   Sibling: 25  Call: outputb of type (null) [line: 46]
.   .   .   Child: 0  Op: = of type (null) [line: 46]
.   .   .   .   Child: 0  Id: a of type (null) [line: 46]
.   .   .   .   Child: 1  Id: b of type (null) [line: 46]
.   .   Sibling: 26  Call: outputb of type (null) [line: 47]
.   .   .   Child: 0  Op: = of type (null) [line: 47]
.   .   .   .   Child: 0  Id: b of type (null) [line: 47]
.   .   .   .   Child: 1  Id: b of type (null) [line: 47]
.   .   Sibling: 27  Call: outnl of type (null) [line: 48]
.   .   Sibling: 28  Call: outputb of type (null) [line: 50]
.   .   .   Child: 0  Op: != of type (null) [line: 50]
.   .   .   .   Child: 0  Op: [ of type (null) [line: 50]
.   .   .   .   .   Child: 0  Id: y of type (null) [line: 50]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 50]
.   .   .   .   Child: 1  Id: a of type (null) [line: 50]
.   .   Sibling: 29  Call: outputb of type (null) [line: 51]
.   .   .   Child: 0  Op: != of type (null) [line: 51]
.   .   .   .   Child: 0  Op: [ of type (null) [line: 51]
.   .   .   .   .   Child: 0  Id: y of type (null) [line: 51]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 51]
.   .   .   .   Child: 1  Id: b of type (null) [line: 51]
.   .   Sibling: 30  Call: outputb of type (null) [line: 52]
.   .   .   Child: 0  Op: != of type (null) [line: 52]
.   .   .   .   Child: 0  Id: a of type (null) [line: 52]
.   .   .   .   Child: 1  Id: b of type (null) [line: 52]
.   .   Sibling: 31  Call: outputb of type (null) [line: 53]
.   .   .   Child: 0  Op: != of type (null) [line: 53]
.   .   .   .   Child: 0  Id: b of type (null) [line: 53]
.   .   .   .   Child: 1  Id: b of type (null) [line: 53]
.   .   Sibling: 32  Call: outnl of type (null) [line: 54]
.   .   Sibling: 33  Call: outputb of type (null) [line: 56]
.   .   .   Child: 0  Op: and of type (null) [line: 56]
.   .   .   .   Child: 0  Const true of type bool [line: 56]
.   .   .   .   Child: 1  Const true of type bool [line: 56]
.   .   Sibling: 34  Call: outputb of type (null) [line: 57]
.   .   .   Child: 0  Op: and of type (null) [line: 57]
.   .   .   .   Child: 0  Const true of type bool [line: 57]
.   .   .   .   Child: 1  Const false of type bool [line: 57]
.   .   Sibling: 35  Call: outputb of type (null) [line: 58]
.   .   .   Child: 0  Op: and of type (null) [line: 58]
.   .   .   .   Child: 0  Const false of type bool [line: 58]
.   .   .   .   Child: 1  Const true of type bool [line: 58]
.   .   Sibling: 36  Call: outputb of type (null) [line: 59]
.   .   .   Child: 0  Op: and of type (null) [line: 59]
.   .   .   .   Child: 0  Const false of type bool [line: 59]
.   .   .   .   Child: 1  Const false of type bool [line: 59]
.   .   Sibling: 37  Call: outnl of type (null) [line: 60]
.   .   Sibling: 38  Call: outputb of type (null) [line: 62]
.   .   .   Child: 0  Op: or of type (null) [line: 62]
.   .   .   .   Child: 0  Const true of type bool [line: 62]
.   .   .   .   Child: 1  Const true of type bool [line: 62]
.   .   Sibling: 39  Call: outputb of type (null) [line: 63]
.   .   .   Child: 0  Op: or of type (null) [line: 63]
.   .   .   .   Child: 0  Id: z of type (null) [line: 63]
.   .   .   .   Child: 1  Const false of type bool [line: 63]
.   .   Sibling: 40  Call: outputb of type (null) [line: 64]
.   .   .   Child: 0  Op: or of type (null) [line: 64]
.   .   .   .   Child: 0  Const false of type bool [line: 64]
.   .   .   .   Child: 1  Const true of type bool [line: 64]
.   .   Sibling: 41  Call: outputb of type (null) [line: 65]
.   .   .   Child: 0  Op: or of type (null) [line: 65]
.   .   .   .   Child: 0  Const false of type bool [line: 65]
.   .   .   .   Child: 1  Const false of type bool [line: 65]
.   .   Sibling: 42  Call: outnl of type (null) [line: 66]
.   .   Sibling: 43  Call: outputb of type (null) [line: 68]
.   .   .   Child: 0  Op: not of type (null) [line: 68]
.   .   .   .   Child: 0  Const true of type bool [line: 68]
.   .   Sibling: 44  Call: outputb of type (null) [line: 69]
.   .   .   Child: 0  Op: not of type (null) [line: 69]
.   .   .   .   Child: 0  Const false of type bool [line: 69]
.   .   Sibling: 45  Call: outputb of type (null) [line: 70]
.   .   .   Child: 0  Op: not of type (null) [line: 70]
.   .   .   .   Child: 0  Id: x of type (null) [line: 70]
.   .   Sibling: 46  Call: outputb of type (null) [line: 71]
.   .   .   Child: 0  Op: not of type (null) [line: 71]
.   .   .   .   Child: 0  Op: not of type (null) [line: 71]
.   .   .   .   .   Child: 0  Op: not of type (null) [line: 71]
.   .   .   .   .   .   Child: 0  Id: x of type (null) [line: 71]
.   .   Sibling: 47  Call: outnl of type (null) [line: 72]
.   .   Sibling: 48  Call: output of type (null) [line: 74]
.   .   .   Child: 0  Op: + of type (null) [line: 74]
.   .   .   .   Child: 0  Const 5 of type int [line: 74]
.   .   .   .   Child: 1  Const 50 of type int [line: 74]
.   .   Sibling: 49  Call: output of type (null) [line: 75]
.   .   .   Child: 0  Op: + of type (null) [line: 75]
.   .   .   .   Child: 0  Op: [ of type (null) [line: 75]
.   .   .   .   .   Child: 0  Id: y of type (null) [line: 75]
.   .   .   .   .   Child: 1  Id: c of type (null) [line: 75]
.   .   .   .   Child: 1  Const 50 of type int [line: 75]
.   .   Sibling: 50  Call: outnl of type (null) [line: 76]
.   .   Sibling: 51  Call: output of type (null) [line: 78]
.   .   .   Child: 0  Op: - of type (null) [line: 78]
.   .   .   .   Child: 0  Const 5 of type int [line: 78]
.   .   .   .   Child: 1  Const 50 of type int [line: 78]
.   .   Sibling: 52  Call: output of type (null) [line: 79]
.   .   .   Child: 0  Op: - of type (null) [line: 79]
.   .   .   .   Child: 0  Op: - of type (null) [line: 79]
.   .   .   .   .   Child: 0  Const 30 of type int [line: 79]
.   .   .   .   .   Child: 1  Const 5 of type int [line: 79]
.   .   .   .   Child: 1  Const 50 of type int [line: 79]
.   .   Sibling: 53  Call: outnl of type (null) [line: 80]
.   .   Sibling: 54  Assign: <- of type (null) [line: 82]
.   .   .   Child: 0  Id: a of type int [line: 82]
.   .   .   Child: 1  Const 50 of type int [line: 82]
.   .   Sibling: 55  Call: output of type (null) [line: 83]
.   .   .   Child: 0  Op: chsign of type (null) [line: 83]
.   .   .   .   Child: 0  Id: a of type (null) [line: 83]
.   .   Sibling: 56  Call: output of type (null) [line: 84]
.   .   .   Child: 0  Op: chsign of type (null) [line: 84]
.   .   .   .   Child: 0  Op: chsign of type (null) [line: 84]
.   .   .   .   .   Child: 0  Id: a of type (null) [line: 84]
.   .   Sibling: 57  Call: output of type (null) [line: 85]
.   .   .   Child: 0  Op: chsign of type (null) [line: 85]
.   .   .   .   Child: 0  Id: a of type (null) [line: 85]
.   .   Sibling: 58  Call: output of type (null) [line: 86]
.   .   .   Child: 0  Op: chsign of type (null) [line: 86]
.   .   .   .   Child: 0  Const 0 of type int [line: 86]
.   .   Sibling: 59  Call: output of type (null) [line: 87]
.   .   .   Child: 0  Op: chsign of type (null) [line: 87]
.   .   .   .   Child: 0  Const 1 of type int [line: 87]
.   .   Sibling: 60  Call: outnl of type (null) [line: 88]
.   .   Sibling: 61  Call: output of type (null) [line: 90]
.   .   .   Child: 0  Op: * of type (null) [line: 90]
.   .   .   .   Child: 0  Op: * of type (null) [line: 90]
.   .   .   .   .   Child: 0  Op: * of type (null) [line: 90]
.   .   .   .   .   .   Child: 0  Op: * of type (null) [line: 90]
.   .   .   .   .   .   .   Child: 0  Const 2 of type int [line: 90]
.   .   .   .   .   .   .   Child: 1  Const 3 of type int [line: 90]
.   .   .   .   .   .   Child: 1  Const 5 of type int [line: 90]
.   .   .   .   .   Child: 1  Const 7 of type int [line: 90]
.   .   .   .   Child: 1  Const 11 of type int [line: 90]
.   .   Sibling: 62  Call: output of type (null) [line: 91]
.   .   .   Child: 0  Op: * of type (null) [line: 91]
.   .   .   .   Child: 0  Const 50 of type int [line: 91]
.   .   .   .   Child: 1  Op: [ of type (null) [line: 91]
.   .   .   .   .   Child: 0  Id: y of type (null) [line: 91]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 91]
.   .   Sibling: 63  Call: output of type (null) [line: 92]
.   .   .   Child: 0  Op: * of type (null) [line: 92]
.   .   .   .   Child: 0  Op: [ of type (null) [line: 92]
.   .   .   .   .   Child: 0  Id: y of type (null) [line: 92]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 92]
.   .   .   .   Child: 1  Const 50 of type int [line: 92]
.   .   Sibling: 64  Call: outnl of type (null) [line: 93]
.   .   Sibling: 65  Call: output of type (null) [line: 95]
.   .   .   Child: 0  Op: / of type (null) [line: 95]
.   .   .   .   Child: 0  Const 50 of type int [line: 95]
.   .   .   .   Child: 1  Op: [ of type (null) [line: 95]
.   .   .   .   .   Child: 0  Id: y of type (null) [line: 95]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 95]
.   .   Sibling: 66  Call: output of type (null) [line: 96]
.   .   .   Child: 0  Op: / of type (null) [line: 96]
.   .   .   .   Child: 0  Op: [ of type (null) [line: 96]
.   .   .   .   .   Child: 0  Id: y of type (null) [line: 96]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 96]
.   .   .   .   Child: 1  Const 50 of type int [line: 96]
.   .   Sibling: 67  Call: output of type (null) [line: 97]
.   .   .   Child: 0  Op: / of type (null) [line: 97]
.   .   .   .   Child: 0  Op: [ of type (null) [line: 97]
.   .   .   .   .   Child: 0  Id: y of type (null) [line: 97]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 97]
.   .   .   .   Child: 1  Id: b of type (null) [line: 97]
.   .   Sibling: 68  Call: output of type (null) [line: 98]
.   .   .   Child: 0  Op: / of type (null) [line: 98]
.   .   .   .   Child: 0  Op: / of type (null) [line: 98]
.   .   .   .   .   Child: 0  Const 210 of type int [line: 98]
.   .   .   .   .   Child: 1  Const 7 of type int [line: 98]
.   .   .   .   Child: 1  Const 3 of type int [line: 98]
.   .   Sibling: 69  Call: outnl of type (null) [line: 99]
.   .   Sibling: 70  Call: output of type (null) [line: 102]
.   .   .   Child: 0  Op: % of type (null) [line: 102]
.   .   .   .   Child: 0  Const 211 of type int [line: 102]
.   .   .   .   Child: 1  Const 7 of type int [line: 102]
.   .   Sibling: 71  Call: output of type (null) [line: 103]
.   .   .   Child: 0  Op: % of type (null) [line: 103]
.   .   .   .   Child: 0  Const 211 of type int [line: 103]
.   .   .   .   Child: 1  Const 6 of type int [line: 103]
.   .   Sibling: 72  Call: output of type (null) [line: 104]
.   .   .   Child: 0  Op: % of type (null) [line: 104]
.   .   .   .   Child: 0  Const 211 of type int [line: 104]
.   .   .   .   Child: 1  Const 5 of type int [line: 104]
.   .   Sibling: 73  Call: output of type (null) [line: 105]
.   .   .   Child: 0  Op: % of type (null) [line: 105]
.   .   .   .   Child: 0  Const 211 of type int [line: 105]
.   .   .   .   Child: 1  Const 4 of type int [line: 105]
.   .   Sibling: 74  Call: output of type (null) [line: 106]
.   .   .   Child: 0  Op: - of type (null) [line: 106]
.   .   .   .   Child: 0  Const 211 of type int [line: 106]
.   .   .   .   Child: 1  Op: * of type (null) [line: 106]
.   .   .   .   .   Child: 0  Op: / of type (null) [line: 106]
.   .   .   .   .   .   Child: 0  Const 211 of type int [line: 106]
.   .   .   .   .   .   Child: 1  Const 4 of type int [line: 106]
.   .   .   .   .   Child: 1  Const 4 of type int [line: 106]
.   .   Sibling: 75  Call: output of type (null) [line: 107]
.   .   .   Child: 0  Op: % of type (null) [line: 107]
.   .   .   .   Child: 0  Op: % of type (null) [line: 107]
.   .   .   .   .   Child: 0  Const 211 of type int [line: 107]
.   .   .   .   .   Child: 1  Const 100 of type int [line: 107]
.   .   .   .   Child: 1  Const 3 of type int [line: 107]
.   .   Sibling: 76  Call: outnl of type (null) [line: 108]
.   .   Sibling: 77  Call: output of type (null) [line: 110]
.   .   .   Child: 0  Assign: <- of type (null) [line: 110]
.   .   .   .   Child: 0  Id: a of type (null) [line: 110]
.   .   .   .   Child: 1  Assign: <- of type (null) [line: 110]
.   .   .   .   .   Child: 0  Id: b of type (null) [line: 110]
.   .   .   .   .   Child: 1  Assign: <- of type (null) [line: 110]
.   .   .   .   .   .   Child: 0  Id: c of type (null) [line: 110]
.   .   .   .   .   .   Child: 1  Const 43 of type int [line: 110]
.   .   Sibling: 78  Call: output of type (null) [line: 111]
.   .   .   Child: 0  Id: a of type (null) [line: 111]
.   .   Sibling: 79  Assign: <- of type (null) [line: 112]
.   .   .   Child: 0  Id: a of type int [line: 112]
.   .   .   Child: 1  Op: * of type (null) [line: 112]
.   .   .   .   Child: 0  Assign: <- of type (null) [line: 112]
.   .   .   .   .   Child: 0  Id: b of type int [line: 112]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 112]
.   .   .   .   Child: 1  Assign: <- of type (null) [line: 112]
.   .   .   .   .   Child: 0  Id: c of type int [line: 112]
.   .   .   .   .   Child: 1  Const 4 of type int [line: 112]
.   .   Sibling: 80  Call: output of type (null) [line: 113]
.   .   .   Child: 0  Id: a of type (null) [line: 113]
.   .   Sibling: 81  Call: outnl of type (null) [line: 114]
.   .   Sibling: 82  Assign: <- of type (null) [line: 116]
.   .   .   Child: 0  Id: a of type int [line: 116]
.   .   .   Child: 1  Const 44 of type int [line: 116]
.   .   Sibling: 83  Assign: <- of type (null) [line: 117]
.   .   .   Child: 0  Id: b of type int [line: 117]
.   .   .   Child: 1  Const 2 of type int [line: 117]
.   .   Sibling: 84  Call: output of type (null) [line: 118]
.   .   .   Child: 0  Assign: += of type (null) [line: 118]
.   .   .   .   Child: 0  Id: a of type (null) [line: 118]
.   .   .   .   Child: 1  Id: b of type (null) [line: 118]
.   .   Sibling: 85  Call: output of type (null) [line: 119]
.   .   .   Child: 0  Assign: -= of type (null) [line: 119]
.   .   .   .   Child: 0  Id: a of type (null) [line: 119]
.   .   .   .   Child: 1  Id: b of type (null) [line: 119]
.   .   Sibling: 86  Call: output of type (null) [line: 120]
.   .   .   Child: 0  Assign: -= of type (null) [line: 120]
.   .   .   .   Child: 0  Id: a of type (null) [line: 120]
.   .   .   .   Child: 1  Id: a of type (null) [line: 120]
.   .   Sibling: 87  Call: output of type (null) [line: 121]
.   .   .   Child: 0  Assign: += of type (null) [line: 121]
.   .   .   .   Child: 0  Id: a of type (null) [line: 121]
.   .   .   .   Child: 1  Assign: += of type (null) [line: 121]
.   .   .   .   .   Child: 0  Id: b of type (null) [line: 121]
.   .   .   .   .   Child: 1  Const 10 of type int [line: 121]
.   .   Sibling: 88  Call: outnl of type (null) [line: 122]
.   .   Sibling: 89  Assign: <- of type (null) [line: 124]
.   .   .   Child: 0  Id: a of type int [line: 124]
.   .   .   Child: 1  Const 44 of type int [line: 124]
.   .   Sibling: 90  Assign: <- of type (null) [line: 125]
.   .   .   Child: 0  Id: b of type int [line: 125]
.   .   .   Child: 1  Const 2 of type int [line: 125]
.   .   Sibling: 91  Call: output of type (null) [line: 126]
.   .   .   Child: 0  Assign: *= of type (null) [line: 126]
.   .   .   .   Child: 0  Id: a of type (null) [line: 126]
.   .   .   .   Child: 1  Id: b of type (null) [line: 126]
.   .   Sibling: 92  Call: output of type (null) [line: 127]
.   .   .   Child: 0  Assign: /= of type (null) [line: 127]
.   .   .   .   Child: 0  Id: a of type (null) [line: 127]
.   .   .   .   Child: 1  Id: b of type (null) [line: 127]
.   .   Sibling: 93  Call: output of type (null) [line: 128]
.   .   .   Child: 0  Assign: /= of type (null) [line: 128]
.   .   .   .   Child: 0  Id: a of type (null) [line: 128]
.   .   .   .   Child: 1  Assign: /= of type (null) [line: 128]
.   .   .   .   .   Child: 0  Id: a of type (null) [line: 128]
.   .   .   .   .   Child: 1  Const 2 of type int [line: 128]
.   .   Sibling: 94  Call: output of type (null) [line: 129]
.   .   .   Child: 0  Assign: *= of type (null) [line: 129]
.   .   .   .   Child: 0  Id: a of type (null) [line: 129]
.   .   .   .   Child: 1  Assign: *= of type (null) [line: 129]
.   .   .   .   .   Child: 0  Id: b of type (null) [line: 129]
.   .   .   .   .   Child: 1  Const 10 of type int [line: 129]
.   .   Sibling: 95  Call: outnl of type (null) [line: 130]
.   .   Sibling: 96  Assign: <- of type (null) [line: 132]
.   .   .   Child: 0  Id: a of type int [line: 132]
.   .   .   Child: 1  Const 44 of type int [line: 132]
.   .   Sibling: 97  Assign: <- of type (null) [line: 133]
.   .   .   Child: 0  Id: b of type int [line: 133]
.   .   .   Child: 1  Const 2 of type int [line: 133]
.   .   Sibling: 98  Call: output of type (null) [line: 134]
.   .   .   Child: 0  Assign: ++ of type (null) [line: 134]
.   .   .   .   Child: 0  Id: a of type (null) [line: 134]
.   .   Sibling: 99  Call: output of type (null) [line: 135]
.   .   .   Child: 0  Assign: -- of type (null) [line: 135]
.   .   .   .   Child: 0  Id: b of type (null) [line: 135]
.   .   Sibling: 100  Call: outnl of type (null) [line: 136]
.   .   Sibling: 101  Call: output of type (null) [line: 138]
.   .   .   Child: 0  Op: - of type (null) [line: 138]
.   .   .   .   Child: 0  Op: - of type (null) [line: 138]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 138]
.   .   .   .   .   Child: 1  Const 4 of type int [line: 138]
.   .   .   .   Child: 1  Const 5 of type int [line: 138]
.   .   Sibling: 102  Call: output of type (null) [line: 139]
.   .   .   Child: 0  Op: / of type (null) [line: 139]
.   .   .   .   Child: 0  Op: / of type (null) [line: 139]
.   .   .   .   .   Child: 0  Const 211 of type int [line: 139]
.   .   .   .   .   Child: 1  Const 17 of type int [line: 139]
.   .   .   .   Child: 1  Const 5 of type int [line: 139]
.   .   Sibling: 103  Call: output of type (null) [line: 140]
.   .   .   Child: 0  Op: / of type (null) [line: 140]
.   .   .   .   Child: 0  Const 211 of type int [line: 140]
.   .   .   .   Child: 1  Op: / of type (null) [line: 140]
.   .   .   .   .   Child: 0  Const 17 of type int [line: 140]
.   .   .   .   .   Child: 1  Const 5 of type int [line: 140]
.   .   Sibling: 104  Call: outnl of type (null) [line: 141]
.   .   Sibling: 105  Call: outputb of type (null) [line: 143]
.   .   .   Child: 0  Op: and of type (null) [line: 143]
.   .   .   .   Child: 0  Op: or of type (null) [line: 143]
.   .   .   .   .   Child: 0  Const true of type bool [line: 143]
.   .   .   .   .   Child: 1  Const false of type bool [line: 143]
.   .   .   .   Child: 1  Const false of type bool [line: 143]
.   .   Sibling: 106  Call: outputb of type (null) [line: 144]
.   .   .   Child: 0  Op: or of type (null) [line: 144]
.   .   .   .   Child: 0  Const true of type bool [line: 144]
.   .   .   .   Child: 1  Op: and of type (null) [line: 144]
.   .   .   .   .   Child: 0  Const false of type bool [line: 144]
.   .   .   .   .   Child: 1  Const false of type bool [line: 144]
.   .   Sibling: 107  Call: outputb of type (null) [line: 145]
.   .   .   Child: 0  Op: or of type (null) [line: 145]
.   .   .   .   Child: 0  Const true of type bool [line: 145]
.   .   .   .   Child: 1  Op: and of type (null) [line: 145]
.   .   .   .   .   Child: 0  Const false of type bool [line: 145]
.   .   .   .   .   Child: 1  Const false of type bool [line: 145]
.   .   Sibling: 108  Call: outnl of type (null) [line: 146]
.   .   Sibling: 109  Call: outputb of type (null) [line: 148]
.   .   .   Child: 0  Op: < of type (null) [line: 148]
.   .   .   .   Child: 0  Op: ? of type (null) [line: 148]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 148]
.   .   .   .   Child: 1  Const 3 of type int [line: 148]
.   .   Sibling: 110  Call: outputb of type (null) [line: 149]
.   .   .   Child: 0  Op: < of type (null) [line: 149]
.   .   .   .   Child: 0  Op: ? of type (null) [line: 149]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 149]
.   .   .   .   Child: 1  Const 3 of type int [line: 149]
.   .   Sibling: 111  Call: outputb of type (null) [line: 150]
.   .   .   Child: 0  Op: < of type (null) [line: 150]
.   .   .   .   Child: 0  Op: ? of type (null) [line: 150]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 150]
.   .   .   .   Child: 1  Const 3 of type int [line: 150]
.   .   Sibling: 112  Call: outputb of type (null) [line: 151]
.   .   .   Child: 0  Op: < of type (null) [line: 151]
.   .   .   .   Child: 0  Op: ? of type (null) [line: 151]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 151]
.   .   .   .   Child: 1  Const 3 of type int [line: 151]
.   .   Sibling: 113  Call: outputb of type (null) [line: 152]
.   .   .   Child: 0  Op: < of type (null) [line: 152]
.   .   .   .   Child: 0  Op: ? of type (null) [line: 152]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 152]
.   .   .   .   Child: 1  Const 3 of type int [line: 152]
.   .   Sibling: 114  Call: outputb of type (null) [line: 153]
.   .   .   Child: 0  Op: < of type (null) [line: 153]
.   .   .   .   Child: 0  Op: ? of type (null) [line: 153]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 153]
.   .   .   .   Child: 1  Const 3 of type int [line: 153]
.   .   Sibling: 115  Call: outputb of type (null) [line: 154]
.   .   .   Child: 0  Op: < of type (null) [line: 154]
.   .   .   .   Child: 0  Op: ? of type (null) [line: 154]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 154]
.   .   .   .   Child: 1  Const 3 of type int [line: 154]
.   .   Sibling: 116  Call: outputb of type (null) [line: 155]
.   .   .   Child: 0  Op: < of type (null) [line: 155]
.   .   .   .   Child: 0  Op: ? of type (null) [line: 155]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 155]
.   .   .   .   Child: 1  Const 3 of type int [line: 155]
.   .   Sibling: 117  Call: outputb of type (null) [line: 156]
.   .   .   Child: 0  Op: < of type (null) [line: 156]
.   .   .   .   Child: 0  Op: ? of type (null) [line: 156]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 156]
.   .   .   .   Child: 1  Const 3 of type int [line: 156]
.   .   Sibling: 118  Call: outputb of type (null) [line: 157]
.   .   .   Child: 0  Op: < of type (null) [line: 157]
.   .   .   .   Child: 0  Op: ? of type (null) [line: 157]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 157]
.   .   .   .   Child: 1  Const 3 of type int [line: 157]
.   .   Sibling: 119  Call: outputb of type (null) [line: 158]
.   .   .   Child: 0  Op: < of type (null) [line: 158]
.   .   .   .   Child: 0  Op: ? of type (null) [line: 158]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 158]
.   .   .   .   Child: 1  Const 3 of type int [line: 158]
.   .   Sibling: 120  Call: outputb of type (null) [line: 159]
.   .   .   Child: 0  Op: < of type (null) [line: 159]
.   .   .   .   Child: 0  Op: ? of type (null) [line: 159]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 159]
.   .   .   .   Child: 1  Const 3 of type int [line: 159]
.   .   Sibling: 121  Call: outputb of type (null) [line: 160]
.   .   .   Child: 0  Op: = of type (null) [line: 160]
.   .   .   .   Child: 0  Op: ? of type (null) [line: 160]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 160]
.   .   .   .   Child: 1  Const 0 of type int [line: 160]
.   .   Sibling: 122  Call: outnl of type (null) [line: 161]
.   .   Sibling: 123  Call: outputb of type (null) [line: 163]
.   .   .   Child: 0  Op: > of type (null) [line: 163]
.   .   .   .   Child: 0  Op: ? of type (null) [line: 163]
.   .   .   .   .   Child: 0  Const 10000 of type int [line: 163]
.   .   .   .   Child: 1  Const 0 of type int [line: 163]
.   .   Sibling: 124  Call: outputb of type (null) [line: 164]
.   .   .   Child: 0  Op: > of type (null) [line: 164]
.   .   .   .   Child: 0  Op: ? of type (null) [line: 164]
.   .   .   .   .   Child: 0  Const 10000 of type int [line: 164]
.   .   .   .   Child: 1  Const 0 of type int [line: 164]
.   .   Sibling: 125  Call: outnl of type (null) [line: 165]
Number of warnings: 0
Number of errors: 128

==============
==============
./c- -P optype.c-
ERROR(17) : Symbol 'x' is not declared.
ERROR(18) : Symbol 'x' is not declared.
ERROR(19) : Symbol 'x' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   a:  
                   b:  
                   c:  
===========  ============  ===========
ID: a ParentID: <
yes, we found ID: a
ID: a ParentID: <
yes, we found ID: a
ID: a ParentID: <
yes, we found ID: a
ID: a ParentID: <
yes, we found ID: a
ID: a ParentID: <
yes, we found ID: a
ID: a ParentID: <
yes, we found ID: a
1 1 7
0 0 8
0 0 9
0 0 10
0 0 11
0 0 12
0 0 13
0 0 14
0 0 15
0 0 17
0 0 18
0 0 19
Func: main returns type void [line: 1]
.   Child: 1  Compound [line: 2]
.   .   Child: 0  Var: a of type int [line: 3]
.   .   Sibling: 1  Var: b of type bool [line: 4]
.   .   Sibling: 2  Var: c of type char [line: 5]
.   .   Child: 1  Op: < of type bool [line: 7]
.   .   .   Child: 0  Id: a of type int [line: 7]
.   .   .   Child: 1  Id: a of type int [line: 7]
.   .   Sibling: 1  Op: < of type (null) [line: 8]
.   .   .   Child: 0  Id: a of type int [line: 8]
.   .   .   Child: 1  Id: b of type bool [line: 8]
.   .   Sibling: 2  Op: < of type (null) [line: 9]
.   .   .   Child: 0  Id: a of type int [line: 9]
.   .   .   Child: 1  Id: c of type char [line: 9]
.   .   Sibling: 3  Op: < of type (null) [line: 10]
.   .   .   Child: 0  Id: b of type bool [line: 10]
.   .   .   Child: 1  Id: a of type int [line: 10]
.   .   Sibling: 4  Op: < of type (null) [line: 11]
.   .   .   Child: 0  Id: b of type bool [line: 11]
.   .   .   Child: 1  Id: b of type bool [line: 11]
.   .   Sibling: 5  Op: < of type (null) [line: 12]
.   .   .   Child: 0  Id: b of type bool [line: 12]
.   .   .   Child: 1  Id: c of type char [line: 12]
.   .   Sibling: 6  Op: < of type (null) [line: 13]
.   .   .   Child: 0  Id: c of type char [line: 13]
.   .   .   Child: 1  Id: a of type int [line: 13]
.   .   Sibling: 7  Op: < of type (null) [line: 14]
.   .   .   Child: 0  Id: c of type char [line: 14]
.   .   .   Child: 1  Id: b of type bool [line: 14]
.   .   Sibling: 8  Op: < of type (null) [line: 15]
.   .   .   Child: 0  Id: c of type char [line: 15]
.   .   .   Child: 1  Id: c of type char [line: 15]
.   .   Sibling: 9  Op: < of type (null) [line: 17]
.   .   .   Child: 0  Id: x of type (null) [line: 17]
.   .   .   Child: 1  Id: a of type int [line: 17]
.   .   Sibling: 10  Op: < of type (null) [line: 18]
.   .   .   Child: 0  Id: x of type (null) [line: 18]
.   .   .   Child: 1  Id: b of type bool [line: 18]
.   .   Sibling: 11  Op: < of type (null) [line: 19]
.   .   .   Child: 0  Id: x of type (null) [line: 19]
.   .   .   Child: 1  Id: c of type char [line: 19]
Number of warnings: 0
Number of errors: 3

==============
==============
./c- -P overlap.c-
===========  Symbol Table  ===========
Scope: Global          -----------------
                   g:  
                main: @G 
Scope: main            -----------------
                   h:  
                   p:  
===========  ============  ===========
Var: g of type int [line: 2]
Sibling: 1  Func: main returns type void [line: 4]
.   Child: 0  Parm: p of type int [line: 4]
.   Child: 1  Compound [line: 5]
.   .   Child: 0  Var: a of type int [line: 6]
.   .   Child: 1  Compound [line: 7]
.   .   .   Child: 0  Var: b of type int [line: 8]
.   .   Sibling: 1  Compound [line: 10]
.   .   .   Child: 0  Var: c of type int [line: 11]
.   .   Sibling: 2  Compound [line: 13]
.   .   .   Child: 1  Compound [line: 14]
.   .   .   .   Child: 0  Var: b of type int [line: 15]
.   .   .   Sibling: 1  Compound [line: 17]
.   .   .   .   Child: 0  Var: c of type int [line: 18]
Sibling: 2  Var: h of type int [line: 23]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P overlapArray.c-
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   p:  
===========  ============  ===========
Func: main returns type void [line: 2]
.   Child: 0  Parm: p of array of type int [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: a of array of type int [line: 4]
.   .   Child: 1  Compound [line: 5]
.   .   .   Child: 0  Var: b of array of type int [line: 6]
.   .   Sibling: 1  Compound [line: 8]
.   .   .   Child: 0  Var: c of array of type int [line: 9]
.   .   Sibling: 2  Compound [line: 11]
.   .   .   Child: 1  Compound [line: 12]
.   .   .   .   Child: 0  Var: b of array of type int [line: 13]
.   .   .   Sibling: 1  Compound [line: 15]
.   .   .   .   Child: 0  Var: c of array of type int [line: 16]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P overlapStatic.c-
===========  Symbol Table  ===========
Scope: Global          -----------------
                   g:  
                main: @W) 
Scope: main            -----------------
                   h:  
                   p:  
===========  ============  ===========
Var: g of type int [line: 2]
Sibling: 1  Func: main returns type void [line: 4]
.   Child: 0  Parm: p of type int [line: 4]
.   Child: 1  Compound [line: 5]
.   .   Child: 0  Var: a of static type int [line: 6]
.   .   Child: 1  Compound [line: 7]
.   .   .   Child: 0  Var: b of static type int [line: 8]
.   .   Sibling: 1  Compound [line: 10]
.   .   .   Child: 0  Var: c of static type int [line: 11]
.   .   Sibling: 2  Compound [line: 13]
.   .   .   Child: 1  Compound [line: 14]
.   .   .   .   Child: 0  Var: b of static type int [line: 15]
.   .   .   Sibling: 1  Compound [line: 17]
.   .   .   .   Child: 0  Var: c of static type int [line: 18]
Sibling: 2  Var: h of type int [line: 23]
Number of warnings: 0
Number of errors: 0

==============
==============
./c- -P part2.c-

==============
==============
./c- -P randomRoll.c-
ERROR(7) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(8) : '+=' requires operands of type int but lhs is of type (null).
ERROR(9) : Unary '++' requires an operand of type int but was given type (null).
ERROR(11) : Symbol 'outputb' is not declared.
ERROR(13) : Symbol 'outputb' is not declared.
ERROR(14) : Symbol 'outnl' is not declared.
ERROR(16) : Symbol 'outputb' is not declared.
ERROR(17) : Symbol 'outnl' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   i:  
                 sum:  
===========  ============  ===========
ID: i ParentID: <-
yes, we found ID: i
ID: i ParentID: <-
yes, we found ID: i
ID: i ParentID: <-
yes, we found ID: i
ID: sum ParentID: <-
yes, we found ID: sum
ID: sum ParentID: <-
yes, we found ID: sum
ID: sum ParentID: <-
yes, we found ID: sum
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: i of type int [line: 4]
.   .   Sibling: 1  Var: sum of type int [line: 4]
.   .   Child: 1  Assign: <- of type int [line: 6]
.   .   .   Child: 0  Id: i of type int [line: 6]
.   .   .   Child: 1  Assign: <- of type int [line: 6]
.   .   .   .   Child: 0  Id: sum of type int [line: 6]
.   .   .   .   Child: 1  Const 0 of type int [line: 6]
.   .   Sibling: 1  While [line: 7]
.   .   .   Child: 0  Op: < of type (null) [line: 7]
.   .   .   .   Child: 0  Id: i of type int [line: 7]
.   .   .   .   Child: 1  Const 1000 of type int [line: 7]
.   .   .   Child: 1  Compound [line: 7]
.   .   .   .   Child: 1  Assign: += of type (null) [line: 8]
.   .   .   .   .   Child: 0  Id: sum of type int [line: 8]
.   .   .   .   .   Child: 1  Op: ? of type (null) [line: 8]
.   .   .   .   .   .   Child: 0  Const 6 of type int [line: 8]
.   .   .   .   Sibling: 1  Assign: ++ of type (null) [line: 9]
.   .   .   .   .   Child: 0  Id: i of type int [line: 9]
.   .   Sibling: 2  Call: outputb of type (null) [line: 11]
.   .   .   Child: 0  Const true of type bool [line: 11]
.   .   Sibling: 3  Call: outputb of type (null) [line: 13]
.   .   .   Child: 0  Op: and of type (null) [line: 13]
.   .   .   .   Child: 0  Op: < of type (null) [line: 13]
.   .   .   .   .   Child: 0  Const 2300 of type int [line: 13]
.   .   .   .   .   Child: 1  Id: sum of type (null) [line: 13]
.   .   .   .   Child: 1  Op: < of type (null) [line: 13]
.   .   .   .   .   Child: 0  Id: sum of type (null) [line: 13]
.   .   .   .   .   Child: 1  Const 2700 of type int [line: 13]
.   .   Sibling: 4  Call: outnl of type (null) [line: 14]
.   .   Sibling: 5  Call: outputb of type (null) [line: 16]
.   .   .   Child: 0  Op: < of type (null) [line: 16]
.   .   .   .   Child: 0  Op: ? of type (null) [line: 16]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 16]
.   .   .   .   Child: 1  Const 3 of type int [line: 16]
.   .   Sibling: 6  Call: outnl of type (null) [line: 17]
Number of warnings: 0
Number of errors: 8

==============
==============
./c- -P return.c-
ERROR(13) : Symbol 'outputc' is not declared.
ERROR(37) : Symbol 'outnl' is not declared.
ERROR(39) : Symbol 'output' is not declared.
ERROR(40) : Symbol 'output' is not declared.
ERROR(41) : Symbol 'outnl' is not declared.
ERROR(43) : Symbol 'outputc' is not declared.
ERROR(44) : Symbol 'outputb' is not declared.
ERROR(45) : Symbol 'outnl' is not declared.
ERROR(47) : Symbol 'outputb' is not declared.
ERROR(48) : Symbol 'outputb' is not declared.
ERROR(49) : Symbol 'outnl' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
              bender:  
Scope: bender          -----------------
                 fry:  
Scope: fry             -----------------
               leela:  
Scope: leela           -----------------
            zoidberg:  
Scope: zoidberg        -----------------
                zapp:  
Scope: zapp            -----------------
                 amy:  
Scope: amy             -----------------
              hermes:  
Scope: hermes          -----------------
                main:  
Scope: main            -----------------
===========  ============  ===========
Func: bender returns type int [line: 2]
.   Child: 1  Compound [line: 3]
Sibling: 1  Func: fry returns type int [line: 6]
.   Child: 1  Compound [line: 7]
.   .   Child: 1  Return [line: 8]
.   .   .   Child: 0  Const 114 of type int [line: 8]
Sibling: 2  Func: leela returns type void [line: 11]
.   Child: 1  Compound [line: 12]
.   .   Child: 1  Call: outputc of type (null) [line: 13]
.   .   .   Child: 0  Const 'L' of type char [line: 13]
Sibling: 3  Func: zoidberg returns type char [line: 16]
.   Child: 1  Compound [line: 17]
.   .   Child: 1  Return [line: 18]
.   .   .   Child: 0  Const 'z' of type char [line: 18]
Sibling: 4  Func: zapp returns type char [line: 21]
.   Child: 1  Compound [line: 22]
Sibling: 5  Func: amy returns type bool [line: 25]
.   Child: 1  Compound [line: 26]
.   .   Child: 1  Return [line: 27]
.   .   .   Child: 0  Const true of type bool [line: 27]
Sibling: 6  Func: hermes returns type bool [line: 30]
.   Child: 1  Compound [line: 31]
Sibling: 7  Func: main returns type int [line: 34]
.   Child: 1  Compound [line: 35]
.   .   Child: 1  Call: leela of type void [line: 36]
.   .   Sibling: 1  Call: outnl of type (null) [line: 37]
.   .   Sibling: 2  Call: output of type (null) [line: 39]
.   .   .   Child: 0  Call: bender of type (null) [line: 39]
.   .   Sibling: 3  Call: output of type (null) [line: 40]
.   .   .   Child: 0  Call: fry of type (null) [line: 40]
.   .   Sibling: 4  Call: outnl of type (null) [line: 41]
.   .   Sibling: 5  Call: outputc of type (null) [line: 43]
.   .   .   Child: 0  Call: zoidberg of type (null) [line: 43]
.   .   Sibling: 6  Call: outputb of type (null) [line: 44]
.   .   .   Child: 0  Op: = of type (null) [line: 44]
.   .   .   .   Child: 0  Call: zapp of type (null) [line: 44]
.   .   .   .   Child: 1  Const ' ' of type char [line: 44]
.   .   Sibling: 7  Call: outnl of type (null) [line: 45]
.   .   Sibling: 8  Call: outputb of type (null) [line: 47]
.   .   .   Child: 0  Call: amy of type (null) [line: 47]
.   .   Sibling: 9  Call: outputb of type (null) [line: 48]
.   .   .   Child: 0  Call: hermes of type (null) [line: 48]
.   .   Sibling: 10  Call: outnl of type (null) [line: 49]
Number of warnings: 0
Number of errors: 11

==============
==============
./c- -P scope.c-
ERROR(7) : Symbol 'bat' is not declared.
ERROR(8) : 'or' requires operands of type bool but lhs is of type (null).
ERROR(14) : Symbol 'b' is not declared.
ERROR(25) : Symbol 'b' is not declared.
ERROR(26) : Symbol 'c' is not declared.
ERROR(30) : Symbol 'b' is not declared.
ERROR(31) : Symbol 'c' is not declared.
ERROR(41) : Symbol 'x' is not declared.
ERROR(45) : Symbol 'p' is not declared.
ERROR(46) : '+' requires operands of type int but lhs is of type (null).
ERROR(46) : Symbol 'q' is not declared.
ERROR(46) : Symbol 'r' is not declared.
ERROR(48) : Symbol 'cow' is not declared.
ERROR(48) : Symbol 'u' is not declared.
ERROR(49) : Symbol 'abraxsis' is not declared.
ERROR(50) : Symbol 'a' is not declared.
ERROR(55) : Symbol 'g' is already declared.
ERROR(57) : Symbol 'g' is already declared.
ERROR(59) : Symbol 'x' is not declared.
ERROR(62) : Symbol 'g' is already declared.
ERROR(63) : Symbol 'ant' is already declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
                 ant: · 
                   g:  
Scope: ant             -----------------
                 bat: °â 
                   x:  
Scope: bat             -----------------
                   g:  
                   y:  
Scope: g               -----------------
                   g:  
Scope: g               -----------------
                 ant:  
Scope: ant             -----------------
===========  ============  ===========
Var: g of type int [line: 2]
Sibling: 1  Func: ant returns type int [line: 3]
.   Child: 0  Parm: x of type int [line: 3]
.   Child: 1  Compound [line: 4]
.   .   Child: 0  Var: a of type int [line: 5]
.   .   Child: 1  Call: bat of type (null) [line: 7]
.   .   .   Child: 0  Const 3 of type int [line: 7]
.   .   Sibling: 1  Op: or of type (null) [line: 8]
.   .   .   Child: 0  Id: a of type int [line: 8]
.   .   .   Child: 1  Id: a of type int [line: 8]
.   .   Sibling: 2  Id: x of type int [line: 9]
.   .   Sibling: 3  Id: g of type int [line: 10]
.   .   Sibling: 4  Compound [line: 11]
.   .   .   Child: 0  Var: c of type int [line: 12]
.   .   .   Child: 1  Id: a of type int [line: 13]
.   .   .   Sibling: 1  Id: b of type (null) [line: 14]
.   .   .   Sibling: 2  Id: c of type int [line: 15]
.   .   .   Sibling: 3  Id: g of type int [line: 16]
.   .   .   Sibling: 4  Id: x of type int [line: 17]
.   .   .   Sibling: 5  Compound [line: 18]
.   .   .   .   Child: 0  Var: IWouldNotEatItWithAGoat of type int [line: 19]
.   .   .   .   Child: 1  Id: c of type int [line: 20]
.   .   .   .   Sibling: 1  Id: a of type int [line: 21]
.   .   Sibling: 5  Id: a of type int [line: 24]
.   .   Sibling: 6  Id: b of type (null) [line: 25]
.   .   Sibling: 7  Id: c of type (null) [line: 26]
.   .   Sibling: 8  Id: x of type int [line: 27]
.   .   Sibling: 9  Compound [line: 28]
.   .   .   Child: 1  Id: a of type int [line: 29]
.   .   .   Sibling: 1  Id: b of type (null) [line: 30]
.   .   .   Sibling: 2  Id: c of type (null) [line: 31]
.   .   .   Sibling: 3  Id: x of type int [line: 32]
.   .   Sibling: 10  Id: x of type int [line: 34]
Sibling: 2  Func: bat returns type int [line: 37]
.   Child: 0  Parm: y of type int [line: 37]
.   Child: 1  Compound [line: 38]
.   .   Child: 0  Var: z of type int [line: 39]
.   .   Sibling: 1  Var: bat of type int [line: 40]
.   .   Child: 1  Id: x of type (null) [line: 41]
.   .   Sibling: 1  Call: ant of type int [line: 42]
.   .   .   Child: 0  Id: y of type (null) [line: 42]
.   .   Sibling: 2  Call: ant of type int [line: 43]
.   .   .   Child: 0  Id: g of type (null) [line: 43]
.   .   Sibling: 3  Call: ant of type int [line: 44]
.   .   .   Child: 0  Id: z of type (null) [line: 44]
.   .   Sibling: 4  Id: p of type (null) [line: 45]
.   .   Sibling: 5  Op: + of type (null) [line: 46]
.   .   .   Child: 0  Id: q of type (null) [line: 46]
.   .   .   Child: 1  Id: r of type (null) [line: 46]
.   .   Sibling: 6  Call: ant of type int [line: 47]
.   .   .   Child: 0  Id: s of type (null) [line: 47]
.   .   .   Sibling: 1  Id: t of type (null) [line: 47]
.   .   Sibling: 7  Assign: <- of type (null) [line: 48]
.   .   .   Child: 0  Id: u of type (null) [line: 48]
.   .   .   Child: 1  Call: cow of type (null) [line: 48]
.   .   .   .   Child: 0  Id: v of type (null) [line: 48]
.   .   Sibling: 8  Id: abraxsis of type (null) [line: 49]
.   .   Sibling: 9  Id: a of type (null) [line: 50]
.   .   Sibling: 10  Id: z of type int [line: 51]
.   .   Sibling: 11  Id: g of type int [line: 52]
Sibling: 3  Var: g of type int [line: 55]
Sibling: 4  Func: g returns type int [line: 57]
.   Child: 1  Compound [line: 58]
.   .   Child: 1  Return [line: 59]
.   .   .   Child: 0  Id: x of type (null) [line: 59]
Sibling: 5  Func: g returns type void [line: 62]
.   Child: 1  Compound [line: 62]
Sibling: 6  Func: ant returns type void [line: 63]
.   Child: 1  Compound [line: 63]
Number of warnings: 0
Number of errors: 21

==============
==============
./c- -P static.c-
ERROR(6) : Symbol 'output' is not declared.
ERROR(7) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(8) : Symbol 'output' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   x:  
===========  ============  ===========
ID: x ParentID: output
yes, we found ID: x
ID: x ParentID: output
yes, we found ID: x
ID: x ParentID: output
yes, we found ID: x
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Init: : of type int [line: 4]
.   .   .   Child: 0  Var: x of type (null) [line: 4]
.   .   .   Child: 1  Const 111 of type int [line: 4]
.   .   Child: 1  Call: output of type (null) [line: 6]
.   .   .   Child: 0  Id: x of type (null) [line: 6]
.   .   Sibling: 1  Assign: <- of type (null) [line: 7]
.   .   .   Child: 0  Id: x of type (null) [line: 7]
.   .   .   Child: 1  Const 222 of type int [line: 7]
.   .   Sibling: 2  Call: output of type (null) [line: 8]
.   .   .   Child: 0  Id: x of type (null) [line: 8]
Number of warnings: 0
Number of errors: 3

==============
==============
./c- -P strange.c-

==============
==============
./c- -P types.c-

==============
==============
./c- -P types3.c-

==============
==============
./c- -P undeclared.c-
ERROR(3) : Symbol 'i' is not declared.
ERROR(3) : Symbol 'z' is not declared.
ERROR(4) : Symbol 'i' is not declared.
ERROR(4) : Symbol 'z' is not declared.
ERROR(5) : '+' requires operands of type int but lhs is of type (null).
ERROR(5) : Symbol 'i' is not declared.
ERROR(5) : Symbol 'i' is not declared.
ERROR(6) : Symbol 'j' is not declared.
ERROR(6) : Unary '++' requires an operand of type int but was given type (null).
ERROR(7) : Symbol 'l' is not declared.
ERROR(8) : Symbol 'm' is not declared.
ERROR(8) : Unary 'chsign' requires an operand of type int but was given type (null).
===========  Symbol Table  ===========
Scope: Global          -----------------
                main: °¿ 
Scope: main            -----------------
                   x:  
===========  ============  ===========
ID: z ParentID: <-
we did not find ID
ID: z ParentID: <-
we did not find ID
ID: z ParentID: <-
we did not find ID
ID: i ParentID: <-
we did not find ID
ID: i ParentID: <-
we did not find ID
ID: i ParentID: <-
we did not find ID
Func: main returns type void [line: 1]
.   Child: 0  Parm: x of type int [line: 1]
.   Child: 1  Compound [line: 2]
.   .   Child: 1  Assign: <- of type (null) [line: 3]
.   .   .   Child: 0  Id: z of type (null) [line: 3]
.   .   .   Child: 1  Id: i of type (null) [line: 3]
.   .   Sibling: 1  Assign: <- of type (null) [line: 4]
.   .   .   Child: 0  Id: z of type (null) [line: 4]
.   .   .   Child: 1  Id: i of type (null) [line: 4]
.   .   Sibling: 2  Assign: <- of type (null) [line: 5]
.   .   .   Child: 0  Id: i of type (null) [line: 5]
.   .   .   Child: 1  Op: + of type (null) [line: 5]
.   .   .   .   Child: 0  Id: i of type (null) [line: 5]
.   .   .   .   Child: 1  Const 3 of type int [line: 5]
.   .   Sibling: 3  Assign: ++ of type (null) [line: 6]
.   .   .   Child: 0  Id: j of type (null) [line: 6]
.   .   Sibling: 4  Id: l of type (null) [line: 7]
.   .   Sibling: 5  Op: chsign of type (null) [line: 8]
.   .   .   Child: 0  Id: m of type (null) [line: 8]
.   .   Sibling: 6  Call: main of type void [line: 9]
.   .   .   Child: 0  Id: k of type (null) [line: 9]
Number of warnings: 0
Number of errors: 12

==============
==============
./c- -P uninit.c-
ERROR(3) : Symbol 'z' is already declared.
ERROR(3) : Symbol 'z' is already declared.
ERROR(7) : '+' requires operands of type int but lhs is of type (null).
ERROR(8) : '+' requires operands of type int but rhs is of type (null).
ERROR(9) : Unary '++' requires an operand of type int but was given type (null).
ERROR(12) : Unary 'chsign' requires an operand of type int but was given type (null).
ERROR(13) : Symbol 'dog' is not declared.
ERROR(14) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(15) : '+' requires operands of type int but lhs is of type (null).
ERROR(15) : '+' requires operands of type int but lhs is of type (null).
ERROR(15) : '+' requires operands of type int but lhs is of type (null).
ERROR(15) : '+' requires operands of type int but lhs is of type (null).
ERROR(15) : '+' requires operands of type int but lhs is of type (null).
ERROR(15) : '+' requires operands of type int but lhs is of type (null).
ERROR(15) : '+' requires operands of type int but lhs is of type (null).
===========  Symbol Table  ===========
Scope: Global          -----------------
                main: °uV 
Scope: main            -----------------
                   x:  
===========  ============  ===========
ID: z ParentID: <-
we did not find ID
ID: z ParentID: <-
we did not find ID
ID: z ParentID: <-
we did not find ID
ID: i ParentID: <-
we did not find ID
ID: i ParentID: <-
we did not find ID
ID: i ParentID: <-
we did not find ID
Func: main returns type void [line: 1]
.   Child: 0  Parm: x of type int [line: 1]
.   Child: 1  Compound [line: 2]
.   .   Child: 0  Var: z of type int [line: 3]
.   .   Sibling: 1  Var: g of type int [line: 3]
.   .   Sibling: 2  Var: h of type int [line: 3]
.   .   Sibling: 3  Var: i of type int [line: 3]
.   .   Sibling: 4  Var: j of type int [line: 3]
.   .   Sibling: 5  Var: k of type int [line: 3]
.   .   Sibling: 6  Var: l of type int [line: 3]
.   .   Sibling: 7  Var: m of type int [line: 3]
.   .   Sibling: 8  Var: z of type int [line: 3]
.   .   Sibling: 9  Var: z of type int [line: 3]
.   .   Child: 1  Assign: <- of type (null) [line: 5]
.   .   .   Child: 0  Id: z of type int [line: 5]
.   .   .   Child: 1  Id: i of type int [line: 5]
.   .   Sibling: 1  Assign: <- of type (null) [line: 6]
.   .   .   Child: 0  Id: z of type int [line: 6]
.   .   .   Child: 1  Id: i of type int [line: 6]
.   .   Sibling: 2  Assign: <- of type (null) [line: 7]
.   .   .   Child: 0  Id: i of type int [line: 7]
.   .   .   Child: 1  Op: + of type (null) [line: 7]
.   .   .   .   Child: 0  Id: g of type int [line: 7]
.   .   .   .   Child: 1  Const 3 of type int [line: 7]
.   .   Sibling: 3  Assign: <- of type (null) [line: 8]
.   .   .   Child: 0  Id: i of type int [line: 8]
.   .   .   Child: 1  Op: + of type (null) [line: 8]
.   .   .   .   Child: 0  Const 4 of type int [line: 8]
.   .   .   .   Child: 1  Id: h of type int [line: 8]
.   .   Sibling: 4  Assign: ++ of type (null) [line: 9]
.   .   .   Child: 0  Id: j of type int [line: 9]
.   .   Sibling: 5  Call: main of type void [line: 10]
.   .   .   Child: 0  Id: k of type (null) [line: 10]
.   .   Sibling: 6  Id: l of type int [line: 11]
.   .   Sibling: 7  Op: chsign of type (null) [line: 12]
.   .   .   Child: 0  Id: m of type int [line: 12]
.   .   Sibling: 8  Call: dog of type (null) [line: 13]
.   .   Sibling: 9  Assign: <- of type (null) [line: 14]
.   .   .   Child: 0  Id: main of type void [line: 14]
.   .   .   Child: 1  Const 3 of type int [line: 14]
.   .   Sibling: 10  Op: + of type (null) [line: 15]
.   .   .   Child: 0  Op: + of type (null) [line: 15]
.   .   .   .   Child: 0  Op: + of type (null) [line: 15]
.   .   .   .   .   Child: 0  Op: + of type (null) [line: 15]
.   .   .   .   .   .   Child: 0  Op: + of type (null) [line: 15]
.   .   .   .   .   .   .   Child: 0  Op: + of type (null) [line: 15]
.   .   .   .   .   .   .   .   Child: 0  Op: + of type (null) [line: 15]
.   .   .   .   .   .   .   .   .   Child: 0  Id: g of type int [line: 15]
.   .   .   .   .   .   .   .   .   Child: 1  Id: h of type int [line: 15]
.   .   .   .   .   .   .   .   Child: 1  Id: i of type int [line: 15]
.   .   .   .   .   .   .   Child: 1  Id: j of type int [line: 15]
.   .   .   .   .   .   Child: 1  Id: k of type int [line: 15]
.   .   .   .   .   Child: 1  Id: l of type int [line: 15]
.   .   .   .   Child: 1  Id: m of type int [line: 15]
.   .   .   Child: 1  Id: z of type int [line: 15]
Number of warnings: 0
Number of errors: 15

==============
==============
./c- -P uninit2.c-
ERROR(8) : Cannot index nonarray 'aa'.
ERROR(9) : Cannot index nonarray 'bb'.
ERROR(9) : Cannot index nonarray 'cc'.
ERROR(10) : Cannot index nonarray 'cc'.
ERROR(11) : '+' requires operands of type int but lhs is of type (null).
ERROR(11) : Cannot index nonarray 'cc'.
ERROR(12) : Cannot index nonarray 'cc'.
ERROR(12) : Cannot index nonarray 'dd'.
ERROR(13) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(13) : Cannot index nonarray 'cc'.
ERROR(13) : Cannot index nonarray 'ee'.
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   a:  
                  aa:  
                   b:  
                  bb:  
                   c:  
                  cc:  
                   d:  
                  dd:  
                  ee:  
===========  ============  ===========
ID: a ParentID: <-
yes, we found ID: a
ID: a ParentID: <-
yes, we found ID: a
ID: a ParentID: <-
yes, we found ID: a
ID: b ParentID: <-
yes, we found ID: b
ID: b ParentID: <-
yes, we found ID: b
ID: b ParentID: <-
yes, we found ID: b
Func: main returns type void [line: 1]
.   Child: 1  Compound [line: 2]
.   .   Child: 0  Var: a of type int [line: 3]
.   .   Sibling: 1  Var: b of type int [line: 3]
.   .   Sibling: 2  Var: c of type int [line: 3]
.   .   Sibling: 3  Var: d of type int [line: 3]
.   .   Sibling: 4  Var: aa of array of type int [line: 4]
.   .   Sibling: 5  Var: bb of array of type int [line: 4]
.   .   Sibling: 6  Var: cc of array of type int [line: 4]
.   .   Sibling: 7  Var: dd of array of type int [line: 4]
.   .   Sibling: 8  Var: ee of array of type int [line: 4]
.   .   Child: 1  Assign: <- of type int [line: 6]
.   .   .   Child: 0  Id: a of type int [line: 6]
.   .   .   Child: 1  Id: b of type int [line: 6]
.   .   Sibling: 1  Assign: <- of type (null) [line: 7]
.   .   .   Child: 0  Id: a of type int [line: 7]
.   .   .   Child: 1  Id: b of type int [line: 7]
.   .   Sibling: 2  Assign: <- of type (null) [line: 8]
.   .   .   Child: 0  Id: a of type int [line: 8]
.   .   .   Child: 1  Op: [ of type (null) [line: 8]
.   .   .   .   Child: 0  Id: aa of type int [line: 8]
.   .   .   .   Child: 1  Const 3 of type int [line: 8]
.   .   Sibling: 3  Assign: <- of type (null) [line: 9]
.   .   .   Child: 0  Id: a of type int [line: 9]
.   .   .   Child: 1  Op: [ of type (null) [line: 9]
.   .   .   .   Child: 0  Id: bb of type int [line: 9]
.   .   .   .   Child: 1  Op: [ of type (null) [line: 9]
.   .   .   .   .   Child: 0  Id: cc of type int [line: 9]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 9]
.   .   Sibling: 4  Assign: <- of type (null) [line: 10]
.   .   .   Child: 0  Op: [ of type (null) [line: 10]
.   .   .   .   Child: 0  Id: cc of type int [line: 10]
.   .   .   .   Child: 1  Id: c of type int [line: 10]
.   .   .   Child: 1  Id: a of type int [line: 10]
.   .   Sibling: 5  Assign: <- of type (null) [line: 11]
.   .   .   Child: 0  Op: [ of type (null) [line: 11]
.   .   .   .   Child: 0  Id: cc of type int [line: 11]
.   .   .   .   Child: 1  Op: + of type (null) [line: 11]
.   .   .   .   .   Child: 0  Id: c of type int [line: 11]
.   .   .   .   .   Child: 1  Id: d of type int [line: 11]
.   .   .   Child: 1  Id: a of type int [line: 11]
.   .   Sibling: 6  Op: [ of type (null) [line: 12]
.   .   .   Child: 0  Id: cc of type int [line: 12]
.   .   .   Child: 1  Op: [ of type (null) [line: 12]
.   .   .   .   Child: 0  Id: dd of type int [line: 12]
.   .   .   .   Child: 1  Const 3 of type int [line: 12]
.   .   Sibling: 7  Assign: <- of type (null) [line: 13]
.   .   .   Child: 0  Op: [ of type (null) [line: 13]
.   .   .   .   Child: 0  Id: cc of type int [line: 13]
.   .   .   .   Child: 1  Op: [ of type (null) [line: 13]
.   .   .   .   .   Child: 0  Id: ee of type int [line: 13]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 13]
.   .   .   Child: 1  Const 284 of type int [line: 13]
Number of warnings: 0
Number of errors: 2

==============
==============
./c- -P var.c-
ERROR(9) : Cannot index nonarray 'gy'.
ERROR(10) : The operation 'sizeof' only works with arrays.
ERROR(13) : Cannot index nonarray 'y'.
ERROR(14) : The operation 'sizeof' only works with arrays.
ERROR(17) : Cannot index nonarray 'py'.
ERROR(18) : The operation 'sizeof' only works with arrays.
ERROR(21) : Cannot index nonarray 'sy'.
ERROR(22) : The operation 'sizeof' only works with arrays.
===========  Symbol Table  ===========
Scope: Global          -----------------
                  gx:  
                  gy:  
                main: pÉ' 
Scope: main            -----------------
                  px:  
                  py:  
===========  ============  ===========
Var: gx of type int [line: 2]
Sibling: 1  Var: gy of array of type int [line: 2]
Sibling: 2  Func: main returns type void [line: 3]
.   Child: 0  Parm: px of type int [line: 3]
.   Sibling: 1  Parm: py of array of type int [line: 3]
.   Child: 1  Compound [line: 4]
.   .   Child: 0  Var: x of type int [line: 5]
.   .   Sibling: 1  Var: y of array of type int [line: 5]
.   .   Sibling: 2  Var: sx of static type int [line: 6]
.   .   Sibling: 3  Var: sy of array of type int [line: 6]
.   .   Child: 1  Id: gx of type int [line: 8]
.   .   Sibling: 1  Op: [ of type (null) [line: 9]
.   .   .   Child: 0  Id: gy of type int [line: 9]
.   .   .   Child: 1  Const 9 of type int [line: 9]
.   .   Sibling: 2  Op: sizeof of type (null) [line: 10]
.   .   .   Child: 0  Id: gy of type int [line: 10]
.   .   Sibling: 3  Id: x of type int [line: 12]
.   .   Sibling: 4  Op: [ of type (null) [line: 13]
.   .   .   Child: 0  Id: y of type int [line: 13]
.   .   .   Child: 1  Const 9 of type int [line: 13]
.   .   Sibling: 5  Op: sizeof of type (null) [line: 14]
.   .   .   Child: 0  Id: y of type int [line: 14]
.   .   Sibling: 6  Id: px of type int [line: 16]
.   .   Sibling: 7  Op: [ of type (null) [line: 17]
.   .   .   Child: 0  Id: py of type int [line: 17]
.   .   .   Child: 1  Const 9 of type int [line: 17]
.   .   Sibling: 8  Op: sizeof of type (null) [line: 18]
.   .   .   Child: 0  Id: py of type int [line: 18]
.   .   Sibling: 9  Id: sx of type int [line: 20]
.   .   Sibling: 10  Op: [ of type (null) [line: 21]
.   .   .   Child: 0  Id: sy of type int [line: 21]
.   .   .   Child: 1  Const 9 of type int [line: 21]
.   .   Sibling: 11  Op: sizeof of type (null) [line: 22]
.   .   .   Child: 0  Id: sy of type int [line: 22]
Number of warnings: 0
Number of errors: 4

==============
==============
./c- -P varAssign.c-
ERROR(7) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(8) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(9) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(12) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(12) : Cannot index nonarray 'gy'.
ERROR(13) : Symbol 'output' is not declared.
ERROR(15) : Symbol 'output' is not declared.
ERROR(16) : Cannot index nonarray 'gy'.
ERROR(16) : Cannot index nonarray 'gy'.
ERROR(17) : Symbol 'output' is not declared.
ERROR(18) : Symbol 'outnl' is not declared.
ERROR(21) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(21) : Cannot index nonarray 'y'.
ERROR(22) : Symbol 'output' is not declared.
ERROR(24) : Symbol 'output' is not declared.
ERROR(25) : Cannot index nonarray 'y'.
ERROR(25) : The operation 'sizeof' only works with arrays.
ERROR(26) : Symbol 'output' is not declared.
ERROR(27) : Symbol 'outnl' is not declared.
ERROR(31) : Symbol 'output' is not declared.
ERROR(32) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(33) : Cannot index nonarray 'py'.
ERROR(33) : Cannot index nonarray 'py'.
ERROR(34) : Symbol 'output' is not declared.
ERROR(35) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(35) : Cannot index nonarray 'py'.
ERROR(36) : Cannot index nonarray 'py'.
ERROR(36) : The operation 'sizeof' only works with arrays.
ERROR(37) : Symbol 'output' is not declared.
ERROR(38) : Symbol 'outnl' is not declared.
ERROR(41) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(41) : Cannot index nonarray 'sy'.
ERROR(42) : Symbol 'output' is not declared.
ERROR(44) : Symbol 'output' is not declared.
ERROR(45) : Cannot index nonarray 'sy'.
ERROR(45) : The operation 'sizeof' only works with arrays.
ERROR(46) : Symbol 'output' is not declared.
ERROR(47) : Symbol 'outnl' is not declared.
ERROR(56) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(57) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(57) : Cannot index nonarray 'zy'.
ERROR(58) : Symbol 'output' is not declared.
ERROR(59) : Symbol 'output' is not declared.
ERROR(60) : Symbol 'outnl' is not declared.
ERROR(65) : Symbol 'output' is not declared.
ERROR(66) : Symbol 'output' is not declared.
ERROR(67) : Symbol 'outnl' is not declared.
===========  Symbol Table  ===========
Scope: Global          -----------------
           esperanza: p¤ 
                  gx:  
                  gy:  
Scope: esperanza       -----------------
                main:  
                  px:  
                  py:  
Scope: main            -----------------
                  zx:  
                  zy:  
===========  ============  ===========
Var: gx of type int [line: 2]
Sibling: 1  Var: gy of array of type int [line: 2]
Sibling: 2  Func: esperanza returns type void [line: 3]
.   Child: 0  Parm: px of type int [line: 3]
.   Sibling: 1  Parm: py of array of type int [line: 3]
.   Child: 1  Compound [line: 4]
.   .   Child: 0  Var: x of type int [line: 5]
.   .   Sibling: 1  Var: y of array of type int [line: 5]
.   .   Sibling: 2  Var: sx of static type int [line: 6]
.   .   Sibling: 3  Var: sy of array of type int [line: 6]
.   .   Child: 1  Assign: <- of type (null) [line: 7]
.   .   .   Child: 0  Id: gx of type int [line: 7]
.   .   .   Child: 1  Const 444 of type int [line: 7]
.   .   Sibling: 1  Assign: <- of type (null) [line: 8]
.   .   .   Child: 0  Id: x of type int [line: 8]
.   .   .   Child: 1  Const 555 of type int [line: 8]
.   .   Sibling: 2  Assign: <- of type (null) [line: 9]
.   .   .   Child: 0  Id: sx of type int [line: 9]
.   .   .   Child: 1  Const 666 of type int [line: 9]
.   .   Sibling: 3  Assign: <- of type (null) [line: 12]
.   .   .   Child: 0  Op: [ of type (null) [line: 12]
.   .   .   .   Child: 0  Id: gy of type int [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   .   Child: 1  Const 222 of type int [line: 12]
.   .   Sibling: 4  Call: output of type (null) [line: 13]
.   .   .   Child: 0  Op: [ of type (null) [line: 13]
.   .   .   .   Child: 0  Id: gy of type (null) [line: 13]
.   .   .   .   Child: 1  Const 9 of type int [line: 13]
.   .   Sibling: 5  Assign: <- of type (null) [line: 14]
.   .   .   Child: 0  Id: gx of type int [line: 14]
.   .   .   Child: 1  Id: gx of type int [line: 14]
.   .   Sibling: 6  Call: output of type (null) [line: 15]
.   .   .   Child: 0  Id: gx of type (null) [line: 15]
.   .   Sibling: 7  Assign: <- of type (null) [line: 16]
.   .   .   Child: 0  Op: [ of type (null) [line: 16]
.   .   .   .   Child: 0  Id: gy of type int [line: 16]
.   .   .   .   Child: 1  Const 8 of type int [line: 16]
.   .   .   Child: 1  Op: [ of type (null) [line: 16]
.   .   .   .   Child: 0  Id: gy of type int [line: 16]
.   .   .   .   Child: 1  Const 9 of type int [line: 16]
.   .   Sibling: 8  Call: output of type (null) [line: 17]
.   .   .   Child: 0  Op: [ of type (null) [line: 17]
.   .   .   .   Child: 0  Id: gy of type (null) [line: 17]
.   .   .   .   Child: 1  Const 8 of type int [line: 17]
.   .   Sibling: 9  Call: outnl of type (null) [line: 18]
.   .   Sibling: 10  Assign: <- of type (null) [line: 21]
.   .   .   Child: 0  Op: [ of type (null) [line: 21]
.   .   .   .   Child: 0  Id: y of type int [line: 21]
.   .   .   .   Child: 1  Const 9 of type int [line: 21]
.   .   .   Child: 1  Const 333 of type int [line: 21]
.   .   Sibling: 11  Call: output of type (null) [line: 22]
.   .   .   Child: 0  Op: [ of type (null) [line: 22]
.   .   .   .   Child: 0  Id: y of type (null) [line: 22]
.   .   .   .   Child: 1  Const 9 of type int [line: 22]
.   .   Sibling: 12  Assign: <- of type (null) [line: 23]
.   .   .   Child: 0  Id: x of type int [line: 23]
.   .   .   Child: 1  Id: x of type int [line: 23]
.   .   Sibling: 13  Call: output of type (null) [line: 24]
.   .   .   Child: 0  Id: x of type (null) [line: 24]
.   .   Sibling: 14  Assign: <- of type (null) [line: 25]
.   .   .   Child: 0  Op: [ of type (null) [line: 25]
.   .   .   .   Child: 0  Id: y of type int [line: 25]
.   .   .   .   Child: 1  Const 7 of type int [line: 25]
.   .   .   Child: 1  Op: sizeof of type (null) [line: 25]
.   .   .   .   Child: 0  Id: y of type int [line: 25]
.   .   Sibling: 15  Call: output of type (null) [line: 26]
.   .   .   Child: 0  Op: [ of type (null) [line: 26]
.   .   .   .   Child: 0  Id: y of type (null) [line: 26]
.   .   .   .   Child: 1  Const 7 of type int [line: 26]
.   .   Sibling: 16  Call: outnl of type (null) [line: 27]
.   .   Sibling: 17  Assign: <- of type (null) [line: 30]
.   .   .   Child: 0  Id: px of type int [line: 30]
.   .   .   Child: 1  Id: px of type int [line: 30]
.   .   Sibling: 18  Call: output of type (null) [line: 31]
.   .   .   Child: 0  Id: px of type (null) [line: 31]
.   .   Sibling: 19  Assign: <- of type (null) [line: 32]
.   .   .   Child: 0  Id: px of type int [line: 32]
.   .   .   Child: 1  Const 101 of type int [line: 32]
.   .   Sibling: 20  Assign: <- of type (null) [line: 33]
.   .   .   Child: 0  Op: [ of type (null) [line: 33]
.   .   .   .   Child: 0  Id: py of type int [line: 33]
.   .   .   .   Child: 1  Const 8 of type int [line: 33]
.   .   .   Child: 1  Op: [ of type (null) [line: 33]
.   .   .   .   Child: 0  Id: py of type int [line: 33]
.   .   .   .   Child: 1  Const 9 of type int [line: 33]
.   .   Sibling: 21  Call: output of type (null) [line: 34]
.   .   .   Child: 0  Op: [ of type (null) [line: 34]
.   .   .   .   Child: 0  Id: py of type (null) [line: 34]
.   .   .   .   Child: 1  Const 8 of type int [line: 34]
.   .   Sibling: 22  Assign: <- of type (null) [line: 35]
.   .   .   Child: 0  Op: [ of type (null) [line: 35]
.   .   .   .   Child: 0  Id: py of type int [line: 35]
.   .   .   .   Child: 1  Const 8 of type int [line: 35]
.   .   .   Child: 1  Const 102 of type int [line: 35]
.   .   Sibling: 23  Assign: <- of type (null) [line: 36]
.   .   .   Child: 0  Op: [ of type (null) [line: 36]
.   .   .   .   Child: 0  Id: py of type int [line: 36]
.   .   .   .   Child: 1  Const 7 of type int [line: 36]
.   .   .   Child: 1  Op: sizeof of type (null) [line: 36]
.   .   .   .   Child: 0  Id: py of type int [line: 36]
.   .   Sibling: 24  Call: output of type (null) [line: 37]
.   .   .   Child: 0  Op: [ of type (null) [line: 37]
.   .   .   .   Child: 0  Id: py of type (null) [line: 37]
.   .   .   .   Child: 1  Const 7 of type int [line: 37]
.   .   Sibling: 25  Call: outnl of type (null) [line: 38]
.   .   Sibling: 26  Assign: <- of type (null) [line: 41]
.   .   .   Child: 0  Op: [ of type (null) [line: 41]
.   .   .   .   Child: 0  Id: sy of type int [line: 41]
.   .   .   .   Child: 1  Const 9 of type int [line: 41]
.   .   .   Child: 1  Const 444 of type int [line: 41]
.   .   Sibling: 27  Call: output of type (null) [line: 42]
.   .   .   Child: 0  Op: [ of type (null) [line: 42]
.   .   .   .   Child: 0  Id: sy of type (null) [line: 42]
.   .   .   .   Child: 1  Const 9 of type int [line: 42]
.   .   Sibling: 28  Assign: <- of type (null) [line: 43]
.   .   .   Child: 0  Id: sx of type int [line: 43]
.   .   .   Child: 1  Id: sx of type int [line: 43]
.   .   Sibling: 29  Call: output of type (null) [line: 44]
.   .   .   Child: 0  Id: sx of type (null) [line: 44]
.   .   Sibling: 30  Assign: <- of type (null) [line: 45]
.   .   .   Child: 0  Op: [ of type (null) [line: 45]
.   .   .   .   Child: 0  Id: sy of type int [line: 45]
.   .   .   .   Child: 1  Const 7 of type int [line: 45]
.   .   .   Child: 1  Op: sizeof of type (null) [line: 45]
.   .   .   .   Child: 0  Id: sy of type int [line: 45]
.   .   Sibling: 31  Call: output of type (null) [line: 46]
.   .   .   Child: 0  Op: [ of type (null) [line: 46]
.   .   .   .   Child: 0  Id: sy of type (null) [line: 46]
.   .   .   .   Child: 1  Const 7 of type int [line: 46]
.   .   Sibling: 32  Call: outnl of type (null) [line: 47]
Sibling: 3  Func: main returns type void [line: 51]
.   Child: 1  Compound [line: 52]
.   .   Child: 0  Var: zx of type int [line: 53]
.   .   Sibling: 1  Var: zy of array of type int [line: 53]
.   .   Child: 1  Assign: <- of type (null) [line: 56]
.   .   .   Child: 0  Id: zx of type int [line: 56]
.   .   .   Child: 1  Const 999 of type int [line: 56]
.   .   Sibling: 1  Assign: <- of type (null) [line: 57]
.   .   .   Child: 0  Op: [ of type (null) [line: 57]
.   .   .   .   Child: 0  Id: zy of type int [line: 57]
.   .   .   .   Child: 1  Const 9 of type int [line: 57]
.   .   .   Child: 1  Const 111 of type int [line: 57]
.   .   Sibling: 2  Call: output of type (null) [line: 58]
.   .   .   Child: 0  Id: zx of type (null) [line: 58]
.   .   Sibling: 3  Call: output of type (null) [line: 59]
.   .   .   Child: 0  Op: [ of type (null) [line: 59]
.   .   .   .   Child: 0  Id: zy of type (null) [line: 59]
.   .   .   .   Child: 1  Const 9 of type int [line: 59]
.   .   Sibling: 4  Call: outnl of type (null) [line: 60]
.   .   Sibling: 5  Call: esperanza of type void [line: 62]
.   .   .   Child: 0  Id: zx of type (null) [line: 62]
.   .   .   Sibling: 1  Id: zy of type (null) [line: 62]
.   .   Sibling: 6  Call: output of type (null) [line: 65]
.   .   .   Child: 0  Id: zx of type (null) [line: 65]
.   .   Sibling: 7  Call: output of type (null) [line: 66]
.   .   .   Child: 0  Op: [ of type (null) [line: 66]
.   .   .   .   Child: 0  Id: zy of type (null) [line: 66]
.   .   .   .   Child: 1  Const 9 of type int [line: 66]
.   .   Sibling: 8  Call: outnl of type (null) [line: 67]
Number of warnings: 0
Number of errors: 35

==============
==============
./c- -P varPair.c-
ERROR(8) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(10) : Symbol 'output' is not declared.
ERROR(11) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(11) : Cannot index nonarray 'gy'.
ERROR(12) : Cannot index nonarray 'gy'.
ERROR(12) : Cannot index nonarray 'gy'.
ERROR(13) : Symbol 'output' is not declared.
ERROR(14) : Symbol 'outnl' is not declared.
ERROR(16) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(18) : Symbol 'output' is not declared.
ERROR(19) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(19) : Cannot index nonarray 'y'.
ERROR(20) : Cannot index nonarray 'y'.
ERROR(20) : Cannot index nonarray 'y'.
ERROR(21) : Symbol 'output' is not declared.
ERROR(22) : Symbol 'outnl' is not declared.
ERROR(24) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(26) : Symbol 'output' is not declared.
ERROR(27) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(27) : Cannot index nonarray 'py'.
ERROR(28) : Cannot index nonarray 'py'.
ERROR(28) : Cannot index nonarray 'py'.
ERROR(29) : Symbol 'output' is not declared.
ERROR(30) : Symbol 'outnl' is not declared.
ERROR(32) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(34) : Symbol 'output' is not declared.
ERROR(35) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(35) : Cannot index nonarray 'sy'.
ERROR(36) : Cannot index nonarray 'sy'.
ERROR(36) : Cannot index nonarray 'sy'.
ERROR(37) : Symbol 'output' is not declared.
ERROR(38) : Symbol 'outnl' is not declared.
ERROR(44) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(44) : Cannot index nonarray 'ly'.
===========  Symbol Table  ===========
Scope: Global          -----------------
                fred: pIR 
                  gx:  
                  gy:  
Scope: fred            -----------------
                main:  
                  px:  
                  py:  
Scope: main            -----------------
                  lx:  
                  ly:  
===========  ============  ===========
Var: gx of type int [line: 2]
Sibling: 1  Var: gy of array of type int [line: 2]
Sibling: 2  Func: fred returns type void [line: 3]
.   Child: 0  Parm: px of type int [line: 3]
.   Sibling: 1  Parm: py of array of type int [line: 3]
.   Child: 1  Compound [line: 4]
.   .   Child: 0  Var: x of type int [line: 5]
.   .   Sibling: 1  Var: y of array of type int [line: 5]
.   .   Sibling: 2  Var: sx of static type int [line: 6]
.   .   Sibling: 3  Var: sy of array of type int [line: 6]
.   .   Child: 1  Assign: <- of type (null) [line: 8]
.   .   .   Child: 0  Id: gx of type int [line: 8]
.   .   .   Child: 1  Const 111 of type int [line: 8]
.   .   Sibling: 1  Assign: <- of type (null) [line: 9]
.   .   .   Child: 0  Id: gx of type int [line: 9]
.   .   .   Child: 1  Id: gx of type int [line: 9]
.   .   Sibling: 2  Call: output of type (null) [line: 10]
.   .   .   Child: 0  Id: gx of type (null) [line: 10]
.   .   Sibling: 3  Assign: <- of type (null) [line: 11]
.   .   .   Child: 0  Op: [ of type (null) [line: 11]
.   .   .   .   Child: 0  Id: gy of type int [line: 11]
.   .   .   .   Child: 1  Const 9 of type int [line: 11]
.   .   .   Child: 1  Const 222 of type int [line: 11]
.   .   Sibling: 4  Assign: <- of type (null) [line: 12]
.   .   .   Child: 0  Op: [ of type (null) [line: 12]
.   .   .   .   Child: 0  Id: gy of type int [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   .   Child: 1  Op: [ of type (null) [line: 12]
.   .   .   .   Child: 0  Id: gy of type int [line: 12]
.   .   .   .   Child: 1  Const 9 of type int [line: 12]
.   .   Sibling: 5  Call: output of type (null) [line: 13]
.   .   .   Child: 0  Op: [ of type (null) [line: 13]
.   .   .   .   Child: 0  Id: gy of type (null) [line: 13]
.   .   .   .   Child: 1  Const 9 of type int [line: 13]
.   .   Sibling: 6  Call: outnl of type (null) [line: 14]
.   .   Sibling: 7  Assign: <- of type (null) [line: 16]
.   .   .   Child: 0  Id: x of type int [line: 16]
.   .   .   Child: 1  Const 333 of type int [line: 16]
.   .   Sibling: 8  Assign: <- of type (null) [line: 17]
.   .   .   Child: 0  Id: x of type int [line: 17]
.   .   .   Child: 1  Id: x of type int [line: 17]
.   .   Sibling: 9  Call: output of type (null) [line: 18]
.   .   .   Child: 0  Id: x of type (null) [line: 18]
.   .   Sibling: 10  Assign: <- of type (null) [line: 19]
.   .   .   Child: 0  Op: [ of type (null) [line: 19]
.   .   .   .   Child: 0  Id: y of type int [line: 19]
.   .   .   .   Child: 1  Const 9 of type int [line: 19]
.   .   .   Child: 1  Const 444 of type int [line: 19]
.   .   Sibling: 11  Assign: <- of type (null) [line: 20]
.   .   .   Child: 0  Op: [ of type (null) [line: 20]
.   .   .   .   Child: 0  Id: y of type int [line: 20]
.   .   .   .   Child: 1  Const 9 of type int [line: 20]
.   .   .   Child: 1  Op: [ of type (null) [line: 20]
.   .   .   .   Child: 0  Id: y of type int [line: 20]
.   .   .   .   Child: 1  Const 9 of type int [line: 20]
.   .   Sibling: 12  Call: output of type (null) [line: 21]
.   .   .   Child: 0  Op: [ of type (null) [line: 21]
.   .   .   .   Child: 0  Id: y of type (null) [line: 21]
.   .   .   .   Child: 1  Const 9 of type int [line: 21]
.   .   Sibling: 13  Call: outnl of type (null) [line: 22]
.   .   Sibling: 14  Assign: <- of type (null) [line: 24]
.   .   .   Child: 0  Id: px of type int [line: 24]
.   .   .   Child: 1  Const 555 of type int [line: 24]
.   .   Sibling: 15  Assign: <- of type (null) [line: 25]
.   .   .   Child: 0  Id: px of type int [line: 25]
.   .   .   Child: 1  Id: px of type int [line: 25]
.   .   Sibling: 16  Call: output of type (null) [line: 26]
.   .   .   Child: 0  Id: px of type (null) [line: 26]
.   .   Sibling: 17  Assign: <- of type (null) [line: 27]
.   .   .   Child: 0  Op: [ of type (null) [line: 27]
.   .   .   .   Child: 0  Id: py of type int [line: 27]
.   .   .   .   Child: 1  Const 9 of type int [line: 27]
.   .   .   Child: 1  Const 666 of type int [line: 27]
.   .   Sibling: 18  Assign: <- of type (null) [line: 28]
.   .   .   Child: 0  Op: [ of type (null) [line: 28]
.   .   .   .   Child: 0  Id: py of type int [line: 28]
.   .   .   .   Child: 1  Const 9 of type int [line: 28]
.   .   .   Child: 1  Op: [ of type (null) [line: 28]
.   .   .   .   Child: 0  Id: py of type int [line: 28]
.   .   .   .   Child: 1  Const 9 of type int [line: 28]
.   .   Sibling: 19  Call: output of type (null) [line: 29]
.   .   .   Child: 0  Op: [ of type (null) [line: 29]
.   .   .   .   Child: 0  Id: py of type (null) [line: 29]
.   .   .   .   Child: 1  Const 9 of type int [line: 29]
.   .   Sibling: 20  Call: outnl of type (null) [line: 30]
.   .   Sibling: 21  Assign: <- of type (null) [line: 32]
.   .   .   Child: 0  Id: sx of type int [line: 32]
.   .   .   Child: 1  Const 777 of type int [line: 32]
.   .   Sibling: 22  Assign: <- of type (null) [line: 33]
.   .   .   Child: 0  Id: sx of type int [line: 33]
.   .   .   Child: 1  Id: sx of type int [line: 33]
.   .   Sibling: 23  Call: output of type (null) [line: 34]
.   .   .   Child: 0  Id: sx of type (null) [line: 34]
.   .   Sibling: 24  Assign: <- of type (null) [line: 35]
.   .   .   Child: 0  Op: [ of type (null) [line: 35]
.   .   .   .   Child: 0  Id: sy of type int [line: 35]
.   .   .   .   Child: 1  Const 9 of type int [line: 35]
.   .   .   Child: 1  Const 888 of type int [line: 35]
.   .   Sibling: 25  Assign: <- of type (null) [line: 36]
.   .   .   Child: 0  Op: [ of type (null) [line: 36]
.   .   .   .   Child: 0  Id: sy of type int [line: 36]
.   .   .   .   Child: 1  Const 9 of type int [line: 36]
.   .   .   Child: 1  Op: [ of type (null) [line: 36]
.   .   .   .   Child: 0  Id: sy of type int [line: 36]
.   .   .   .   Child: 1  Const 9 of type int [line: 36]
.   .   Sibling: 26  Call: output of type (null) [line: 37]
.   .   .   Child: 0  Op: [ of type (null) [line: 37]
.   .   .   .   Child: 0  Id: sy of type (null) [line: 37]
.   .   .   .   Child: 1  Const 9 of type int [line: 37]
.   .   Sibling: 27  Call: outnl of type (null) [line: 38]
Sibling: 3  Func: main returns type void [line: 41]
.   Child: 1  Compound [line: 41]
.   .   Child: 0  Var: lx of type int [line: 42]
.   .   Sibling: 1  Var: ly of array of type int [line: 42]
.   .   Child: 1  Assign: <- of type (null) [line: 44]
.   .   .   Child: 0  Id: lx of type int [line: 44]
.   .   .   Child: 1  Assign: <- of type (null) [line: 44]
.   .   .   .   Child: 0  Op: [ of type (null) [line: 44]
.   .   .   .   .   Child: 0  Id: ly of type int [line: 44]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 44]
.   .   .   .   Child: 1  Const 111 of type int [line: 44]
.   .   Sibling: 1  Call: fred of type void [line: 45]
.   .   .   Child: 0  Id: gx of type (null) [line: 45]
.   .   .   Sibling: 1  Id: gy of type (null) [line: 45]
.   .   Sibling: 2  Call: fred of type void [line: 46]
.   .   .   Child: 0  Id: lx of type (null) [line: 46]
.   .   .   Sibling: 1  Id: ly of type (null) [line: 46]
Number of warnings: 0
Number of errors: 21

==============
==============
./c- -P while.c-
ERROR(7) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(7) : Unary '++' requires an operand of type int but was given type (null).
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   x:  
===========  ============  ===========
ID: x ParentID: <-
yes, we found ID: x
ID: x ParentID: <-
yes, we found ID: x
ID: x ParentID: <-
yes, we found ID: x
Func: main returns type void [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   Child: 1  Assign: <- of type int [line: 5]
.   .   .   Child: 0  Id: x of type int [line: 5]
.   .   .   Child: 1  Const 0 of type int [line: 5]
.   .   Sibling: 1  While [line: 7]
.   .   .   Child: 0  Op: > of type (null) [line: 7]
.   .   .   .   Child: 0  Id: x of type int [line: 7]
.   .   .   .   Child: 1  Const 10 of type int [line: 7]
.   .   .   Child: 1  Assign: ++ of type (null) [line: 7]
.   .   .   .   Child: 0  Id: x of type int [line: 7]
Number of warnings: 0
Number of errors: 2

==============
==============
./c- -P whileif.c-
ERROR(10) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(11) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(13) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(14) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.
ERROR(15) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(16) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(18) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(18) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(19) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(19) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(19) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(20) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(20) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(20) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(21) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(21) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(21) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(21) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(22) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(22) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(22) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(22) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(22) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(23) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(23) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(24) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(24) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(25) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(25) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(26) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(26) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(26) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(27) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(27) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(27) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(28) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(28) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(29) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(29) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(30) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(30) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(30) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(31) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(31) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(31) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(31) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(32) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(32) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(32) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(32) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(33) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(33) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(33) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(33) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.
ERROR(53) : '*' requires operands of type int but lhs is of type (null).
===========  Symbol Table  ===========
Scope: Global          -----------------
                main:  
Scope: main            -----------------
                   a:  
                   b:  
                   c:  
                   d:  
                   e:  
                   x:  
                   y:  
                   z:  
===========  ============  ===========
ID: b ParentID: <-
yes, we found ID: b
ID: b ParentID: <-
yes, we found ID: b
ID: b ParentID: <-
yes, we found ID: b
Func: main returns type int [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: x of type int [line: 4]
.   .   Sibling: 1  Var: y of type int [line: 5]
.   .   Sibling: 2  Var: z of type int [line: 6]
.   .   Sibling: 3  Var: a of type bool [line: 7]
.   .   Sibling: 4  Var: b of type bool [line: 7]
.   .   Sibling: 5  Var: c of type bool [line: 7]
.   .   Sibling: 6  Var: d of type bool [line: 7]
.   .   Sibling: 7  Var: e of type bool [line: 7]
.   .   Child: 1  Assign: <- of type bool [line: 9]
.   .   .   Child: 0  Id: b of type bool [line: 9]
.   .   .   Child: 1  Const false of type bool [line: 9]
.   .   Sibling: 1  While [line: 10]
.   .   .   Child: 0  Id: b of type bool [line: 10]
.   .   .   Child: 1  Assign: <- of type (null) [line: 10]
.   .   .   .   Child: 0  Id: x of type int [line: 10]
.   .   .   .   Child: 1  Const 88 of type int [line: 10]
.   .   Sibling: 2  If [line: 11]
.   .   .   Child: 0  Op: > of type (null) [line: 11]
.   .   .   .   Child: 0  Id: x of type int [line: 11]
.   .   .   .   Child: 1  Const 2 of type int [line: 11]
.   .   Sibling: 3  Assign: <- of type (null) [line: 13]
.   .   .   Child: 0  Id: a of type bool [line: 13]
.   .   .   Child: 1  Assign: <- of type (null) [line: 13]
.   .   .   .   Child: 0  Id: b of type bool [line: 13]
.   .   .   .   Child: 1  Assign: <- of type (null) [line: 13]
.   .   .   .   .   Child: 0  Id: c of type bool [line: 13]
.   .   .   .   .   Child: 1  Assign: <- of type (null) [line: 13]
.   .   .   .   .   .   Child: 0  Id: d of type bool [line: 13]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 13]
.   .   Sibling: 4  If [line: 14]
.   .   .   Child: 0  Const false of type bool [line: 14]
.   .   .   Child: 1  Assign: <- of type (null) [line: 14]
.   .   .   .   Child: 0  Id: e of type bool [line: 14]
.   .   .   .   Child: 1  Const true of type bool [line: 14]
.   .   Sibling: 5  Assign: <- of type (null) [line: 15]
.   .   .   Child: 0  Id: x of type int [line: 15]
.   .   .   Child: 1  Const 1184 of type int [line: 15]
.   .   Sibling: 6  Assign: <- of type (null) [line: 16]
.   .   .   Child: 0  Id: y of type int [line: 16]
.   .   .   Child: 1  Const 1210 of type int [line: 16]
.   .   Sibling: 7  If [line: 18]
.   .   .   Child: 0  Op: > of type (null) [line: 18]
.   .   .   .   Child: 0  Id: x of type int [line: 18]
.   .   .   .   Child: 1  Const 1 of type int [line: 18]
.   .   .   Child: 1  Assign: <- of type (null) [line: 18]
.   .   .   .   Child: 0  Id: z of type int [line: 18]
.   .   .   .   Child: 1  Const 1 of type int [line: 18]
.   .   Sibling: 8  If [line: 19]
.   .   .   Child: 0  Op: > of type (null) [line: 19]
.   .   .   .   Child: 0  Id: x of type int [line: 19]
.   .   .   .   Child: 1  Const 2 of type int [line: 19]
.   .   .   Child: 1  Assign: <- of type (null) [line: 19]
.   .   .   .   Child: 0  Id: z of type int [line: 19]
.   .   .   .   Child: 1  Const 1 of type int [line: 19]
.   .   .   Child: 2  Assign: <- of type (null) [line: 19]
.   .   .   .   Child: 0  Id: z of type int [line: 19]
.   .   .   .   Child: 1  Const 2 of type int [line: 19]
.   .   Sibling: 9  If [line: 20]
.   .   .   Child: 0  Op: > of type (null) [line: 20]
.   .   .   .   Child: 0  Id: x of type int [line: 20]
.   .   .   .   Child: 1  Const 3 of type int [line: 20]
.   .   .   Child: 1  If [line: 20]
.   .   .   .   Child: 0  Op: > of type (null) [line: 20]
.   .   .   .   .   Child: 0  Id: y of type int [line: 20]
.   .   .   .   .   Child: 1  Const 4 of type int [line: 20]
.   .   .   .   Child: 1  Assign: <- of type (null) [line: 20]
.   .   .   .   .   Child: 0  Id: z of type int [line: 20]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 20]
.   .   Sibling: 10  If [line: 21]
.   .   .   Child: 0  Op: > of type (null) [line: 21]
.   .   .   .   Child: 0  Id: x of type int [line: 21]
.   .   .   .   Child: 1  Const 5 of type int [line: 21]
.   .   .   Child: 1  If [line: 21]
.   .   .   .   Child: 0  Op: > of type (null) [line: 21]
.   .   .   .   .   Child: 0  Id: y of type int [line: 21]
.   .   .   .   .   Child: 1  Const 6 of type int [line: 21]
.   .   .   .   Child: 1  Assign: <- of type (null) [line: 21]
.   .   .   .   .   Child: 0  Id: z of type int [line: 21]
.   .   .   .   .   Child: 1  Const 4 of type int [line: 21]
.   .   .   .   Child: 2  Assign: <- of type (null) [line: 21]
.   .   .   .   .   Child: 0  Id: z of type int [line: 21]
.   .   .   .   .   Child: 1  Const 5 of type int [line: 21]
.   .   Sibling: 11  If [line: 22]
.   .   .   Child: 0  Op: > of type (null) [line: 22]
.   .   .   .   Child: 0  Id: x of type int [line: 22]
.   .   .   .   Child: 1  Const 7 of type int [line: 22]
.   .   .   Child: 1  If [line: 22]
.   .   .   .   Child: 0  Op: > of type (null) [line: 22]
.   .   .   .   .   Child: 0  Id: y of type int [line: 22]
.   .   .   .   .   Child: 1  Const 8 of type int [line: 22]
.   .   .   .   Child: 1  Assign: <- of type (null) [line: 22]
.   .   .   .   .   Child: 0  Id: z of type int [line: 22]
.   .   .   .   .   Child: 1  Const 6 of type int [line: 22]
.   .   .   .   Child: 2  Assign: <- of type (null) [line: 22]
.   .   .   .   .   Child: 0  Id: z of type int [line: 22]
.   .   .   .   .   Child: 1  Const 7 of type int [line: 22]
.   .   .   Child: 2  Assign: <- of type (null) [line: 22]
.   .   .   .   Child: 0  Id: z of type int [line: 22]
.   .   .   .   Child: 1  Const 8 of type int [line: 22]
.   .   Sibling: 12  If [line: 23]
.   .   .   Child: 0  Op: < of type (null) [line: 23]
.   .   .   .   Child: 0  Id: x of type int [line: 23]
.   .   .   .   Child: 1  Const 9 of type int [line: 23]
.   .   .   Child: 1  While [line: 23]
.   .   .   .   Child: 0  Op: > of type (null) [line: 23]
.   .   .   .   .   Child: 0  Id: y of type int [line: 23]
.   .   .   .   .   Child: 1  Const 10 of type int [line: 23]
.   .   .   .   Child: 1  Const 9 of type int [line: 23]
.   .   Sibling: 13  While [line: 24]
.   .   .   Child: 0  Op: > of type (null) [line: 24]
.   .   .   .   Child: 0  Id: y of type int [line: 24]
.   .   .   .   Child: 1  Const 10 of type int [line: 24]
.   .   .   Child: 1  If [line: 24]
.   .   .   .   Child: 0  Op: < of type (null) [line: 24]
.   .   .   .   .   Child: 0  Id: x of type int [line: 24]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 24]
.   .   .   .   Child: 1  Const 3 of type int [line: 24]
.   .   Sibling: 14  While [line: 25]
.   .   .   Child: 0  Op: > of type (null) [line: 25]
.   .   .   .   Child: 0  Id: y of type int [line: 25]
.   .   .   .   Child: 1  Const 10 of type int [line: 25]
.   .   .   Child: 1  If [line: 25]
.   .   .   .   Child: 0  Op: < of type (null) [line: 25]
.   .   .   .   .   Child: 0  Id: x of type int [line: 25]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 25]
.   .   .   .   Child: 1  Const 3 of type int [line: 25]
.   .   .   .   Child: 2  Const 9 of type int [line: 25]
.   .   Sibling: 15  If [line: 26]
.   .   .   Child: 0  Op: < of type (null) [line: 26]
.   .   .   .   Child: 0  Id: x of type int [line: 26]
.   .   .   .   Child: 1  Const 9 of type int [line: 26]
.   .   .   Child: 1  While [line: 26]
.   .   .   .   Child: 0  Op: > of type (null) [line: 26]
.   .   .   .   .   Child: 0  Id: y of type int [line: 26]
.   .   .   .   .   Child: 1  Const 10 of type int [line: 26]
.   .   .   .   Child: 1  If [line: 26]
.   .   .   .   .   Child: 0  Op: < of type (null) [line: 26]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 26]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 26]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 26]
.   .   .   .   .   Child: 2  Const 9 of type int [line: 26]
.   .   Sibling: 16  While [line: 27]
.   .   .   Child: 0  Op: < of type (null) [line: 27]
.   .   .   .   Child: 0  Id: y of type int [line: 27]
.   .   .   .   Child: 1  Const 11 of type int [line: 27]
.   .   .   Child: 1  If [line: 27]
.   .   .   .   Child: 0  Op: < of type (null) [line: 27]
.   .   .   .   .   Child: 0  Id: x of type int [line: 27]
.   .   .   .   .   Child: 1  Const 12 of type int [line: 27]
.   .   .   .   Child: 1  While [line: 27]
.   .   .   .   .   Child: 0  Op: > of type (null) [line: 27]
.   .   .   .   .   .   Child: 0  Id: y of type int [line: 27]
.   .   .   .   .   .   Child: 1  Const 13 of type int [line: 27]
.   .   .   .   .   Child: 1  Const 10 of type int [line: 27]
.   .   Sibling: 17  If [line: 28]
.   .   .   Child: 0  Op: < of type (null) [line: 28]
.   .   .   .   Child: 0  Id: x of type int [line: 28]
.   .   .   .   Child: 1  Const 13 of type int [line: 28]
.   .   .   Child: 1  While [line: 28]
.   .   .   .   Child: 0  Op: > of type (null) [line: 28]
.   .   .   .   .   Child: 0  Id: y of type int [line: 28]
.   .   .   .   .   Child: 1  Const 14 of type int [line: 28]
.   .   .   .   Child: 1  Const 20 of type int [line: 28]
.   .   .   Child: 2  Const 21 of type int [line: 28]
.   .   Sibling: 18  While [line: 29]
.   .   .   Child: 0  Op: > of type (null) [line: 29]
.   .   .   .   Child: 0  Id: y of type int [line: 29]
.   .   .   .   Child: 1  Const 15 of type int [line: 29]
.   .   .   Child: 1  If [line: 29]
.   .   .   .   Child: 0  Op: < of type (null) [line: 29]
.   .   .   .   .   Child: 0  Id: x of type int [line: 29]
.   .   .   .   .   Child: 1  Const 16 of type int [line: 29]
.   .   .   .   Child: 1  Const 22 of type int [line: 29]
.   .   .   .   Child: 2  Const 23 of type int [line: 29]
.   .   Sibling: 19  While [line: 30]
.   .   .   Child: 0  Op: > of type (null) [line: 30]
.   .   .   .   Child: 0  Id: y of type int [line: 30]
.   .   .   .   Child: 1  Const 15 of type int [line: 30]
.   .   .   Child: 1  If [line: 30]
.   .   .   .   Child: 0  Op: < of type (null) [line: 30]
.   .   .   .   .   Child: 0  Id: x of type int [line: 30]
.   .   .   .   .   Child: 1  Const 16 of type int [line: 30]
.   .   .   .   Child: 1  While [line: 30]
.   .   .   .   .   Child: 0  Op: < of type (null) [line: 30]
.   .   .   .   .   .   Child: 0  Id: y of type int [line: 30]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 30]
.   .   .   .   .   Child: 1  Const 9 of type int [line: 30]
.   .   .   .   Child: 2  Const 23 of type int [line: 30]
.   .   Sibling: 20  While [line: 31]
.   .   .   Child: 0  Op: > of type (null) [line: 31]
.   .   .   .   Child: 0  Id: y of type int [line: 31]
.   .   .   .   Child: 1  Const 15 of type int [line: 31]
.   .   .   Child: 1  If [line: 31]
.   .   .   .   Child: 0  Op: < of type (null) [line: 31]
.   .   .   .   .   Child: 0  Id: x of type int [line: 31]
.   .   .   .   .   Child: 1  Const 16 of type int [line: 31]
.   .   .   .   Child: 1  While [line: 31]
.   .   .   .   .   Child: 0  Op: < of type (null) [line: 31]
.   .   .   .   .   .   Child: 0  Id: y of type int [line: 31]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 31]
.   .   .   .   .   Child: 1  Const 9 of type int [line: 31]
.   .   .   .   Child: 2  While [line: 31]
.   .   .   .   .   Child: 0  Op: > of type (null) [line: 31]
.   .   .   .   .   .   Child: 0  Id: y of type int [line: 31]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 31]
.   .   .   .   .   Child: 1  Const 23 of type int [line: 31]
.   .   Sibling: 21  While [line: 32]
.   .   .   Child: 0  Op: > of type (null) [line: 32]
.   .   .   .   Child: 0  Id: y of type int [line: 32]
.   .   .   .   Child: 1  Const 15 of type int [line: 32]
.   .   .   Child: 1  If [line: 32]
.   .   .   .   Child: 0  Op: < of type (null) [line: 32]
.   .   .   .   .   Child: 0  Id: x of type int [line: 32]
.   .   .   .   .   Child: 1  Const 16 of type int [line: 32]
.   .   .   .   Child: 1  While [line: 32]
.   .   .   .   .   Child: 0  Op: < of type (null) [line: 32]
.   .   .   .   .   .   Child: 0  Id: y of type int [line: 32]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 32]
.   .   .   .   .   Child: 1  If [line: 32]
.   .   .   .   .   .   Child: 0  Id: b of type bool [line: 32]
.   .   .   .   .   .   Child: 1  Const 34 of type int [line: 32]
.   .   .   .   .   .   Child: 2  Const 34 of type int [line: 32]
.   .   .   .   Child: 2  While [line: 32]
.   .   .   .   .   Child: 0  Op: > of type (null) [line: 32]
.   .   .   .   .   .   Child: 0  Id: y of type int [line: 32]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 32]
.   .   .   .   .   Child: 1  Const 23 of type int [line: 32]
.   .   Sibling: 22  While [line: 33]
.   .   .   Child: 0  Op: > of type (null) [line: 33]
.   .   .   .   Child: 0  Id: y of type int [line: 33]
.   .   .   .   Child: 1  Const 15 of type int [line: 33]
.   .   .   Child: 1  If [line: 33]
.   .   .   .   Child: 0  Op: < of type (null) [line: 33]
.   .   .   .   .   Child: 0  Id: x of type int [line: 33]
.   .   .   .   .   Child: 1  Const 16 of type int [line: 33]
.   .   .   .   Child: 1  Compound [line: 33]
.   .   .   .   .   Child: 1  While [line: 33]
.   .   .   .   .   .   Child: 0  Op: < of type (null) [line: 33]
.   .   .   .   .   .   .   Child: 0  Id: y of type int [line: 33]
.   .   .   .   .   .   .   Child: 1  Const 3 of type int [line: 33]
.   .   .   .   .   .   Child: 1  If [line: 33]
.   .   .   .   .   .   .   Child: 0  Id: b of type bool [line: 33]
.   .   .   .   .   .   .   Child: 1  Const 34 of type int [line: 33]
.   .   .   .   Child: 2  While [line: 33]
.   .   .   .   .   Child: 0  Op: > of type (null) [line: 33]
.   .   .   .   .   .   Child: 0  Id: y of type int [line: 33]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 33]
.   .   .   .   .   Child: 1  Const 23 of type int [line: 33]
.   .   Sibling: 23  While [line: 35]
.   .   .   Child: 0  Id: b of type bool [line: 35]
.   .   .   Child: 1  While [line: 35]
.   .   .   .   Child: 0  Id: b of type bool [line: 35]
.   .   .   .   Child: 1  If [line: 35]
.   .   .   .   .   Child: 0  Id: b of type bool [line: 35]
.   .   .   .   .   Child: 1  Id: x of type int [line: 35]
.   .   .   .   .   Child: 2  Id: y of type int [line: 35]
.   .   Sibling: 24  While [line: 36]
.   .   .   Child: 0  Id: b of type bool [line: 36]
.   .   .   Child: 1  While [line: 36]
.   .   .   .   Child: 0  Id: b of type bool [line: 36]
.   .   .   .   Child: 1  If [line: 36]
.   .   .   .   .   Child: 0  Id: b of type bool [line: 36]
.   .   .   .   .   Child: 1  Id: x of type int [line: 36]
.   .   Sibling: 25  If [line: 36]
.   .   .   Child: 0  Id: b of type bool [line: 36]
.   .   .   Child: 1  Id: y of type int [line: 36]
.   .   .   Child: 2  Id: z of type int [line: 36]
.   .   Sibling: 26  While [line: 38]
.   .   .   Child: 0  Id: b of type bool [line: 38]
.   .   .   Child: 1  While [line: 38]
.   .   .   .   Child: 0  Id: b of type bool [line: 38]
.   .   .   .   Child: 1  If [line: 38]
.   .   .   .   .   Child: 0  Id: b of type bool [line: 38]
.   .   .   .   .   Child: 1  Id: x of type int [line: 38]
.   .   Sibling: 27  While [line: 39]
.   .   .   Child: 0  Id: b of type bool [line: 39]
.   .   .   Child: 1  While [line: 39]
.   .   .   .   Child: 0  Id: b of type bool [line: 39]
.   .   .   .   Child: 1  If [line: 39]
.   .   .   .   .   Child: 0  Id: b of type bool [line: 39]
.   .   .   .   .   Child: 1  Id: x of type int [line: 39]
.   .   Sibling: 28  If [line: 39]
.   .   .   Child: 0  Id: b of type bool [line: 39]
.   .   .   Child: 1  Id: y of type int [line: 39]
.   .   Sibling: 29  While [line: 41]
.   .   .   Child: 0  Id: b of type bool [line: 41]
.   .   .   Child: 1  If [line: 41]
.   .   .   .   Child: 0  Id: c of type bool [line: 41]
.   .   .   .   Child: 1  While [line: 41]
.   .   .   .   .   Child: 0  Id: b of type bool [line: 41]
.   .   .   .   .   Child: 1  If [line: 41]
.   .   .   .   .   .   Child: 0  Id: b of type bool [line: 41]
.   .   .   .   .   .   Child: 1  Id: x of type int [line: 41]
.   .   .   .   .   .   Child: 2  Id: y of type int [line: 41]
.   .   Sibling: 30  While [line: 42]
.   .   .   Child: 0  Id: b of type bool [line: 42]
.   .   .   Child: 1  If [line: 42]
.   .   .   .   Child: 0  Id: c of type bool [line: 42]
.   .   .   .   Child: 1  While [line: 42]
.   .   .   .   .   Child: 0  Id: b of type bool [line: 42]
.   .   .   .   .   Child: 1  If [line: 42]
.   .   .   .   .   .   Child: 0  Id: b of type bool [line: 42]
.   .   .   .   .   .   Child: 1  Id: x of type int [line: 42]
.   .   Sibling: 31  If [line: 42]
.   .   .   Child: 0  Id: b of type bool [line: 42]
.   .   .   Child: 1  Id: y of type int [line: 42]
.   .   .   Child: 2  Id: z of type int [line: 42]
.   .   Sibling: 32  If [line: 44]
.   .   .   Child: 0  Id: c of type bool [line: 44]
.   .   .   Child: 1  While [line: 44]
.   .   .   .   Child: 0  Id: b of type bool [line: 44]
.   .   .   .   Child: 1  While [line: 44]
.   .   .   .   .   Child: 0  Id: b of type bool [line: 44]
.   .   .   .   .   Child: 1  If [line: 44]
.   .   .   .   .   .   Child: 0  Id: b of type bool [line: 44]
.   .   .   .   .   .   Child: 1  Id: x of type int [line: 44]
.   .   .   .   .   .   Child: 2  Id: y of type int [line: 44]
.   .   Sibling: 33  If [line: 45]
.   .   .   Child: 0  Id: c of type bool [line: 45]
.   .   .   Child: 1  While [line: 45]
.   .   .   .   Child: 0  Id: b of type bool [line: 45]
.   .   .   .   Child: 1  While [line: 45]
.   .   .   .   .   Child: 0  Id: b of type bool [line: 45]
.   .   .   .   .   Child: 1  If [line: 45]
.   .   .   .   .   .   Child: 0  Id: b of type bool [line: 45]
.   .   .   .   .   .   Child: 1  Id: x of type int [line: 45]
.   .   Sibling: 34  If [line: 45]
.   .   .   Child: 0  Id: b of type bool [line: 45]
.   .   .   Child: 1  Id: y of type int [line: 45]
.   .   .   Child: 2  Id: z of type int [line: 45]
.   .   Sibling: 35  If [line: 47]
.   .   .   Child: 0  Id: c of type bool [line: 47]
.   .   .   Child: 1  While [line: 47]
.   .   .   .   Child: 0  Id: b of type bool [line: 47]
.   .   .   .   Child: 1  While [line: 47]
.   .   .   .   .   Child: 0  Id: b of type bool [line: 47]
.   .   .   .   .   Child: 1  If [line: 47]
.   .   .   .   .   .   Child: 0  Id: b of type bool [line: 47]
.   .   .   .   .   .   Child: 1  Id: x of type int [line: 47]
.   .   .   .   .   .   Child: 2  Id: y of type int [line: 47]
.   .   .   Child: 2  Id: z of type int [line: 47]
.   .   Sibling: 36  While [line: 49]
.   .   .   Child: 0  Id: a of type bool [line: 49]
.   .   .   Child: 1  While [line: 49]
.   .   .   .   Child: 0  Id: b of type bool [line: 49]
.   .   .   .   Child: 1  While [line: 49]
.   .   .   .   .   Child: 0  Id: c of type bool [line: 49]
.   .   .   .   .   Child: 1  While [line: 49]
.   .   .   .   .   .   Child: 0  Id: d of type bool [line: 49]
.   .   .   .   .   .   Child: 1  Id: e of type bool [line: 49]
.   .   Sibling: 37  If [line: 50]
.   .   .   Child: 0  Id: a of type bool [line: 50]
.   .   .   Child: 1  If [line: 50]
.   .   .   .   Child: 0  Id: b of type bool [line: 50]
.   .   .   .   Child: 1  If [line: 50]
.   .   .   .   .   Child: 0  Id: c of type bool [line: 50]
.   .   .   .   .   Child: 1  If [line: 50]
.   .   .   .   .   .   Child: 0  Id: d of type bool [line: 50]
.   .   .   .   .   .   Child: 1  Id: e of type bool [line: 50]
.   .   Sibling: 38  If [line: 51]
.   .   .   Child: 0  Id: a of type bool [line: 51]
.   .   .   Child: 2  If [line: 51]
.   .   .   .   Child: 0  Id: b of type bool [line: 51]
.   .   .   .   Child: 2  If [line: 51]
.   .   .   .   .   Child: 0  Id: c of type bool [line: 51]
.   .   .   .   .   Child: 2  If [line: 51]
.   .   .   .   .   .   Child: 0  Id: d of type bool [line: 51]
.   .   .   .   .   .   Child: 2  Id: e of type bool [line: 51]
.   .   Sibling: 39  Return [line: 53]
.   .   .   Child: 0  Op: * of type (null) [line: 53]
.   .   .   .   Child: 0  Id: x of type int [line: 53]
.   .   .   .   Child: 1  Id: y of type int [line: 53]
Number of warnings: 0
Number of errors: 55

* End of testing
Kill all remaining c- processes
=================================================
Output Comparison
ztest zexpected differ: char 3455, line 79

Your output differs from the expected output.
digits in the day and time were changed to # for comparison.
This is a two column comparison with YOUR OUTPUT ON THE LEFT
with the EXPECTED OUTPUT ON THE RIGHT.
Limited to 30 seconds total run time and 8000 lines of output                                                           Limited to 30 seconds total run time and 8000 lines of output

* ================================================ *                                                                    * ================================================ *
| Tests for CS445 Assignment 3 |                                                                                        | Tests for CS445 Assignment 3 |
| Comparison with Expected Output |                                                                                     | Comparison with Expected Output |
| Semantic Analysis I |                                                                                                 | Semantic Analysis I |
| Errors and Warnings will be sorted by line num |                                                                      | Errors and Warnings will be sorted by line num |
| |                                                                                                                     | |
* ================================================ *                                                                    * ================================================ *

/home/rs-cs-heckendo/TestWorld                                                                                          /home/rs-cs-heckendo/TestWorld
-rwxrwxrwx jp/jp 1520 2021-12-22 08:44 allbad.c-                                                                        -rwxrwxrwx jp/jp 1520 2021-12-22 08:44 allbad.c-
-rwxrwxrwx jp/jp 1284 2021-12-22 08:44 allgood.c-                                                                       -rwxrwxrwx jp/jp 1284 2021-12-22 08:44 allgood.c-
-rwxrwxrwx jp/jp 175 2021-12-22 08:44 array.c-                                                                          -rwxrwxrwx jp/jp 175 2021-12-22 08:44 array.c-
-rwxrwxrwx jp/jp 860 2021-12-22 08:44 arrayops.c-                                                                       -rwxrwxrwx jp/jp 860 2021-12-22 08:44 arrayops.c-
-rwxrwxrwx jp/jp 273 2021-12-22 08:44 arrayx.c-                                                                         -rwxrwxrwx jp/jp 273 2021-12-22 08:44 arrayx.c-
-rwxrwxrwx jp/jp 175 2021-12-22 08:44 assignb.c-                                                                        -rwxrwxrwx jp/jp 175 2021-12-22 08:44 assignb.c-
-rwxrwxrwx jp/jp 492 2021-12-22 08:44 assignBool.c-                                                                     -rwxrwxrwx jp/jp 492 2021-12-22 08:44 assignBool.c-
-rwxrwxrwx jp/jp 483 2021-12-22 08:44 assignChar.c-                                                                     -rwxrwxrwx jp/jp 483 2021-12-22 08:44 assignChar.c-
-rwxrwxrwx jp/jp 470 2021-12-22 08:44 assignInt.c-                                                                      -rwxrwxrwx jp/jp 470 2021-12-22 08:44 assignInt.c-
-rwxrwxrwx jp/jp 281 2021-12-22 08:44 break2.c-                                                                         -rwxrwxrwx jp/jp 281 2021-12-22 08:44 break2.c-
-rwxrwxrwx jp/jp 110 2021-12-22 08:44 break3.c-                                                                         -rwxrwxrwx jp/jp 110 2021-12-22 08:44 break3.c-
-rwxrwxrwx jp/jp 155 2021-12-22 08:44 break4.c-                                                                         -rwxrwxrwx jp/jp 155 2021-12-22 08:44 break4.c-
-rwxrwxrwx jp/jp 122 2021-12-22 08:44 break.c-                                                                          -rwxrwxrwx jp/jp 122 2021-12-22 08:44 break.c-
-rwxrwxrwx jp/jp 340 2021-12-22 08:44 call2.c-                                                                          -rwxrwxrwx jp/jp 340 2021-12-22 08:44 call2.c-
-rwxrwxrwx jp/jp 415 2021-12-22 08:44 call3.c-                                                                          -rwxrwxrwx jp/jp 415 2021-12-22 08:44 call3.c-
-rwxrwxrwx jp/jp 929 2021-12-22 08:44 call.c-                                                                           -rwxrwxrwx jp/jp 929 2021-12-22 08:44 call.c-
-rwxrwxrwx jp/jp 293 2021-12-22 08:44 callerr.c-                                                                        -rwxrwxrwx jp/jp 293 2021-12-22 08:44 callerr.c-
-rwxrwxrwx jp/jp 117 2021-12-22 08:44 constants.c-                                                                      -rwxrwxrwx jp/jp 117 2021-12-22 08:44 constants.c-
-rwxrwxrwx jp/jp 1148 2021-12-22 08:44 cover.c-                                                                         -rwxrwxrwx jp/jp 1148 2021-12-22 08:44 cover.c-
-rwxrwxrwx jp/jp 62 2021-12-22 08:44 decl.c-                                                                            -rwxrwxrwx jp/jp 62 2021-12-22 08:44 decl.c-
-rwxrwxrwx jp/jp 206 2021-12-22 08:44 emptyline.c-                                                                      -rwxrwxrwx jp/jp 206 2021-12-22 08:44 emptyline.c-
-rwxrwxrwx jp/jp 3288 2021-12-22 08:44 everythingS22.c-                                                                 -rwxrwxrwx jp/jp 3288 2021-12-22 08:44 everythingS22.c-
-rwxrwxrwx jp/jp 1079 2021-12-22 08:44 exp.c-                                                                           -rwxrwxrwx jp/jp 1079 2021-12-22 08:44 exp.c-
-rwxrwxrwx jp/jp 59 2021-12-22 08:44 expL.c-                                                                            -rwxrwxrwx jp/jp 59 2021-12-22 08:44 expL.c-
-rwxrwxrwx jp/jp 59 2021-12-22 08:44 expR.c-                                                                            -rwxrwxrwx jp/jp 59 2021-12-22 08:44 expR.c-
-rwxrwxrwx jp/jp 164 2021-12-22 08:44 for2.c-                                                                           -rwxrwxrwx jp/jp 164 2021-12-22 08:44 for2.c-
-rwxrwxrwx jp/jp 200 2021-12-22 08:44 fora.c-                                                                           -rwxrwxrwx jp/jp 200 2021-12-22 08:44 fora.c-
-rwxrwxrwx jp/jp 137 2021-12-22 08:44 forb.c-                                                                           -rwxrwxrwx jp/jp 137 2021-12-22 08:44 forb.c-
-rwxrwxrwx jp/jp 463 2021-12-22 08:44 for.c-                                                                            -rwxrwxrwx jp/jp 463 2021-12-22 08:44 for.c-
-rwxrwxrwx jp/jp 984 2021-12-22 08:44 forscope.c-                                                                       -rwxrwxrwx jp/jp 984 2021-12-22 08:44 forscope.c-
-rwxrwxrwx jp/jp 763 2021-12-22 08:44 funcscope.c-                                                                      -rwxrwxrwx jp/jp 763 2021-12-22 08:44 funcscope.c-
-rwxrwxrwx jp/jp 112 2021-12-22 08:44 if.c-                                                                             -rwxrwxrwx jp/jp 112 2021-12-22 08:44 if.c-
-rwxrwxrwx jp/jp 299 2021-12-22 08:44 ifNest.c-                                                                         -rwxrwxrwx jp/jp 299 2021-12-22 08:44 ifNest.c-
-rwxrwxrwx jp/jp 272 2021-12-22 08:44 init2.c-                                                                          -rwxrwxrwx jp/jp 272 2021-12-22 08:44 init2.c-
-rwxrwxrwx jp/jp 411 2021-12-22 08:44 init3.c-                                                                          -rwxrwxrwx jp/jp 411 2021-12-22 08:44 init3.c-
-rwxrwxrwx jp/jp 105 2021-12-22 08:44 init4.c-                                                                          -rwxrwxrwx jp/jp 105 2021-12-22 08:44 init4.c-
-rwxrwxrwx jp/jp 146 2021-12-22 08:44 init.c-                                                                           -rwxrwxrwx jp/jp 146 2021-12-22 08:44 init.c-
-rwxrwxrwx jp/jp 298 2021-12-22 08:44 mixedControl2.c-                                                                  -rwxrwxrwx jp/jp 298 2021-12-22 08:44 mixedControl2.c-
-rwxrwxrwx jp/jp 360 2021-12-22 08:44 mixedControl3.c-                                                                  -rwxrwxrwx jp/jp 360 2021-12-22 08:44 mixedControl3.c-
-rwxrwxrwx jp/jp 490 2021-12-22 08:44 mixedControl.c-                                                                   -rwxrwxrwx jp/jp 490 2021-12-22 08:44 mixedControl.c-
-rwxrwxrwx jp/jp 1547 2021-12-22 08:44 nest.c-                                                                          -rwxrwxrwx jp/jp 1547 2021-12-22 08:44 nest.c-
-rwxrwxrwx jp/jp 4230 2021-12-22 08:44 ops.c-                                                                           -rwxrwxrwx jp/jp 4230 2021-12-22 08:44 ops.c-
-rwxrwxrwx jp/jp 226 2021-12-22 08:44 optype.c-                                                                         -rwxrwxrwx jp/jp 226 2021-12-22 08:44 optype.c-
-rwxrwxrwx jp/jp 445 2021-12-22 08:44 overlapArray.c-                                                                   -rwxrwxrwx jp/jp 445 2021-12-22 08:44 overlapArray.c-
-rwxrwxrwx jp/jp 408 2021-12-22 08:44 overlap.c-                                                                        -rwxrwxrwx jp/jp 408 2021-12-22 08:44 overlap.c-
-rwxrwxrwx jp/jp 672 2021-12-22 08:44 overlapStatic.c-                                                                  -rwxrwxrwx jp/jp 672 2021-12-22 08:44 overlapStatic.c-
-rwxrwxrwx jp/jp 539 2021-12-22 08:44 part2.c-                                                                          -rwxrwxrwx jp/jp 539 2021-12-22 08:44 part2.c-
-rwxrwxrwx jp/jp 321 2021-12-22 08:44 randomRoll.c-                                                                     -rwxrwxrwx jp/jp 321 2021-12-22 08:44 randomRoll.c-
-rwxrwxrwx jp/jp 483 2021-12-22 08:44 return.c-                                                                         -rwxrwxrwx jp/jp 483 2021-12-22 08:44 return.c-
-rwxrwxrwx jp/jp 650 2021-12-22 08:44 scope.c-                                                                          -rwxrwxrwx jp/jp 650 2021-12-22 08:44 scope.c-
-rwxrwxrwx jp/jp 93 2021-12-22 08:44 static.c-                                                                          -rwxrwxrwx jp/jp 93 2021-12-22 08:44 static.c-
-rwxrwxrwx jp/jp 464 2021-12-22 08:44 strange.c-                                                                        -rwxrwxrwx jp/jp 464 2021-12-22 08:44 strange.c-
-rwxrwxrwx jp/jp 244 2021-12-22 08:44 types3.c-                                                                         -rwxrwxrwx jp/jp 244 2021-12-22 08:44 types3.c-
-rwxrwxrwx jp/jp 1748 2021-12-22 08:44 types.c-                                                                         -rwxrwxrwx jp/jp 1748 2021-12-22 08:44 types.c-
-rwxrwxrwx jp/jp 101 2021-12-22 08:44 undeclared.c-                                                                     -rwxrwxrwx jp/jp 101 2021-12-22 08:44 undeclared.c-
-rwxrwxrwx jp/jp 217 2021-12-22 08:44 uninit2.c-                                                                        -rwxrwxrwx jp/jp 217 2021-12-22 08:44 uninit2.c-
-rwxrwxrwx jp/jp 201 2021-12-22 08:44 uninit.c-                                                                         -rwxrwxrwx jp/jp 201 2021-12-22 08:44 uninit.c-
-rwxrwxrwx jp/jp 947 2021-12-22 08:44 varAssign.c-                                                                      -rwxrwxrwx jp/jp 947 2021-12-22 08:44 varAssign.c-
-rwxrwxrwx jp/jp 216 2021-12-22 08:44 var.c-                                                                            -rwxrwxrwx jp/jp 216 2021-12-22 08:44 var.c-
-rwxrwxrwx jp/jp 664 2021-12-22 08:44 varPair.c-                                                                        -rwxrwxrwx jp/jp 664 2021-12-22 08:44 varPair.c-
-rwxrwxrwx jp/jp 75 2021-12-22 08:44 while.c-                                                                           -rwxrwxrwx jp/jp 75 2021-12-22 08:44 while.c-
-rwxrwxrwx jp/jp 1792 2021-12-22 08:44 whileif.c-                                                                       -rwxrwxrwx jp/jp 1792 2021-12-22 08:44 whileif.c-

==============                                                                                                          ==============
==============                                                                                                          ==============
Test invalid input                                                                                                      Test invalid input
./c- gcd.c- (should produce no tree)                                                                                    ./c- gcd.c- (should produce no tree)
Error: failed to open 'gcd.c-'                                                                                    |     ERROR(ARGLIST): source file "gcd.c-" could not be opened.
                                                                                                                  >     Number of warnings: 0
                                                                                                                  >     Number of errors: 1

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P allbad.c-                                                                                                       ./c- -P allbad.c-
                                                                                                                  >     ERROR(LINKER): A function named 'main()' must be defined.
                                                                                                                  >     ERROR(7): '<-' requires operands of the same type but lhs is type bool and rhs is type int.
                                                                                                                  >     ERROR(8): '<-' requires operands of the same type but lhs is type int and rhs is type bool.
                                                                                                                  >     ERROR(9): '<-' requires operands of the same type but lhs is type int and rhs is type char.
                                                                                                                  >     ERROR(11): '>' requires operands of the same type but lhs is type bool and rhs is type int.
                                                                                                                  >     ERROR(12): '<' requires operands of the same type but lhs is type bool and rhs is type int.
                                                                                                                  >     ERROR(13): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
                                                                                                                  >     ERROR(13): '>=' requires operands of the same type but lhs is type bool and rhs is type int.
                                                                                                                  >     ERROR(14): '=' requires operands of the same type but lhs is type int and rhs is type bool.
                                                                                                                  >     ERROR(15): 'and' requires operands of type bool but lhs is of type int.
                                                                                                                  >     ERROR(15): Unary 'not' requires an operand of type bool but was given type int.
                                                                                                                  >     ERROR(16): 'or' requires operands of type bool but lhs is of type int.
                                                                                                                  >     ERROR(16): Unary 'not' requires an operand of type bool but was given type int.
                                                                                                                  >     ERROR(17): '<-' requires operands of the same type but lhs is type int and rhs is type bool.
                                                                                                                  >     ERROR(21): '+' requires operands of type int but lhs is of type bool.
                                                                                                                  >     ERROR(22): '-' requires operands of type int but rhs is of type bool.
                                                                                                                  >     ERROR(23): '*' requires operands of type int but lhs is of type bool.
                                                                                                                  >     ERROR(24): '/' requires operands of type int but rhs is of type bool.
                                                                                                                  >     ERROR(25): '%' requires operands of type int but lhs is of type bool.
                                                                                                                  >     ERROR(27): '+=' requires operands of type int but lhs is of type bool.
                                                                                                                  >     ERROR(28): '-=' requires operands of type int but lhs is of type bool.
                                                                                                                  >     ERROR(29): '*=' requires operands of type int but lhs is of type bool.
                                                                                                                  >     ERROR(30): '/=' requires operands of type int but lhs is of type bool.
                                                                                                                  >     ERROR(32): Unary 'chsign' requires an operand of type int but was given type bool.
                                                                                                                  >     ERROR(33): Unary 'not' requires an operand of type bool but was given type int.
                                                                                                                  >     ERROR(34): Unary '?' requires an operand of type int but was given type bool.
                                                                                                                  >     WARNING(42): Variable 'aa' may be uninitialized when used here.
                                                                                                                  >     ERROR(43): '<-' requires operands of the same type but lhs is type char and rhs is type int.
                                                                                                                  >     ERROR(43): Array 'ba' should be indexed by type int but got type char.
                                                                                                                  >     WARNING(43): Variable 'b' may be uninitialized when used here.
                                                                                                                  >     ERROR(44): '<-' requires operands of the same type but lhs is type int and rhs is type bool.
                                                                                                                  >     ERROR(44): Array 'ca' should be indexed by type int but got type bool.
                                                                                                                  >     WARNING(44): Variable 'c' may be uninitialized when used here.
                                                                                                                  >     ERROR(45): Array 'aa' should be indexed by type int but got type bool.
                                                                                                                  >     ERROR(45): Array index is the unindexed array 'aa'.
                                                                                                                  >     ERROR(46): Cannot index nonarray 'cat'.
                                                                                                                  >     ERROR(46): Cannot use function 'cat' as a variable.
                                                                                                                  >     ERROR(47): Cannot use function 'cat' as a variable.
                                                                                                                  >     ERROR(54): '<-' requires operands of the same type but lhs is type char and rhs is type int.
                                                                                                                  >     ERROR(65): '<-' requires operands of the same type but lhs is type int and rhs is type char.
                                                                                                                  >     ERROR(67): Cannot return an array.
                                                                                                                  >     WARNING(73): Variable 'i' may be uninitialized when used here.
                                                                                                                  >     ERROR(79): Symbol 'a' is already declared at line 79.
                                                                                                                  >     ERROR(81): Symbol 'a' is already declared at line 79.
                                                                                                                  >     ERROR(82): Symbol 'b' is not declared.
                                                                                                                  >     WARNING(84): The variable 'a' seems not to be used.
                                                                                                                  >     ERROR(85): Symbol 'c' is not declared.
                                                                                                                  >     ERROR(85): Symbol 'c' is not declared.
                                                                                                                  >     ERROR(86): Symbol 'c' is not declared.
                                                                                                                  >     WARNING(86): Variable 'b' may be uninitialized when used here.
                                                                                                                  >     ERROR(96): The operation '?' does not work with arrays.
                                                                                                                  >     ERROR(96): Unary '?' requires an operand of type int but was given type char.
                                                                                                                  >     ERROR(97): '/' requires operands of type int but lhs is of type char.
                                                                                                                  >     ERROR(97): '/' requires operands of type int but rhs is of type char.
                                                                                                                  >     ERROR(97): The operation '/' does not work with arrays.
                                                                                                                  >     ERROR(98): The operation 'sizeof' only works with arrays.
                                                                                                                  >     ERROR(99): 'bbb' is a simple variable and cannot be called.
                                                                                                                  >     ERROR(102): '<-' requires operands of the same type but lhs is type char and rhs is type bool.
                                                                                                                  >     ERROR(105): '+' requires operands of type int but lhs is of type void.
                                                                                                                  >     ERROR(105): '+' requires operands of type int but rhs is of type bool.
                                                                                                                  >     ERROR(107): '+' requires operands of type int but lhs is of type char.
                                                                                                                  >     ERROR(110): Symbol 'mane' is already declared at line 91.
                                                                                                                  >     Number of warnings: 6
                                                                                                                  >     Number of errors: 56

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P allgood.c-                                                                                                      ./c- -P allgood.c-
ERROR(5) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                    |     WARNING(40): Variable 'aa' may be uninitialized when used here.
ERROR(6) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                   |     WARNING(41): Variable 'b' may be uninitialized when used here.
ERROR(7) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                   |     WARNING(42): Variable 'c' may be uninitialized when used here.
ERROR(9) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                     |     WARNING(48): The variable 'z' seems not to be used.
ERROR(10) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    |     WARNING(70): Variable 'i' may be uninitialized when used here.
ERROR(11) : '<=' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(11) : '>=' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(12) : '=' requires operands of the same type but lhs is type int and rhs is type (null).                    <
ERROR(13) : 'and' requires operands of type bool but lhs is of type (null).                                       <
ERROR(13) : Unary 'not' requires an operand of type bool but was given type (null).                               <
ERROR(14) : 'or' requires operands of type bool but lhs is of type (null).                                        <
ERROR(14) : Unary 'not' requires an operand of type bool but was given type (null).                               <
ERROR(15) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  <
ERROR(19) : '+' requires operands of type int but lhs is of type (null).                                          <
ERROR(20) : '-' requires operands of type int but rhs is of type (null).                                          <
ERROR(21) : '*' requires operands of type int but lhs is of type (null).                                          <
ERROR(22) : '/' requires operands of type int but rhs is of type (null).                                          <
ERROR(23) : '%' requires operands of type int but lhs is of type (null).                                          <
ERROR(25) : '+=' requires operands of type int but lhs is of type (null).                                         <
ERROR(26) : '-=' requires operands of type int but lhs is of type (null).                                         <
ERROR(27) : '*=' requires operands of type int but lhs is of type (null).                                         <
ERROR(28) : '/=' requires operands of type int but lhs is of type (null).                                         <
ERROR(30) : Unary 'chsign' requires an operand of type int but was given type (null).                             <
ERROR(31) : Unary 'not' requires an operand of type bool but was given type (null).                               <
ERROR(32) : Unary '?' requires an operand of type int but was given type (null).                                  <
ERROR(40) : Cannot index nonarray 'aa'.                                                                           <
ERROR(41) : Cannot index nonarray 'ba'.                                                                           <
ERROR(42) : Cannot index nonarray 'aa'.                                                                           <
ERROR(42) : Cannot index nonarray 'ca'.                                                                           <
ERROR(44) : The operation 'sizeof' only works with arrays.                                                        <
ERROR(47) : '+' requires operands of type int but lhs is of type (null).                                          <
ERROR(48) : 'and' requires operands of type bool but lhs is of type (null).                                       <
ERROR(48) : Symbol 'z' is already declared.                                                                       <
ERROR(49) : Symbol 'z' is already declared.                                                                       <
ERROR(68) : '=' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(83) : '!=' requires operands of the same type but lhs is type (null) and rhs is type char.                  <
ERROR(83) : Cannot index nonarray 'ccc'.                                                                          <
ERROR(85) : '+' requires operands of type int but lhs is of type (null).                                          <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
ant:                                                                                                              <
Scope: ant -----------------                                                                                      <
bat: ÀjÚ                                                                                                            <
Scope: bat -----------------                                                                                      <
a:                                                                                                                <
c:                                                                                                                <
cat:                                                                                                              <
Scope: cat -----------------                                                                                      <
a:                                                                                                                <
aa:                                                                                                               <
b:                                                                                                                <
ba:                                                                                                               <
c:                                                                                                                <
ca:                                                                                                               <
dog: ðBÛ                                                                                                            <
z:                                                                                                                <
Scope: dog -----------------                                                                                      <
i:                                                                                                                <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
bbb:                                                                                                              <
ccc:                                                                                                              <
=========== ============ ===========                                                                              <
0 0 59                                                                                                            <
Func: ant returns type int [line: 1]                                                                                    Func: ant returns type int [line: 1]
. Child: 1 Compound [line: 1]                                                                                           . Child: 1 Compound [line: 1]
. . Child: 1 Return [line: 1]                                                                                           . . Child: 1 Return [line: 1]
. . . Child: 0 Const 111 of type int [line: 1]                                                                          . . . Child: 0 Const 111 of type int [line: 1]
Sibling: 1 Func: bat returns type void [line: 2]                                                                        Sibling: 1 Func: bat returns type void [line: 2]
. Child: 0 Parm: a of type int [line: 2]                                                                                . Child: 0 Parm: a of type int [line: 2]
. Sibling: 1 Parm: c of type char [line: 2]                                                                             . Sibling: 1 Parm: c of type char [line: 2]
. Child: 1 Compound [line: 2]                                                                                           . Child: 1 Compound [line: 2]
. . Child: 0 Init: : of type bool [line: 3]                                                                       |     . . Child: 0 Var: b of type bool [line: 3]
. . . Child: 0 Var: b of type (null) [line: 3]                                                                    |     . . . Child: 0 Const false of type bool [line: 3]
. . . Child: 1 Const false of type bool [line: 3]                                                                 |     . . Child: 1 Assign: <- of type int [line: 5]
. . Child: 1 Assign: <- of type (null) [line: 5]                                                                  <
. . . Child: 0 Id: a of type int [line: 5]                                                                              . . . Child: 0 Id: a of type int [line: 5]
. . . Child: 1 Const 222 of type int [line: 5]                                                                          . . . Child: 1 Const 222 of type int [line: 5]
. . Sibling: 1 Assign: <- of type (null) [line: 6]                                                                |     . . Sibling: 1 Assign: <- of type bool [line: 6]
. . . Child: 0 Id: b of type (null) [line: 6]                                                                     |     . . . Child: 0 Id: b of type bool [line: 6]
. . . Child: 1 Const true of type bool [line: 6]                                                                        . . . Child: 1 Const true of type bool [line: 6]
. . Sibling: 2 Assign: <- of type (null) [line: 7]                                                                |     . . Sibling: 2 Assign: <- of type char [line: 7]
. . . Child: 0 Id: c of type char [line: 7]                                                                             . . . Child: 0 Id: c of type char [line: 7]
. . . Child: 1 Const 'z' of type char [line: 7]                                                                         . . . Child: 1 Const 'z' of type char [line: 7]
. . Sibling: 3 If [line: 9]                                                                                             . . Sibling: 3 If [line: 9]
. . . Child: 0 Op: > of type (null) [line: 9]                                                                     |     . . . Child: 0 Op: > of type bool [line: 9]
. . . . Child: 0 Id: a of type int [line: 9]                                                                            . . . . Child: 0 Id: a of type int [line: 9]
. . . . Child: 1 Const 222 of type int [line: 9]                                                                        . . . . Child: 1 Const 222 of type int [line: 9]
. . . Child: 1 Const 333 of type int [line: 9]                                                                          . . . Child: 1 Const 333 of type int [line: 9]
. . Sibling: 4 If [line: 10]                                                                                            . . Sibling: 4 If [line: 10]
. . . Child: 0 Op: < of type (null) [line: 10]                                                                    |     . . . Child: 0 Op: < of type bool [line: 10]
. . . . Child: 0 Id: a of type int [line: 10]                                                                           . . . . Child: 0 Id: a of type int [line: 10]
. . . . Child: 1 Const 333 of type int [line: 10]                                                                       . . . . Child: 1 Const 333 of type int [line: 10]
. . . Child: 1 Const 444 of type int [line: 10]                                                                         . . . Child: 1 Const 444 of type int [line: 10]
. . . Child: 2 Const 555 of type int [line: 10]                                                                         . . . Child: 2 Const 555 of type int [line: 10]
. . Sibling: 5 If [line: 11]                                                                                            . . Sibling: 5 If [line: 11]
. . . Child: 0 Op: <= of type (null) [line: 11]                                                                   |     . . . Child: 0 Op: <= of type bool [line: 11]
. . . . Child: 0 Id: a of type int [line: 11]                                                                           . . . . Child: 0 Id: a of type int [line: 11]
. . . . Child: 1 Const 666 of type int [line: 11]                                                                       . . . . Child: 1 Const 666 of type int [line: 11]
. . . Child: 1 If [line: 11]                                                                                            . . . Child: 1 If [line: 11]
. . . . Child: 0 Op: >= of type (null) [line: 11]                                                                 |     . . . . Child: 0 Op: >= of type bool [line: 11]
. . . . . Child: 0 Id: a of type int [line: 11]                                                                         . . . . . Child: 0 Id: a of type int [line: 11]
. . . . . Child: 1 Const 777 of type int [line: 11]                                                                     . . . . . Child: 1 Const 777 of type int [line: 11]
. . . . Child: 1 Const 888 of type int [line: 11]                                                                       . . . . Child: 1 Const 888 of type int [line: 11]
. . . . Child: 2 Const 555 of type int [line: 11]                                                                       . . . . Child: 2 Const 555 of type int [line: 11]
. . Sibling: 6 While [line: 12]                                                                                         . . Sibling: 6 While [line: 12]
. . . Child: 0 Op: = of type (null) [line: 12]                                                                    |     . . . Child: 0 Op: = of type bool [line: 12]
. . . . Child: 0 Const 999 of type int [line: 12]                                                                       . . . . Child: 0 Const 999 of type int [line: 12]
. . . . Child: 1 Id: a of type int [line: 12]                                                                           . . . . Child: 1 Id: a of type int [line: 12]
. . . Child: 1 Const 1010 of type int [line: 12]                                                                        . . . Child: 1 Const 1010 of type int [line: 12]
. . Sibling: 7 If [line: 13]                                                                                            . . Sibling: 7 If [line: 13]
. . . Child: 0 Id: b of type (null) [line: 13]                                                                    |     . . . Child: 0 Id: b of type bool [line: 13]
. . . Child: 1 If [line: 13]                                                                                            . . . Child: 1 If [line: 13]
. . . . Child: 0 Op: not of type (null) [line: 13]                                                                |     . . . . Child: 0 Op: not of type bool [line: 13]
. . . . . Child: 0 Id: b of type (null) [line: 13]                                                                |     . . . . . Child: 0 Id: b of type bool [line: 13]
. . . . Child: 1 While [line: 13]                                                                                       . . . . Child: 1 While [line: 13]
. . . . . Child: 0 Op: and of type (null) [line: 13]                                                              |     . . . . . Child: 0 Op: and of type bool [line: 13]
. . . . . . Child: 0 Id: b of type (null) [line: 13]                                                              |     . . . . . . Child: 0 Id: b of type bool [line: 13]
. . . . . . Child: 1 Const true of type bool [line: 13]                                                                 . . . . . . Child: 1 Const true of type bool [line: 13]
. . . . . Child: 1 Const 1111 of type int [line: 13]                                                                    . . . . . Child: 1 Const 1111 of type int [line: 13]
. . . . Child: 2 Const 1212 of type int [line: 13]                                                                      . . . . Child: 2 Const 1212 of type int [line: 13]
. . Sibling: 8 If [line: 14]                                                                                            . . Sibling: 8 If [line: 14]
. . . Child: 0 Id: b of type (null) [line: 14]                                                                    |     . . . Child: 0 Id: b of type bool [line: 14]
. . . Child: 1 If [line: 14]                                                                                            . . . Child: 1 If [line: 14]
. . . . Child: 0 Op: not of type (null) [line: 14]                                                                |     . . . . Child: 0 Op: not of type bool [line: 14]
. . . . . Child: 0 Id: b of type (null) [line: 14]                                                                |     . . . . . Child: 0 Id: b of type bool [line: 14]
. . . . Child: 1 While [line: 14]                                                                                       . . . . Child: 1 While [line: 14]
. . . . . Child: 0 Op: or of type (null) [line: 14]                                                               |     . . . . . Child: 0 Op: or of type bool [line: 14]
. . . . . . Child: 0 Id: b of type (null) [line: 14]                                                              |     . . . . . . Child: 0 Id: b of type bool [line: 14]
. . . . . . Child: 1 Const true of type bool [line: 14]                                                                 . . . . . . Child: 1 Const true of type bool [line: 14]
. . . . . Child: 1 Const 1313 of type int [line: 14]                                                                    . . . . . Child: 1 Const 1313 of type int [line: 14]
. . . . Child: 2 Const 1414 of type int [line: 14]                                                                      . . . . Child: 2 Const 1414 of type int [line: 14]
. . . Child: 2 Const 1515 of type int [line: 14]                                                                        . . . Child: 2 Const 1515 of type int [line: 14]
. . Sibling: 9 If [line: 15]                                                                                            . . Sibling: 9 If [line: 15]
. . . Child: 0 Assign: <- of type (null) [line: 15]                                                               |     . . . Child: 0 Assign: <- of type bool [line: 15]
. . . . Child: 0 Id: b of type (null) [line: 15]                                                                  |     . . . . Child: 0 Id: b of type bool [line: 15]
. . . . Child: 1 Const true of type bool [line: 15]                                                                     . . . . Child: 1 Const true of type bool [line: 15]
. . . Child: 1 Const 1616 of type int [line: 15]                                                                        . . . Child: 1 Const 1616 of type int [line: 15]
. . Sibling: 10 While [line: 17]                                                                                        . . Sibling: 10 While [line: 17]
. . . Child: 0 Const false of type bool [line: 17]                                                                      . . . Child: 0 Const false of type bool [line: 17]
. . . Child: 1 Break [line: 17]                                                                                         . . . Child: 1 Break [line: 17]
. . Sibling: 11 Op: + of type (null) [line: 19]                                                                   |     . . Sibling: 11 Op: + of type int [line: 19]
. . . Child: 0 Id: a of type int [line: 19]                                                                             . . . Child: 0 Id: a of type int [line: 19]
. . . Child: 1 Const 1717 of type int [line: 19]                                                                        . . . Child: 1 Const 1717 of type int [line: 19]
. . Sibling: 12 Op: - of type (null) [line: 20]                                                                   |     . . Sibling: 12 Op: - of type int [line: 20]
. . . Child: 0 Const 1818 of type int [line: 20]                                                                        . . . Child: 0 Const 1818 of type int [line: 20]
. . . Child: 1 Id: a of type int [line: 20]                                                                             . . . Child: 1 Id: a of type int [line: 20]
. . Sibling: 13 Op: * of type (null) [line: 21]                                                                   |     . . Sibling: 13 Op: * of type int [line: 21]
. . . Child: 0 Id: a of type int [line: 21]                                                                             . . . Child: 0 Id: a of type int [line: 21]
. . . Child: 1 Const 1919 of type int [line: 21]                                                                        . . . Child: 1 Const 1919 of type int [line: 21]
. . Sibling: 14 Op: / of type (null) [line: 22]                                                                   |     . . Sibling: 14 Op: / of type int [line: 22]
. . . Child: 0 Const 2020 of type int [line: 22]                                                                        . . . Child: 0 Const 2020 of type int [line: 22]
. . . Child: 1 Id: a of type int [line: 22]                                                                             . . . Child: 1 Id: a of type int [line: 22]
. . Sibling: 15 Op: % of type (null) [line: 23]                                                                   |     . . Sibling: 15 Op: % of type int [line: 23]
. . . Child: 0 Id: a of type int [line: 23]                                                                             . . . Child: 0 Id: a of type int [line: 23]
. . . Child: 1 Const 2121 of type int [line: 23]                                                                        . . . Child: 1 Const 2121 of type int [line: 23]
. . Sibling: 16 Assign: += of type (null) [line: 25]                                                              |     . . Sibling: 16 Assign: += of type int [line: 25]
. . . Child: 0 Id: a of type int [line: 25]                                                                             . . . Child: 0 Id: a of type int [line: 25]
. . . Child: 1 Const 1 of type int [line: 25]                                                                           . . . Child: 1 Const 1 of type int [line: 25]
. . Sibling: 17 Assign: -= of type (null) [line: 26]                                                              |     . . Sibling: 17 Assign: -= of type int [line: 26]
. . . Child: 0 Id: a of type int [line: 26]                                                                             . . . Child: 0 Id: a of type int [line: 26]
. . . Child: 1 Const 2 of type int [line: 26]                                                                           . . . Child: 1 Const 2 of type int [line: 26]
. . Sibling: 18 Assign: *= of type (null) [line: 27]                                                              |     . . Sibling: 18 Assign: *= of type int [line: 27]
. . . Child: 0 Id: a of type int [line: 27]                                                                             . . . Child: 0 Id: a of type int [line: 27]
. . . Child: 1 Const 3 of type int [line: 27]                                                                           . . . Child: 1 Const 3 of type int [line: 27]
. . Sibling: 19 Assign: /= of type (null) [line: 28]                                                              |     . . Sibling: 19 Assign: /= of type int [line: 28]
. . . Child: 0 Id: a of type int [line: 28]                                                                             . . . Child: 0 Id: a of type int [line: 28]
. . . Child: 1 Const 4 of type int [line: 28]                                                                           . . . Child: 1 Const 4 of type int [line: 28]
. . Sibling: 20 Op: chsign of type (null) [line: 30]                                                              |     . . Sibling: 20 Op: chsign of type int [line: 30]
. . . Child: 0 Id: a of type int [line: 30]                                                                             . . . Child: 0 Id: a of type int [line: 30]
. . Sibling: 21 Op: not of type (null) [line: 31]                                                                 |     . . Sibling: 21 Op: not of type bool [line: 31]
. . . Child: 0 Id: b of type (null) [line: 31]                                                                    |     . . . Child: 0 Id: b of type bool [line: 31]
. . Sibling: 22 Op: ? of type (null) [line: 32]                                                                   |     . . Sibling: 22 Op: ? of type int [line: 32]
. . . Child: 0 Id: a of type int [line: 32]                                                                             . . . Child: 0 Id: a of type int [line: 32]
Sibling: 2 Func: cat returns type char [line: 35]                                                                       Sibling: 2 Func: cat returns type char [line: 35]
. Child: 1 Compound [line: 36]                                                                                          . Child: 1 Compound [line: 36]
. . Child: 0 Var: a of type int [line: 37]                                                                              . . Child: 0 Var: a of type int [line: 37]
. . Sibling: 1 Var: b of type bool [line: 37]                                                                           . . Sibling: 1 Var: b of type bool [line: 37]
. . Sibling: 2 Var: c of type char [line: 37]                                                                           . . Sibling: 2 Var: c of type char [line: 37]
. . Sibling: 3 Var: aa of array of type int [line: 38]                                                            |     . . Sibling: 3 Var: aa is array of type int [line: 38]
. . Sibling: 4 Var: ba of array of type bool [line: 38]                                                           |     . . Sibling: 4 Var: ba is array of type bool [line: 38]
. . Sibling: 5 Var: ca of array of type char [line: 38]                                                           |     . . Sibling: 5 Var: ca is array of type char [line: 38]
. . Child: 1 Op: [ of type (null) [line: 40]                                                                      |     . . Child: 1 Op: [ of type int [line: 40]
. . . Child: 0 Id: aa of type int [line: 40]                                                                            . . . Child: 0 Id: aa of type int [line: 40]
. . . Child: 1 Const 2 of type int [line: 40]                                                                           . . . Child: 1 Const 2 of type int [line: 40]
. . Sibling: 1 Assign: <- of type (null) [line: 41]                                                               |     . . Sibling: 1 Assign: <- of type bool [line: 41]
. . . Child: 0 Op: [ of type (null) [line: 41]                                                                    |     . . . Child: 0 Op: [ of type bool [line: 41]
. . . . Child: 0 Id: ba of type bool [line: 41]                                                                         . . . . Child: 0 Id: ba of type bool [line: 41]
. . . . Child: 1 Id: a of type int [line: 41]                                                                           . . . . Child: 1 Id: a of type int [line: 41]
. . . Child: 1 Id: b of type bool [line: 41]                                                                            . . . Child: 1 Id: b of type bool [line: 41]
. . Sibling: 2 Assign: <- of type (null) [line: 42]                                                               |     . . Sibling: 2 Assign: <- of type char [line: 42]
. . . Child: 0 Op: [ of type (null) [line: 42]                                                                    |     . . . Child: 0 Op: [ of type char [line: 42]
. . . . Child: 0 Id: ca of type char [line: 42]                                                                         . . . . Child: 0 Id: ca of type char [line: 42]
. . . . Child: 1 Op: [ of type (null) [line: 42]                                                                  |     . . . . Child: 1 Op: [ of type int [line: 42]
. . . . . Child: 0 Id: aa of type int [line: 42]                                                                        . . . . . Child: 0 Id: aa of type int [line: 42]
. . . . . Child: 1 Const 1 of type int [line: 42]                                                                       . . . . . Child: 1 Const 1 of type int [line: 42]
. . . Child: 1 Id: c of type char [line: 42]                                                                            . . . Child: 1 Id: c of type char [line: 42]
. . Sibling: 3 Op: sizeof of type (null) [line: 44]                                                               |     . . Sibling: 3 Op: sizeof of type int [line: 44]
. . . Child: 0 Id: ba of type bool [line: 44]                                                                           . . . Child: 0 Id: ba of type bool [line: 44]
. . Sibling: 4 Op: ? of type (null) [line: 45]                                                                    |     . . Sibling: 4 Op: ? of type int [line: 45]
. . . Child: 0 Const 11 of type int [line: 45]                                                                          . . . Child: 0 Const 11 of type int [line: 45]
. . Sibling: 5 For [line: 47]                                                                                           . . Sibling: 5 For [line: 47]
. . . Child: 0 Var: z of type int [line: 47]                                                                            . . . Child: 0 Var: z of type int [line: 47]
. . . Child: 1 Range [line: 47]                                                                                         . . . Child: 1 Range [line: 47]
. . . . Child: 0 Id: aa of type int [line: 47]                                                                    |     . . . . Child: 0 Id: aa of undefined type [line: 47]
. . . . Child: 1 Id: aa of type int [line: 47]                                                                    |     . . . . Child: 1 Id: aa of undefined type [line: 47]
. . . Child: 2 Op: + of type (null) [line: 47]                                                                    |     . . . Child: 2 Op: + of type int [line: 47]
. . . . Child: 0 Id: z of type int [line: 47]                                                                           . . . . Child: 0 Id: z of type int [line: 47]
. . . . Child: 1 Id: z of type int [line: 47]                                                                           . . . . Child: 1 Id: z of type int [line: 47]
. . Sibling: 6 For [line: 48]                                                                                           . . Sibling: 6 For [line: 48]
. . . Child: 0 Var: z of type int [line: 48]                                                                            . . . Child: 0 Var: z of type int [line: 48]
. . . Child: 1 Range [line: 48]                                                                                         . . . Child: 1 Range [line: 48]
. . . . Child: 0 Id: ba of type bool [line: 48]                                                                   |     . . . . Child: 0 Id: ba of undefined type [line: 48]
. . . . Child: 1 Id: aa of type int [line: 48]                                                                    |     . . . . Child: 1 Id: aa of undefined type [line: 48]
. . . . Child: 2 Id: aa of type int [line: 48]                                                                    |     . . . . Child: 2 Id: aa of undefined type [line: 48]
. . . Child: 2 Op: and of type (null) [line: 48]                                                                  |     . . . Child: 2 Op: and of type bool [line: 48]
. . . . Child: 0 Id: b of type bool [line: 48]                                                                          . . . . Child: 0 Id: b of type bool [line: 48]
. . . . Child: 1 Id: b of type bool [line: 48]                                                                          . . . . Child: 1 Id: b of type bool [line: 48]
. . Sibling: 7 For [line: 49]                                                                                           . . Sibling: 7 For [line: 49]
. . . Child: 0 Var: z of type int [line: 49]                                                                            . . . Child: 0 Var: z of type int [line: 49]
. . . Child: 1 Range [line: 49]                                                                                         . . . Child: 1 Range [line: 49]
. . . . Child: 0 Op: + of type (null) [line: 49]                                                                  |     . . . . Child: 0 Op: + of undefined type [line: 49]
. . . . . Child: 0 Const 3 of type int [line: 49]                                                                       . . . . . Child: 0 Const 3 of type int [line: 49]
. . . . . Child: 1 Const 4 of type int [line: 49]                                                                       . . . . . Child: 1 Const 4 of type int [line: 49]
. . . . Child: 1 Op: * of type (null) [line: 49]                                                                  |     . . . . Child: 1 Op: * of undefined type [line: 49]
. . . . . Child: 0 Const 7 of type int [line: 49]                                                                       . . . . . Child: 0 Const 7 of type int [line: 49]
. . . . . Child: 1 Const 8 of type int [line: 49]                                                                       . . . . . Child: 1 Const 8 of type int [line: 49]
. . . . Child: 2 Op: % of type (null) [line: 49]                                                                  |     . . . . Child: 2 Op: % of undefined type [line: 49]
. . . . . Child: 0 Const 15 of type int [line: 49]                                                                      . . . . . Child: 0 Const 15 of type int [line: 49]
. . . . . Child: 1 Const 3 of type int [line: 49]                                                                       . . . . . Child: 1 Const 3 of type int [line: 49]
. . . Child: 2 Compound [line: 49]                                                                                      . . . Child: 2 Compound [line: 49]
. . . . Child: 1 Assign: <- of type (null) [line: 50]                                                             |     . . . . Child: 1 Assign: <- of type int [line: 50]
. . . . . Child: 0 Id: a of type int [line: 50]                                                                         . . . . . Child: 0 Id: a of type int [line: 50]
. . . . . Child: 1 Id: z of type int [line: 50]                                                                         . . . . . Child: 1 Id: z of type int [line: 50]
. . . . Sibling: 1 Assign: <- of type (null) [line: 51]                                                           |     . . . . Sibling: 1 Assign: <- of type int [line: 51]
. . . . . Child: 0 Id: z of type int [line: 51]                                                                         . . . . . Child: 0 Id: z of type int [line: 51]
. . . . . Child: 1 Id: a of type int [line: 51]                                                                         . . . . . Child: 1 Id: a of type int [line: 51]
. . Sibling: 8 Assign: <- of type (null) [line: 54]                                                               |     . . Sibling: 8 Assign: <- of type int [line: 54]
. . . Child: 0 Id: aa of type int [line: 54]                                                                            . . . Child: 0 Id: aa of type int [line: 54]
. . . Child: 1 Id: aa of type int [line: 54]                                                                            . . . Child: 1 Id: aa of type int [line: 54]
. . Sibling: 9 Op: = of type (null) [line: 55]                                                                    |     . . Sibling: 9 Op: = of type bool [line: 55]
. . . Child: 0 Id: ba of type bool [line: 55]                                                                           . . . Child: 0 Id: ba of type bool [line: 55]
. . . Child: 1 Id: ba of type bool [line: 55]                                                                           . . . Child: 1 Id: ba of type bool [line: 55]
. . Sibling: 10 Op: != of type (null) [line: 56]                                                                  |     . . Sibling: 10 Op: != of type bool [line: 56]
. . . Child: 0 Id: ca of type char [line: 56]                                                                           . . . Child: 0 Id: ca of type char [line: 56]
. . . Child: 1 Id: ca of type char [line: 56]                                                                           . . . Child: 1 Id: ca of type char [line: 56]
. . Sibling: 11 Op: > of type (null) [line: 57]                                                                   |     . . Sibling: 11 Op: > of type bool [line: 57]
. . . Child: 0 Id: aa of type int [line: 57]                                                                            . . . Child: 0 Id: aa of type int [line: 57]
. . . Child: 1 Id: aa of type int [line: 57]                                                                            . . . Child: 1 Id: aa of type int [line: 57]
. . Sibling: 12 Op: >= of type (null) [line: 58]                                                                  |     . . Sibling: 12 Op: >= of type bool [line: 58]
. . . Child: 0 Id: ba of type bool [line: 58]                                                                           . . . Child: 0 Id: ba of type bool [line: 58]
. . . Child: 1 Id: ba of type bool [line: 58]                                                                           . . . Child: 1 Id: ba of type bool [line: 58]
. . Sibling: 13 Op: < of type (null) [line: 59]                                                                   |     . . Sibling: 13 Op: < of type bool [line: 59]
. . . Child: 0 Id: ca of type char [line: 59]                                                                           . . . Child: 0 Id: ca of type char [line: 59]
. . . Child: 1 Id: ca of type char [line: 59]                                                                           . . . Child: 1 Id: ca of type char [line: 59]
. . Sibling: 14 Op: <= of type (null) [line: 60]                                                                  |     . . Sibling: 14 Op: <= of type bool [line: 60]
. . . Child: 0 Id: aa of type int [line: 60]                                                                            . . . Child: 0 Id: aa of type int [line: 60]
. . . Child: 1 Id: aa of type int [line: 60]                                                                            . . . Child: 1 Id: aa of type int [line: 60]
. . Sibling: 15 Assign: <- of type (null) [line: 62]                                                              |     . . Sibling: 15 Assign: <- of type char [line: 62]
. . . Child: 0 Id: ca of type char [line: 62]                                                                           . . . Child: 0 Id: ca of type char [line: 62]
. . . Child: 1 Const "dogs are great" of type (null) [line: 62]                                                   |     . . . Child: 1 Const is array "dogs are great" of type char [line: 62]
. . Sibling: 16 Return [line: 64]                                                                                       . . Sibling: 16 Return [line: 64]
. . . Child: 0 Const 'm' of type char [line: 64]                                                                        . . . Child: 0 Const 'm' of type char [line: 64]
Sibling: 3 Func: dog returns type void [line: 67]                                                                       Sibling: 3 Func: dog returns type void [line: 67]
. Child: 0 Parm: i of type int [line: 67]                                                                               . Child: 0 Parm: i of type int [line: 67]
. Child: 1 Compound [line: 67]                                                                                          . Child: 1 Compound [line: 67]
. . Child: 1 If [line: 68]                                                                                              . . Child: 1 If [line: 68]
. . . Child: 0 Op: = of type (null) [line: 68]                                                                    |     . . . Child: 0 Op: = of type bool [line: 68]
. . . . Child: 0 Id: i of type int [line: 68]                                                                           . . . . Child: 0 Id: i of type int [line: 68]
. . . . Child: 1 Const 3 of type int [line: 68]                                                                         . . . . Child: 1 Const 3 of type int [line: 68]
. . . Child: 1 Compound [line: 68]                                                                                      . . . Child: 1 Compound [line: 68]
. . . . Child: 0 Var: i of type int [line: 69]                                                                          . . . . Child: 0 Var: i of type int [line: 69]
. . . . Child: 1 Assign: <- of type (null) [line: 70]                                                             |     . . . . Child: 1 Assign: <- of type int [line: 70]
. . . . . Child: 0 Id: i of type int [line: 70]                                                                         . . . . . Child: 0 Id: i of type int [line: 70]
. . . . . Child: 1 Id: i of type int [line: 70]                                                                         . . . . . Child: 1 Id: i of type int [line: 70]
Sibling: 4 Func: main returns type int [line: 74]                                                                       Sibling: 4 Func: main returns type int [line: 74]
. Child: 1 Compound [line: 75]                                                                                          . Child: 1 Compound [line: 75]
. . Child: 0 Var: bbb of static type bool [line: 76]                                                              |     . . Child: 0 Var: bbb of type bool [line: 76]
. . Sibling: 1 Init: : of type char [line: 77]                                                                    |     . . Sibling: 1 Var: ccc is array of type char [line: 77]
. . . Child: 0 Var: ccc of array of type (null) [line: 77]                                                        |     . . . Child: 0 Const is array "cows" of type char [line: 77]
. . . Child: 1 Const "cows" of type (null) [line: 77]                                                             <
. . Child: 1 Call: ant of type int [line: 79]                                                                           . . Child: 1 Call: ant of type int [line: 79]
. . Sibling: 1 Call: bat of type void [line: 80]                                                                        . . Sibling: 1 Call: bat of type void [line: 80]
. . . Child: 0 Const 676 of type int [line: 80]                                                                         . . . Child: 0 Const 676 of type int [line: 80]
. . . Sibling: 1 Const 'g' of type char [line: 80]                                                                      . . . Sibling: 1 Const 'g' of type char [line: 80]
. . Sibling: 2 Call: cat of type char [line: 81]                                                                        . . Sibling: 2 Call: cat of type char [line: 81]
. . Sibling: 3 Call: bat of type void [line: 82]                                                                        . . Sibling: 3 Call: bat of type void [line: 82]
. . . Child: 0 Call: ant of type (null) [line: 82]                                                                |     . . . Child: 0 Call: ant of type int [line: 82]
. . . Sibling: 1 Call: cat of type (null) [line: 82]                                                              |     . . . Sibling: 1 Call: cat of type char [line: 82]
. . Sibling: 4 Assign: <- of type (null) [line: 83]                                                               |     . . Sibling: 4 Assign: <- of type bool [line: 83]
. . . Child: 0 Id: bbb of type bool [line: 83]                                                                          . . . Child: 0 Id: bbb of type bool [line: 83]
. . . Child: 1 Op: != of type (null) [line: 83]                                                                   |     . . . Child: 1 Op: != of type bool [line: 83]
. . . . Child: 0 Op: [ of type (null) [line: 83]                                                                  |     . . . . Child: 0 Op: [ of type char [line: 83]
. . . . . Child: 0 Id: ccc of type (null) [line: 83]                                                              |     . . . . . Child: 0 Id: ccc of type char [line: 83]
. . . . . Child: 1 Const 2 of type int [line: 83]                                                                       . . . . . Child: 1 Const 2 of type int [line: 83]
. . . . Child: 1 Const 'r' of type char [line: 83]                                                                      . . . . Child: 1 Const 'r' of type char [line: 83]
. . Sibling: 5 Return [line: 85]                                                                                        . . Sibling: 5 Return [line: 85]
. . . Child: 0 Op: + of type (null) [line: 85]                                                                    |     . . . Child: 0 Op: + of type int [line: 85]
. . . . Child: 0 Call: ant of type int [line: 85]                                                                       . . . . Child: 0 Call: ant of type int [line: 85]
. . . . Child: 1 Const 807 of type int [line: 85]                                                                       . . . . Child: 1 Const 807 of type int [line: 85]
Number of warnings: 0                                                                                             |     Number of warnings: 5
Number of errors: 33                                                                                              |     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P array.c-                                                                                                        ./c- -P array.c-
ERROR(9) : Cannot index nonarray 'c'.                                                                             |     ERROR(11): Symbol 'output' is not declared.
ERROR(11) : Symbol 'output' is not declared.                                                                      |     ERROR(12): Symbol 'output' is not declared.
ERROR(12) : Symbol 'output' is not declared.                                                                      |     WARNING(12): Variable 'b' may be uninitialized when used here.
ERROR(13) : Symbol 'output' is not declared.                                                                      |     ERROR(13): Symbol 'output' is not declared.
=========== Symbol Table ===========                                                                              |     Number of warnings: 1
Scope: Global -----------------                                                                                   <
a:                                                                                                                <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
b:                                                                                                                <
c:                                                                                                                <
=========== ============ ===========                                                                              <
Var: a of array of type int [line: 2]                                                                             <
Sibling: 1 Func: main returns type void [line: 4]                                                                 <
. Child: 1 Compound [line: 5]                                                                                     <
. . Child: 0 Var: b of array of type int [line: 6]                                                                <
. . Sibling: 1 Var: c of array of type int [line: 7]                                                              <
. . Child: 1 Op: [ of type (null) [line: 9]                                                                       <
. . . Child: 0 Id: c of type int [line: 9]                                                                        <
. . . Child: 1 Const 22 of type int [line: 9]                                                                     <
. . Sibling: 1 Const 999 of type int [line: 10]                                                                   <
. . Sibling: 2 Call: output of type (null) [line: 11]                                                             <
. . . Child: 0 Op: sizeof of type (null) [line: 11]                                                               <
. . . . Child: 0 Id: a of type (null) [line: 11]                                                                  <
. . Sibling: 3 Call: output of type (null) [line: 12]                                                             <
. . . Child: 0 Op: sizeof of type (null) [line: 12]                                                               <
. . . . Child: 0 Id: b of type (null) [line: 12]                                                                  <
. . Sibling: 4 Call: output of type (null) [line: 13]                                                             <
. . . Child: 0 Op: sizeof of type (null) [line: 13]                                                               <
. . . . Child: 0 Id: c of type (null) [line: 13]                                                                  <
Number of warnings: 0                                                                                             <
Number of errors: 3                                                                                                     Number of errors: 3

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P arrayops.c-                                                                                                     ./c- -P arrayops.c-
ERROR(9) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                   |     ERROR(13): '<-' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(9) : Cannot index nonarray 'bb'.                                                                            |     ERROR(14): '<-' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(10) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(18): The operation 'chsign' does not work with arrays.
ERROR(10) : Cannot index nonarray 'aa'.                                                                           |     ERROR(19): The operation 'chsign' does not work with arrays.
ERROR(17) : Unary 'chsign' requires an operand of type int but was given type (null).                             |     ERROR(21): Cannot index nonarray 'a'.
ERROR(18) : Unary 'chsign' requires an operand of type int but was given type (null).                             |     ERROR(22): Array index is the unindexed array 'aa'.
ERROR(19) : Unary 'chsign' requires an operand of type int but was given type (null).                             |     ERROR(22): Cannot index nonarray 'a'.
ERROR(19) : Unary 'chsign' requires an operand of type int but was given type (null).                             |     ERROR(24): Array index is the unindexed array 'aa'.
ERROR(21) : Cannot index nonarray 'a'.                                                                            |     ERROR(26): The operation 'sizeof' only works with arrays.
ERROR(22) : Cannot index nonarray 'a'.                                                                            |     ERROR(29): The operation '?' does not work with arrays.
ERROR(23) : Cannot index nonarray 'aa'.                                                                           |     ERROR(31): The operation 'not' does not work with arrays.
ERROR(24) : Cannot index nonarray 'aa'.                                                                           |     ERROR(33): The operation '++' does not work with arrays.
ERROR(26) : The operation 'sizeof' only works with arrays.                                                        |     ERROR(36): The operation '+' does not work with arrays.
ERROR(27) : The operation 'sizeof' only works with arrays.                                                        |     ERROR(37): The operation '+' does not work with arrays.
ERROR(28) : Unary '?' requires an operand of type int but was given type (null).                                  |     ERROR(38): The operation '+' does not work with arrays.
ERROR(29) : Unary '?' requires an operand of type int but was given type (null).                                  |     ERROR(41): The operation 'and' does not work with arrays.
ERROR(30) : Unary 'not' requires an operand of type bool but was given type (null).                               |     ERROR(42): The operation 'and' does not work with arrays.
ERROR(31) : Unary 'not' requires an operand of type bool but was given type (null).                               |     ERROR(43): The operation 'and' does not work with arrays.
ERROR(32) : Unary '++' requires an operand of type int but was given type (null).                                 |     ERROR(45): Cannot index nonarray 'c'.
ERROR(33) : Unary '++' requires an operand of type int but was given type (null).                                 |     WARNING(45): Variable 'c' may be uninitialized when used here.
ERROR(35) : '+' requires operands of type int but lhs is of type (null).                                          |     WARNING(46): Variable 'cc' may be uninitialized when used here.
ERROR(36) : '+' requires operands of type int but lhs is of type (null).                                          |     ERROR(47): '<-' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(37) : '+' requires operands of type int but lhs is of type (null).                                          |     ERROR(47): Cannot index nonarray 'c'.
ERROR(38) : '+' requires operands of type int but lhs is of type (null).                                          |     ERROR(48): '<-' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(40) : 'and' requires operands of type bool but lhs is of type (null).                                       |     ERROR(51): '<-' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(41) : 'and' requires operands of type bool but lhs is of type (null).                                       |     ERROR(56): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(42) : 'and' requires operands of type bool but lhs is of type (null).                                       |     ERROR(57): '=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(43) : 'and' requires operands of type bool but lhs is of type (null).                                       |     ERROR(58): '=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(45) : Cannot index nonarray 'c'.                                                                            |     ERROR(63): '>=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(46) : Cannot index nonarray 'cc'.                                                                           |     ERROR(64): '>=' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(47) : Cannot index nonarray 'c'.                                                                            |     ERROR(65): '>=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(48) : Cannot index nonarray 'cc'.                                                                           |     ERROR(70): '<' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(50) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  |     ERROR(71): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(51) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  |     ERROR(72): '<' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(52) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  |     ERROR(75): '<' requires both operands be arrays or not but lhs is not an array and rhs is an array.
ERROR(52) : Cannot index nonarray 'cc'.                                                                           |     ERROR(75): '<' requires operands of the same type but lhs is type char and rhs is type int.
=========== Symbol Table ===========                                                                              |     Number of warnings: 2
Scope: Global -----------------                                                                                   |     Number of errors: 34
main:                                                                                                             <
Scope: main -----------------                                                                                     <
a:                                                                                                                <
aa:                                                                                                               <
b:                                                                                                                <
bb:                                                                                                               <
c:                                                                                                                <
cc:                                                                                                               <
=========== ============ ===========                                                                              <
ID: a ParentID: <-                                                                                                <
yes, we found ID: a                                                                                               <
ID: a ParentID: <-                                                                                                <
yes, we found ID: a                                                                                               <
ID: a ParentID: <-                                                                                                <
yes, we found ID: a                                                                                               <
0 0 68                                                                                                            <
0 0 69                                                                                                            <
0 0 70                                                                                                            <
0 0 71                                                                                                            <
0 0 72                                                                                                            <
0 0 73                                                                                                            <
0 0 75                                                                                                            <
Func: main returns type void [line: 2]                                                                            <
. Child: 1 Compound [line: 3]                                                                                     <
. . Child: 0 Var: a of type int [line: 4]                                                                         <
. . Sibling: 1 Var: aa of array of type int [line: 4]                                                             <
. . Sibling: 2 Var: b of type bool [line: 5]                                                                      <
. . Sibling: 3 Var: bb of array of type bool [line: 5]                                                            <
. . Sibling: 4 Var: c of type char [line: 6]                                                                      <
. . Sibling: 5 Var: cc of array of type char [line: 6]                                                            <
. . Child: 1 Assign: <- of type int [line: 8]                                                                     <
. . . Child: 0 Id: a of type int [line: 8]                                                                        <
. . . Child: 1 Const 42 of type int [line: 8]                                                                     <
. . Sibling: 1 Assign: <- of type (null) [line: 9]                                                                <
. . . Child: 0 Id: b of type bool [line: 9]                                                                       <
. . . Child: 1 Assign: <- of type (null) [line: 9]                                                                <
. . . . Child: 0 Op: [ of type (null) [line: 9]                                                                   <
. . . . . Child: 0 Id: bb of type bool [line: 9]                                                                  <
. . . . . Child: 1 Const 2 of type int [line: 9]                                                                  <
. . . . Child: 1 Const true of type bool [line: 9]                                                                <
. . Sibling: 2 Assign: <- of type (null) [line: 10]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 10]                                                                    <
. . . . Child: 0 Id: aa of type int [line: 10]                                                                    <
. . . . Child: 1 Const 1 of type int [line: 10]                                                                   <
. . . Child: 1 Const 666 of type int [line: 10]                                                                   <
. . Sibling: 3 Assign: <- of type (null) [line: 12]                                                               <
. . . Child: 0 Id: a of type int [line: 12]                                                                       <
. . . Child: 1 Id: a of type int [line: 12]                                                                       <
. . Sibling: 4 Assign: <- of type (null) [line: 13]                                                               <
. . . Child: 0 Id: a of type int [line: 13]                                                                       <
. . . Child: 1 Id: aa of type int [line: 13]                                                                      <
. . Sibling: 5 Assign: <- of type (null) [line: 14]                                                               <
. . . Child: 0 Id: aa of type int [line: 14]                                                                      <
. . . Child: 1 Id: a of type int [line: 14]                                                                       <
. . Sibling: 6 Assign: <- of type (null) [line: 15]                                                               <
. . . Child: 0 Id: aa of type int [line: 15]                                                                      <
. . . Child: 1 Id: aa of type int [line: 15]                                                                      <
. . Sibling: 7 Op: chsign of type (null) [line: 17]                                                               <
. . . Child: 0 Id: a of type int [line: 17]                                                                       <
. . Sibling: 8 Op: chsign of type (null) [line: 18]                                                               <
. . . Child: 0 Id: aa of type int [line: 18]                                                                      <
. . Sibling: 9 Op: chsign of type (null) [line: 19]                                                               <
. . . Child: 0 Op: chsign of type (null) [line: 19]                                                               <
. . . . Child: 0 Id: aa of type int [line: 19]                                                                    <
. . Sibling: 10 Op: [ of type (null) [line: 21]                                                                   <
. . . Child: 0 Id: a of type int [line: 21]                                                                       <
. . . Child: 1 Id: a of type int [line: 21]                                                                       <
. . Sibling: 11 Op: [ of type (null) [line: 22]                                                                   <
. . . Child: 0 Id: a of type int [line: 22]                                                                       <
. . . Child: 1 Id: aa of type int [line: 22]                                                                      <
. . Sibling: 12 Op: [ of type (null) [line: 23]                                                                   <
. . . Child: 0 Id: aa of type int [line: 23]                                                                      <
. . . Child: 1 Id: a of type int [line: 23]                                                                       <
. . Sibling: 13 Op: [ of type (null) [line: 24]                                                                   <
. . . Child: 0 Id: aa of type int [line: 24]                                                                      <
. . . Child: 1 Id: aa of type int [line: 24]                                                                      <
. . Sibling: 14 Op: sizeof of type (null) [line: 26]                                                              <
. . . Child: 0 Id: a of type int [line: 26]                                                                       <
. . Sibling: 15 Op: sizeof of type (null) [line: 27]                                                              <
. . . Child: 0 Id: aa of type int [line: 27]                                                                      <
. . Sibling: 16 Op: ? of type (null) [line: 28]                                                                   <
. . . Child: 0 Id: a of type int [line: 28]                                                                       <
. . Sibling: 17 Op: ? of type (null) [line: 29]                                                                   <
. . . Child: 0 Id: aa of type int [line: 29]                                                                      <
. . Sibling: 18 Op: not of type (null) [line: 30]                                                                 <
. . . Child: 0 Id: b of type bool [line: 30]                                                                      <
. . Sibling: 19 Op: not of type (null) [line: 31]                                                                 <
. . . Child: 0 Id: bb of type bool [line: 31]                                                                     <
. . Sibling: 20 Assign: ++ of type (null) [line: 32]                                                              <
. . . Child: 0 Id: a of type int [line: 32]                                                                       <
. . Sibling: 21 Assign: ++ of type (null) [line: 33]                                                              <
. . . Child: 0 Id: aa of type int [line: 33]                                                                      <
. . Sibling: 22 Op: + of type (null) [line: 35]                                                                   <
. . . Child: 0 Id: a of type int [line: 35]                                                                       <
. . . Child: 1 Id: a of type int [line: 35]                                                                       <
. . Sibling: 23 Op: + of type (null) [line: 36]                                                                   <
. . . Child: 0 Id: a of type int [line: 36]                                                                       <
. . . Child: 1 Id: aa of type int [line: 36]                                                                      <
. . Sibling: 24 Op: + of type (null) [line: 37]                                                                   <
. . . Child: 0 Id: aa of type int [line: 37]                                                                      <
. . . Child: 1 Id: a of type int [line: 37]                                                                       <
. . Sibling: 25 Op: + of type (null) [line: 38]                                                                   <
. . . Child: 0 Id: aa of type int [line: 38]                                                                      <
. . . Child: 1 Id: aa of type int [line: 38]                                                                      <
. . Sibling: 26 Op: and of type (null) [line: 40]                                                                 <
. . . Child: 0 Id: b of type bool [line: 40]                                                                      <
. . . Child: 1 Id: b of type bool [line: 40]                                                                      <
. . Sibling: 27 Op: and of type (null) [line: 41]                                                                 <
. . . Child: 0 Id: b of type bool [line: 41]                                                                      <
. . . Child: 1 Id: bb of type bool [line: 41]                                                                     <
. . Sibling: 28 Op: and of type (null) [line: 42]                                                                 <
. . . Child: 0 Id: bb of type bool [line: 42]                                                                     <
. . . Child: 1 Id: b of type bool [line: 42]                                                                      <
. . Sibling: 29 Op: and of type (null) [line: 43]                                                                 <
. . . Child: 0 Id: bb of type bool [line: 43]                                                                     <
. . . Child: 1 Id: bb of type bool [line: 43]                                                                     <
. . Sibling: 30 Assign: <- of type (null) [line: 45]                                                              <
. . . Child: 0 Id: c of type char [line: 45]                                                                      <
. . . Child: 1 Op: [ of type (null) [line: 45]                                                                    <
. . . . Child: 0 Id: c of type char [line: 45]                                                                    <
. . . . Child: 1 Const 3 of type int [line: 45]                                                                   <
. . Sibling: 31 Assign: <- of type (null) [line: 46]                                                              <
. . . Child: 0 Id: c of type char [line: 46]                                                                      <
. . . Child: 1 Op: [ of type (null) [line: 46]                                                                    <
. . . . Child: 0 Id: cc of type char [line: 46]                                                                   <
. . . . Child: 1 Const 3 of type int [line: 46]                                                                   <
. . Sibling: 32 Assign: <- of type (null) [line: 47]                                                              <
. . . Child: 0 Id: cc of type char [line: 47]                                                                     <
. . . Child: 1 Op: [ of type (null) [line: 47]                                                                    <
. . . . Child: 0 Id: c of type char [line: 47]                                                                    <
. . . . Child: 1 Const 3 of type int [line: 47]                                                                   <
. . Sibling: 33 Assign: <- of type (null) [line: 48]                                                              <
. . . Child: 0 Id: cc of type char [line: 48]                                                                     <
. . . Child: 1 Op: [ of type (null) [line: 48]                                                                    <
. . . . Child: 0 Id: cc of type char [line: 48]                                                                   <
. . . . Child: 1 Const 3 of type int [line: 48]                                                                   <
. . Sibling: 34 Assign: <- of type (null) [line: 50]                                                              <
. . . Child: 0 Id: c of type char [line: 50]                                                                      <
. . . Child: 1 Const 'a' of type char [line: 50]                                                                  <
. . Sibling: 35 Assign: <- of type (null) [line: 51]                                                              <
. . . Child: 0 Id: cc of type char [line: 51]                                                                     <
. . . Child: 1 Const 'b' of type char [line: 51]                                                                  <
. . Sibling: 36 Assign: <- of type (null) [line: 52]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 52]                                                                    <
. . . . Child: 0 Id: cc of type char [line: 52]                                                                   <
. . . . Child: 1 Const 0 of type int [line: 52]                                                                   <
. . . Child: 1 Const 'c' of type char [line: 52]                                                                  <
. . Sibling: 37 Op: = of type (null) [line: 54]                                                                   <
. . . Child: 0 Id: aa of type int [line: 54]                                                                      <
. . . Child: 1 Id: aa of type int [line: 54]                                                                      <
. . Sibling: 38 Op: = of type (null) [line: 55]                                                                   <
. . . Child: 0 Id: cc of type char [line: 55]                                                                     <
. . . Child: 1 Id: cc of type char [line: 55]                                                                     <
. . Sibling: 39 Op: = of type (null) [line: 56]                                                                   <
. . . Child: 0 Id: aa of type int [line: 56]                                                                      <
. . . Child: 1 Id: cc of type char [line: 56]                                                                     <
. . Sibling: 40 Op: = of type (null) [line: 57]                                                                   <
. . . Child: 0 Id: a of type int [line: 57]                                                                       <
. . . Child: 1 Id: aa of type int [line: 57]                                                                      <
. . Sibling: 41 Op: = of type (null) [line: 58]                                                                   <
. . . Child: 0 Id: aa of type int [line: 58]                                                                      <
. . . Child: 1 Id: a of type int [line: 58]                                                                       <
. . Sibling: 42 Op: = of type (null) [line: 59]                                                                   <
. . . Child: 0 Id: a of type int [line: 59]                                                                       <
. . . Child: 1 Id: a of type int [line: 59]                                                                       <
. . Sibling: 43 Op: >= of type (null) [line: 61]                                                                  <
. . . Child: 0 Id: aa of type int [line: 61]                                                                      <
. . . Child: 1 Id: aa of type int [line: 61]                                                                      <
. . Sibling: 44 Op: >= of type (null) [line: 62]                                                                  <
. . . Child: 0 Id: cc of type char [line: 62]                                                                     <
. . . Child: 1 Id: cc of type char [line: 62]                                                                     <
. . Sibling: 45 Op: >= of type (null) [line: 63]                                                                  <
. . . Child: 0 Id: aa of type int [line: 63]                                                                      <
. . . Child: 1 Id: cc of type char [line: 63]                                                                     <
. . Sibling: 46 Op: >= of type (null) [line: 64]                                                                  <
. . . Child: 0 Id: a of type int [line: 64]                                                                       <
. . . Child: 1 Id: aa of type int [line: 64]                                                                      <
. . Sibling: 47 Op: >= of type (null) [line: 65]                                                                  <
. . . Child: 0 Id: aa of type int [line: 65]                                                                      <
. . . Child: 1 Id: a of type int [line: 65]                                                                       <
. . Sibling: 48 Op: >= of type (null) [line: 66]                                                                  <
. . . Child: 0 Id: a of type int [line: 66]                                                                       <
. . . Child: 1 Id: a of type int [line: 66]                                                                       <
. . Sibling: 49 Op: < of type (null) [line: 68]                                                                   <
. . . Child: 0 Id: aa of type int [line: 68]                                                                      <
. . . Child: 1 Id: aa of type int [line: 68]                                                                      <
. . Sibling: 50 Op: < of type (null) [line: 69]                                                                   <
. . . Child: 0 Id: cc of type char [line: 69]                                                                     <
. . . Child: 1 Id: cc of type char [line: 69]                                                                     <
. . Sibling: 51 Op: < of type (null) [line: 70]                                                                   <
. . . Child: 0 Id: aa of type int [line: 70]                                                                      <
. . . Child: 1 Id: cc of type char [line: 70]                                                                     <
. . Sibling: 52 Op: < of type (null) [line: 71]                                                                   <
. . . Child: 0 Id: a of type int [line: 71]                                                                       <
. . . Child: 1 Id: aa of type int [line: 71]                                                                      <
. . Sibling: 53 Op: < of type (null) [line: 72]                                                                   <
. . . Child: 0 Id: aa of type int [line: 72]                                                                      <
. . . Child: 1 Id: a of type int [line: 72]                                                                       <
. . Sibling: 54 Op: < of type (null) [line: 73]                                                                   <
. . . Child: 0 Id: a of type int [line: 73]                                                                       <
. . . Child: 1 Id: a of type int [line: 73]                                                                       <
. . Sibling: 55 Op: < of type (null) [line: 75]                                                                   <
. . . Child: 0 Id: c of type char [line: 75]                                                                      <
. . . Child: 1 Id: aa of type int [line: 75]                                                                      <
Number of warnings: 0                                                                                             <
Number of errors: 25                                                                                              <

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P arrayx.c-                                                                                                       ./c- -P arrayx.c-
ERROR(10) : '<-' requires both operands be arrays or not but lhs is an array and rhs is not an array.             |     WARNING(2): The variable 'e' seems not to be used.
ERROR(11) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  |     ERROR(10): '<-' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(12) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(11): '<-' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(16) : Cannot index nonarray 'i'.                                                                            |     ERROR(12): '<-' requires both operands be arrays or not but lhs is an array and rhs is not an array.
ERROR(17) : Cannot index nonarray 'i'.                                                                            |     WARNING(19): Variable 'd' may be uninitialized when used here.
ERROR(18) : Cannot index nonarray 'i'.                                                                            |     Number of warnings: 2
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
a:                                                                                                                <
b:                                                                                                                <
bb:                                                                                                               <
c:                                                                                                                <
cc:                                                                                                               <
d:                                                                                                                <
e:                                                                                                                <
i:                                                                                                                <
ii:                                                                                                               <
=========== ============ ===========                                                                              <
ID: b ParentID: <-                                                                                                <
yes, we found ID: b                                                                                               <
ID: b ParentID: <-                                                                                                <
yes, we found ID: b                                                                                               <
ID: b ParentID: <-                                                                                                <
yes, we found ID: b                                                                                               <
Func: main returns type void [line: 1]                                                                            <
. Child: 1 Compound [line: 1]                                                                                     <
. . Child: 0 Var: a of type int [line: 2]                                                                         <
. . Sibling: 1 Var: d of type int [line: 2]                                                                       <
. . Sibling: 2 Var: e of type int [line: 2]                                                                       <
. . Sibling: 3 Var: b of array of type bool [line: 3]                                                             <
. . Sibling: 4 Var: c of array of type char [line: 4]                                                             <
. . Sibling: 5 Var: i of array of type int [line: 5]                                                              <
. . Sibling: 6 Init: : of type bool [line: 6]                                                                     <
. . . Child: 0 Var: bb of array of type (null) [line: 6]                                                          <
. . . Child: 1 Const true of type bool [line: 6]                                                                  <
. . Sibling: 7 Init: : of type char [line: 7]                                                                     <
. . . Child: 0 Var: cc of array of type (null) [line: 7]                                                          <
. . . Child: 1 Const 'x' of type char [line: 7]                                                                   <
. . Sibling: 8 Init: : of type int [line: 8]                                                                      <
. . . Child: 0 Var: ii of array of type (null) [line: 8]                                                          <
. . . Child: 1 Const 666 of type int [line: 8]                                                                    <
. . Child: 1 Assign: <- of type bool [line: 10]                                                                   <
. . . Child: 0 Id: b of type bool [line: 10]                                                                      <
. . . Child: 1 Const true of type bool [line: 10]                                                                 <
. . Sibling: 1 Assign: <- of type (null) [line: 11]                                                               <
. . . Child: 0 Id: c of type char [line: 11]                                                                      <
. . . Child: 1 Const 'x' of type char [line: 11]                                                                  <
. . Sibling: 2 Assign: <- of type (null) [line: 12]                                                               <
. . . Child: 0 Id: i of type int [line: 12]                                                                       <
. . . Child: 1 Const 10 of type int [line: 12]                                                                    <
. . Sibling: 3 Assign: <- of type (null) [line: 13]                                                               <
. . . Child: 0 Id: bb of type (null) [line: 13]                                                                   <
. . . Child: 1 Id: b of type bool [line: 13]                                                                      <
. . Sibling: 4 Assign: <- of type (null) [line: 14]                                                               <
. . . Child: 0 Id: cc of type (null) [line: 14]                                                                   <
. . . Child: 1 Const "dogs" of type (null) [line: 14]                                                             <
. . Sibling: 5 Assign: <- of type (null) [line: 15]                                                               <
. . . Child: 0 Id: ii of type (null) [line: 15]                                                                   <
. . . Child: 1 Id: i of type int [line: 15]                                                                       <
. . Sibling: 6 Op: [ of type (null) [line: 16]                                                                    <
. . . Child: 0 Id: i of type int [line: 16]                                                                       <
. . . Child: 1 Const 3 of type int [line: 16]                                                                     <
. . Sibling: 7 Assign: <- of type (null) [line: 17]                                                               <
. . . Child: 0 Id: a of type int [line: 17]                                                                       <
. . . Child: 1 Op: [ of type (null) [line: 17]                                                                    <
. . . . Child: 0 Id: i of type int [line: 17]                                                                     <
. . . . Child: 1 Const 3 of type int [line: 17]                                                                   <
. . Sibling: 8 Assign: <- of type (null) [line: 18]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 18]                                                                    <
. . . . Child: 0 Id: i of type int [line: 18]                                                                     <
. . . . Child: 1 Const 3 of type int [line: 18]                                                                   <
. . . Child: 1 Id: a of type int [line: 18]                                                                       <
. . Sibling: 9 Assign: <- of type (null) [line: 19]                                                               <
. . . Child: 0 Id: a of type int [line: 19]                                                                       <
. . . Child: 1 Id: d of type int [line: 19]                                                                       <
Number of warnings: 0                                                                                             <
Number of errors: 3                                                                                                     Number of errors: 3

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P assignBool.c-                                                                                                   ./c- -P assignBool.c-
ERROR(9) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                   |     ERROR(10): Symbol 'outputb' is not declared.
ERROR(10) : Symbol 'outputb' is not declared.                                                                     |     ERROR(12): Symbol 'outputb' is not declared.
ERROR(11) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  |     ERROR(14): Symbol 'outputb' is not declared.
ERROR(11) : Cannot index nonarray 'gy'.                                                                           |     ERROR(16): Symbol 'outputb' is not declared.
ERROR(12) : Symbol 'outputb' is not declared.                                                                     |     ERROR(17): Symbol 'outnl' is not declared.
ERROR(13) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  |     ERROR(20): Symbol 'outputb' is not declared.
ERROR(14) : Symbol 'outputb' is not declared.                                                                     |     ERROR(22): Symbol 'outputb' is not declared.
ERROR(15) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  |     ERROR(24): Symbol 'outputb' is not declared.
ERROR(15) : Cannot index nonarray 'y'.                                                                            |     ERROR(26): Symbol 'outputb' is not declared.
ERROR(16) : Symbol 'outputb' is not declared.                                                                     |     ERROR(27): Symbol 'outnl' is not declared.
ERROR(17) : Symbol 'outnl' is not declared.                                                                       |     WARNING(34): Variable 'zx' may be uninitialized when used here.
ERROR(19) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  |     WARNING(34): Variable 'zy' may be uninitialized when used here.
ERROR(20) : Symbol 'outputb' is not declared.                                                                     |     Number of warnings: 2
ERROR(21) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  |     Number of errors: 10
ERROR(21) : Cannot index nonarray 'py'.                                                                           <
ERROR(22) : Symbol 'outputb' is not declared.                                                                     <
ERROR(23) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  <
ERROR(24) : Symbol 'outputb' is not declared.                                                                     <
ERROR(25) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  <
ERROR(25) : Cannot index nonarray 'sy'.                                                                           <
ERROR(26) : Symbol 'outputb' is not declared.                                                                     <
ERROR(27) : Symbol 'outnl' is not declared.                                                                       <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
esperanza: p9Ô                                                                                                     <
gx:                                                                                                               <
gy:                                                                                                               <
Scope: esperanza -----------------                                                                                <
main:                                                                                                             <
px:                                                                                                               <
py:                                                                                                               <
Scope: main -----------------                                                                                     <
zx:                                                                                                               <
zy:                                                                                                               <
=========== ============ ===========                                                                              <
Var: gx of type bool [line: 2]                                                                                    <
Sibling: 1 Var: gy of array of type bool [line: 2]                                                                <
Sibling: 2 Func: esperanza returns type void [line: 4]                                                            <
. Child: 0 Parm: px of type bool [line: 4]                                                                        <
. Sibling: 1 Parm: py of array of type bool [line: 4]                                                             <
. Child: 1 Compound [line: 5]                                                                                     <
. . Child: 0 Var: x of type bool [line: 6]                                                                        <
. . Sibling: 1 Var: y of array of type bool [line: 6]                                                             <
. . Sibling: 2 Var: sx of static type bool [line: 7]                                                              <
. . Sibling: 3 Var: sy of array of type bool [line: 7]                                                            <
. . Child: 1 Assign: <- of type (null) [line: 9]                                                                  <
. . . Child: 0 Id: gx of type bool [line: 9]                                                                      <
. . . Child: 1 Const true of type bool [line: 9]                                                                  <
. . Sibling: 1 Call: outputb of type (null) [line: 10]                                                            <
. . . Child: 0 Id: gx of type (null) [line: 10]                                                                   <
. . Sibling: 2 Assign: <- of type (null) [line: 11]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 11]                                                                    <
. . . . Child: 0 Id: gy of type bool [line: 11]                                                                   <
. . . . Child: 1 Const 9 of type int [line: 11]                                                                   <
. . . Child: 1 Const true of type bool [line: 11]                                                                 <
. . Sibling: 3 Call: outputb of type (null) [line: 12]                                                            <
. . . Child: 0 Op: [ of type (null) [line: 12]                                                                    <
. . . . Child: 0 Id: gy of type (null) [line: 12]                                                                 <
. . . . Child: 1 Const 9 of type int [line: 12]                                                                   <
. . Sibling: 4 Assign: <- of type (null) [line: 13]                                                               <
. . . Child: 0 Id: x of type bool [line: 13]                                                                      <
. . . Child: 1 Const true of type bool [line: 13]                                                                 <
. . Sibling: 5 Call: outputb of type (null) [line: 14]                                                            <
. . . Child: 0 Id: x of type (null) [line: 14]                                                                    <
. . Sibling: 6 Assign: <- of type (null) [line: 15]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 15]                                                                    <
. . . . Child: 0 Id: y of type bool [line: 15]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 15]                                                                   <
. . . Child: 1 Const true of type bool [line: 15]                                                                 <
. . Sibling: 7 Call: outputb of type (null) [line: 16]                                                            <
. . . Child: 0 Op: [ of type (null) [line: 16]                                                                    <
. . . . Child: 0 Id: y of type (null) [line: 16]                                                                  <
. . . . Child: 1 Const 9 of type int [line: 16]                                                                   <
. . Sibling: 8 Call: outnl of type (null) [line: 17]                                                              <
. . Sibling: 9 Assign: <- of type (null) [line: 19]                                                               <
. . . Child: 0 Id: px of type bool [line: 19]                                                                     <
. . . Child: 1 Const true of type bool [line: 19]                                                                 <
. . Sibling: 10 Call: outputb of type (null) [line: 20]                                                           <
. . . Child: 0 Id: px of type (null) [line: 20]                                                                   <
. . Sibling: 11 Assign: <- of type (null) [line: 21]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 21]                                                                    <
. . . . Child: 0 Id: py of type bool [line: 21]                                                                   <
. . . . Child: 1 Const 9 of type int [line: 21]                                                                   <
. . . Child: 1 Const true of type bool [line: 21]                                                                 <
. . Sibling: 12 Call: outputb of type (null) [line: 22]                                                           <
. . . Child: 0 Op: [ of type (null) [line: 22]                                                                    <
. . . . Child: 0 Id: py of type (null) [line: 22]                                                                 <
. . . . Child: 1 Const 9 of type int [line: 22]                                                                   <
. . Sibling: 13 Assign: <- of type (null) [line: 23]                                                              <
. . . Child: 0 Id: sx of type bool [line: 23]                                                                     <
. . . Child: 1 Const true of type bool [line: 23]                                                                 <
. . Sibling: 14 Call: outputb of type (null) [line: 24]                                                           <
. . . Child: 0 Id: sx of type (null) [line: 24]                                                                   <
. . Sibling: 15 Assign: <- of type (null) [line: 25]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 25]                                                                    <
. . . . Child: 0 Id: sy of type bool [line: 25]                                                                   <
. . . . Child: 1 Const 9 of type int [line: 25]                                                                   <
. . . Child: 1 Const true of type bool [line: 25]                                                                 <
. . Sibling: 16 Call: outputb of type (null) [line: 26]                                                           <
. . . Child: 0 Op: [ of type (null) [line: 26]                                                                    <
. . . . Child: 0 Id: sy of type (null) [line: 26]                                                                 <
. . . . Child: 1 Const 9 of type int [line: 26]                                                                   <
. . Sibling: 17 Call: outnl of type (null) [line: 27]                                                             <
Sibling: 3 Func: main returns type void [line: 31]                                                                <
. Child: 1 Compound [line: 32]                                                                                    <
. . Child: 0 Var: zx of type bool [line: 33]                                                                      <
. . Sibling: 1 Var: zy of array of type bool [line: 33]                                                           <
. . Child: 1 Call: esperanza of type void [line: 34]                                                              <
. . . Child: 0 Id: zx of type (null) [line: 34]                                                                   <
. . . Sibling: 1 Id: zy of type (null) [line: 34]                                                                 <
Number of warnings: 0                                                                                             <
Number of errors: 18                                                                                              <

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P assignChar.c-                                                                                                   ./c- -P assignChar.c-
ERROR(9) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                   |     ERROR(10): Symbol 'outputc' is not declared.
ERROR(10) : Symbol 'outputc' is not declared.                                                                     |     ERROR(12): Symbol 'outputc' is not declared.
ERROR(11) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  |     ERROR(14): Symbol 'outputc' is not declared.
ERROR(11) : Cannot index nonarray 'gy'.                                                                           |     ERROR(16): Symbol 'outputc' is not declared.
ERROR(12) : Symbol 'outputc' is not declared.                                                                     |     ERROR(17): Symbol 'outnl' is not declared.
ERROR(13) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  |     ERROR(19): Symbol 'outputc' is not declared.
ERROR(14) : Symbol 'outputc' is not declared.                                                                     |     ERROR(21): Symbol 'outputc' is not declared.
ERROR(15) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  |     ERROR(23): Symbol 'outputc' is not declared.
ERROR(15) : Cannot index nonarray 'y'.                                                                            |     ERROR(25): Symbol 'outputc' is not declared.
ERROR(16) : Symbol 'outputc' is not declared.                                                                     |     ERROR(26): Symbol 'outnl' is not declared.
ERROR(17) : Symbol 'outnl' is not declared.                                                                       |     WARNING(33): Variable 'zx' may be uninitialized when used here.
ERROR(18) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  |     WARNING(33): Variable 'zy' may be uninitialized when used here.
ERROR(19) : Symbol 'outputc' is not declared.                                                                     |     Number of warnings: 2
ERROR(20) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  |     Number of errors: 10
ERROR(20) : Cannot index nonarray 'py'.                                                                           <
ERROR(21) : Symbol 'outputc' is not declared.                                                                     <
ERROR(22) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  <
ERROR(23) : Symbol 'outputc' is not declared.                                                                     <
ERROR(24) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  <
ERROR(24) : Cannot index nonarray 'sy'.                                                                           <
ERROR(25) : Symbol 'outputc' is not declared.                                                                     <
ERROR(26) : Symbol 'outnl' is not declared.                                                                       <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
esperanza: p)                                                                                                     <
gx:                                                                                                               <
gy:                                                                                                               <
Scope: esperanza -----------------                                                                                <
main:                                                                                                             <
px:                                                                                                               <
py:                                                                                                               <
Scope: main -----------------                                                                                     <
zx:                                                                                                               <
zy:                                                                                                               <
=========== ============ ===========                                                                              <
Var: gx of type char [line: 2]                                                                                    <
Sibling: 1 Var: gy of array of type char [line: 2]                                                                <
Sibling: 2 Func: esperanza returns type void [line: 4]                                                            <
. Child: 0 Parm: px of type char [line: 4]                                                                        <
. Sibling: 1 Parm: py of array of type char [line: 4]                                                             <
. Child: 1 Compound [line: 5]                                                                                     <
. . Child: 0 Var: x of type char [line: 6]                                                                        <
. . Sibling: 1 Var: y of array of type char [line: 6]                                                             <
. . Sibling: 2 Var: sx of static type char [line: 7]                                                              <
. . Sibling: 3 Var: sy of array of type char [line: 7]                                                            <
. . Child: 1 Assign: <- of type (null) [line: 9]                                                                  <
. . . Child: 0 Id: gx of type char [line: 9]                                                                      <
. . . Child: 1 Const 'a' of type char [line: 9]                                                                   <
. . Sibling: 1 Call: outputc of type (null) [line: 10]                                                            <
. . . Child: 0 Id: gx of type (null) [line: 10]                                                                   <
. . Sibling: 2 Assign: <- of type (null) [line: 11]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 11]                                                                    <
. . . . Child: 0 Id: gy of type char [line: 11]                                                                   <
. . . . Child: 1 Const 9 of type int [line: 11]                                                                   <
. . . Child: 1 Const 'b' of type char [line: 11]                                                                  <
. . Sibling: 3 Call: outputc of type (null) [line: 12]                                                            <
. . . Child: 0 Op: [ of type (null) [line: 12]                                                                    <
. . . . Child: 0 Id: gy of type (null) [line: 12]                                                                 <
. . . . Child: 1 Const 9 of type int [line: 12]                                                                   <
. . Sibling: 4 Assign: <- of type (null) [line: 13]                                                               <
. . . Child: 0 Id: x of type char [line: 13]                                                                      <
. . . Child: 1 Const 'c' of type char [line: 13]                                                                  <
. . Sibling: 5 Call: outputc of type (null) [line: 14]                                                            <
. . . Child: 0 Id: x of type (null) [line: 14]                                                                    <
. . Sibling: 6 Assign: <- of type (null) [line: 15]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 15]                                                                    <
. . . . Child: 0 Id: y of type char [line: 15]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 15]                                                                   <
. . . Child: 1 Const 'd' of type char [line: 15]                                                                  <
. . Sibling: 7 Call: outputc of type (null) [line: 16]                                                            <
. . . Child: 0 Op: [ of type (null) [line: 16]                                                                    <
. . . . Child: 0 Id: y of type (null) [line: 16]                                                                  <
. . . . Child: 1 Const 9 of type int [line: 16]                                                                   <
. . Sibling: 8 Call: outnl of type (null) [line: 17]                                                              <
. . Sibling: 9 Assign: <- of type (null) [line: 18]                                                               <
. . . Child: 0 Id: px of type char [line: 18]                                                                     <
. . . Child: 1 Const 'e' of type char [line: 18]                                                                  <
. . Sibling: 10 Call: outputc of type (null) [line: 19]                                                           <
. . . Child: 0 Id: px of type (null) [line: 19]                                                                   <
. . Sibling: 11 Assign: <- of type (null) [line: 20]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 20]                                                                    <
. . . . Child: 0 Id: py of type char [line: 20]                                                                   <
. . . . Child: 1 Const 9 of type int [line: 20]                                                                   <
. . . Child: 1 Const 'f' of type char [line: 20]                                                                  <
. . Sibling: 12 Call: outputc of type (null) [line: 21]                                                           <
. . . Child: 0 Op: [ of type (null) [line: 21]                                                                    <
. . . . Child: 0 Id: py of type (null) [line: 21]                                                                 <
. . . . Child: 1 Const 9 of type int [line: 21]                                                                   <
. . Sibling: 13 Assign: <- of type (null) [line: 22]                                                              <
. . . Child: 0 Id: sx of type char [line: 22]                                                                     <
. . . Child: 1 Const 'f' of type char [line: 22]                                                                  <
. . Sibling: 14 Call: outputc of type (null) [line: 23]                                                           <
. . . Child: 0 Id: sx of type (null) [line: 23]                                                                   <
. . Sibling: 15 Assign: <- of type (null) [line: 24]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 24]                                                                    <
. . . . Child: 0 Id: sy of type char [line: 24]                                                                   <
. . . . Child: 1 Const 9 of type int [line: 24]                                                                   <
. . . Child: 1 Const 'h' of type char [line: 24]                                                                  <
. . Sibling: 16 Call: outputc of type (null) [line: 25]                                                           <
. . . Child: 0 Op: [ of type (null) [line: 25]                                                                    <
. . . . Child: 0 Id: sy of type (null) [line: 25]                                                                 <
. . . . Child: 1 Const 9 of type int [line: 25]                                                                   <
. . Sibling: 17 Call: outnl of type (null) [line: 26]                                                             <
Sibling: 3 Func: main returns type void [line: 30]                                                                <
. Child: 1 Compound [line: 31]                                                                                    <
. . Child: 0 Var: zx of type char [line: 32]                                                                      <
. . Sibling: 1 Var: zy of array of type char [line: 32]                                                           <
. . Child: 1 Call: esperanza of type void [line: 33]                                                              <
. . . Child: 0 Id: zx of type (null) [line: 33]                                                                   <
. . . Sibling: 1 Id: zy of type (null) [line: 33]                                                                 <
Number of warnings: 0                                                                                             <
Number of errors: 18                                                                                              <

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P assignInt.c-                                                                                                    ./c- -P assignInt.c-
ERROR(9) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                    |     ERROR(10): Symbol 'output' is not declared.
ERROR(10) : Symbol 'output' is not declared.                                                                      |     ERROR(12): Symbol 'output' is not declared.
ERROR(11) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(14): Symbol 'output' is not declared.
ERROR(11) : Cannot index nonarray 'gy'.                                                                           |     ERROR(16): Symbol 'output' is not declared.
ERROR(12) : Symbol 'output' is not declared.                                                                      |     ERROR(17): Symbol 'outnl' is not declared.
ERROR(13) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(19): Symbol 'output' is not declared.
ERROR(14) : Symbol 'output' is not declared.                                                                      |     ERROR(21): Symbol 'output' is not declared.
ERROR(15) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(23): Symbol 'output' is not declared.
ERROR(15) : Cannot index nonarray 'y'.                                                                            |     ERROR(25): Symbol 'output' is not declared.
ERROR(16) : Symbol 'output' is not declared.                                                                      |     ERROR(26): Symbol 'outnl' is not declared.
ERROR(17) : Symbol 'outnl' is not declared.                                                                       |     WARNING(33): Variable 'zx' may be uninitialized when used here.
ERROR(18) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     WARNING(33): Variable 'zy' may be uninitialized when used here.
ERROR(19) : Symbol 'output' is not declared.                                                                      |     Number of warnings: 2
ERROR(20) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     Number of errors: 10
ERROR(20) : Cannot index nonarray 'py'.                                                                           <
ERROR(21) : Symbol 'output' is not declared.                                                                      <
ERROR(22) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(23) : Symbol 'output' is not declared.                                                                      <
ERROR(24) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(24) : Cannot index nonarray 'sy'.                                                                           <
ERROR(25) : Symbol 'output' is not declared.                                                                      <
ERROR(26) : Symbol 'outnl' is not declared.                                                                       <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
esperanza: pÈ                                                                                                      <
gx:                                                                                                               <
gy:                                                                                                               <
Scope: esperanza -----------------                                                                                <
main:                                                                                                             <
px:                                                                                                               <
py:                                                                                                               <
Scope: main -----------------                                                                                     <
zx:                                                                                                               <
zy:                                                                                                               <
=========== ============ ===========                                                                              <
Var: gx of type int [line: 2]                                                                                     <
Sibling: 1 Var: gy of array of type int [line: 2]                                                                 <
Sibling: 2 Func: esperanza returns type void [line: 4]                                                            <
. Child: 0 Parm: px of type int [line: 4]                                                                         <
. Sibling: 1 Parm: py of array of type int [line: 4]                                                              <
. Child: 1 Compound [line: 5]                                                                                     <
. . Child: 0 Var: x of type int [line: 6]                                                                         <
. . Sibling: 1 Var: y of array of type int [line: 6]                                                              <
. . Sibling: 2 Var: sx of static type int [line: 7]                                                               <
. . Sibling: 3 Var: sy of array of type int [line: 7]                                                             <
. . Child: 1 Assign: <- of type (null) [line: 9]                                                                  <
. . . Child: 0 Id: gx of type int [line: 9]                                                                       <
. . . Child: 1 Const 111 of type int [line: 9]                                                                    <
. . Sibling: 1 Call: output of type (null) [line: 10]                                                             <
. . . Child: 0 Id: gx of type (null) [line: 10]                                                                   <
. . Sibling: 2 Assign: <- of type (null) [line: 11]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 11]                                                                    <
. . . . Child: 0 Id: gy of type int [line: 11]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 11]                                                                   <
. . . Child: 1 Const 222 of type int [line: 11]                                                                   <
. . Sibling: 3 Call: output of type (null) [line: 12]                                                             <
. . . Child: 0 Op: [ of type (null) [line: 12]                                                                    <
. . . . Child: 0 Id: gy of type (null) [line: 12]                                                                 <
. . . . Child: 1 Const 9 of type int [line: 12]                                                                   <
. . Sibling: 4 Assign: <- of type (null) [line: 13]                                                               <
. . . Child: 0 Id: x of type int [line: 13]                                                                       <
. . . Child: 1 Const 333 of type int [line: 13]                                                                   <
. . Sibling: 5 Call: output of type (null) [line: 14]                                                             <
. . . Child: 0 Id: x of type (null) [line: 14]                                                                    <
. . Sibling: 6 Assign: <- of type (null) [line: 15]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 15]                                                                    <
. . . . Child: 0 Id: y of type int [line: 15]                                                                     <
. . . . Child: 1 Const 9 of type int [line: 15]                                                                   <
. . . Child: 1 Const 444 of type int [line: 15]                                                                   <
. . Sibling: 7 Call: output of type (null) [line: 16]                                                             <
. . . Child: 0 Op: [ of type (null) [line: 16]                                                                    <
. . . . Child: 0 Id: y of type (null) [line: 16]                                                                  <
. . . . Child: 1 Const 9 of type int [line: 16]                                                                   <
. . Sibling: 8 Call: outnl of type (null) [line: 17]                                                              <
. . Sibling: 9 Assign: <- of type (null) [line: 18]                                                               <
. . . Child: 0 Id: px of type int [line: 18]                                                                      <
. . . Child: 1 Const 555 of type int [line: 18]                                                                   <
. . Sibling: 10 Call: output of type (null) [line: 19]                                                            <
. . . Child: 0 Id: px of type (null) [line: 19]                                                                   <
. . Sibling: 11 Assign: <- of type (null) [line: 20]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 20]                                                                    <
. . . . Child: 0 Id: py of type int [line: 20]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 20]                                                                   <
. . . Child: 1 Const 666 of type int [line: 20]                                                                   <
. . Sibling: 12 Call: output of type (null) [line: 21]                                                            <
. . . Child: 0 Op: [ of type (null) [line: 21]                                                                    <
. . . . Child: 0 Id: py of type (null) [line: 21]                                                                 <
. . . . Child: 1 Const 9 of type int [line: 21]                                                                   <
. . Sibling: 13 Assign: <- of type (null) [line: 22]                                                              <
. . . Child: 0 Id: sx of type int [line: 22]                                                                      <
. . . Child: 1 Const 777 of type int [line: 22]                                                                   <
. . Sibling: 14 Call: output of type (null) [line: 23]                                                            <
. . . Child: 0 Id: sx of type (null) [line: 23]                                                                   <
. . Sibling: 15 Assign: <- of type (null) [line: 24]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 24]                                                                    <
. . . . Child: 0 Id: sy of type int [line: 24]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 24]                                                                   <
. . . Child: 1 Const 888 of type int [line: 24]                                                                   <
. . Sibling: 16 Call: output of type (null) [line: 25]                                                            <
. . . Child: 0 Op: [ of type (null) [line: 25]                                                                    <
. . . . Child: 0 Id: sy of type (null) [line: 25]                                                                 <
. . . . Child: 1 Const 9 of type int [line: 25]                                                                   <
. . Sibling: 17 Call: outnl of type (null) [line: 26]                                                             <
Sibling: 3 Func: main returns type void [line: 30]                                                                <
. Child: 1 Compound [line: 31]                                                                                    <
. . Child: 0 Var: zx of type int [line: 32]                                                                       <
. . Sibling: 1 Var: zy of array of type int [line: 32]                                                            <
. . Child: 1 Call: esperanza of type void [line: 33]                                                              <
. . . Child: 0 Id: zx of type (null) [line: 33]                                                                   <
. . . Sibling: 1 Id: zy of type (null) [line: 33]                                                                 <
Number of warnings: 0                                                                                             <
Number of errors: 18                                                                                              <

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P assignb.c-                                                                                                      ./c- -P assignb.c-
ERROR(7) : Symbol 'x' is not declared.                                                                            |     WARNING(5): The variable 'c' seems not to be used.
ERROR(7) : Symbol 'x' is not declared.                                                                            |     ERROR(7): Symbol 'x' is not declared.
ERROR(8) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                    |     ERROR(7): Symbol 'x' is not declared.
ERROR(8) : Symbol 'x' is not declared.                                                                            |     ERROR(8): Symbol 'x' is not declared.
ERROR(9) : Cannot index nonarray 'aa'.                                                                            |     WARNING(9): Variable 'aa' may be uninitialized when used here.
ERROR(10) : Cannot index nonarray 'bb'.                                                                           |     WARNING(10): Variable 'b' may be uninitialized when used here.
ERROR(12) : '!=' requires operands of the same type but lhs is type (null) and rhs is type char.                  |     WARNING(12): Variable 'cc' may be uninitialized when used here.
ERROR(12) : Cannot index nonarray 'cc'.                                                                           |     Number of warnings: 4
=========== Symbol Table ===========                                                                              |     Number of errors: 3
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
a:                                                                                                                <
aa:                                                                                                               <
b:                                                                                                                <
bb:                                                                                                               <
c:                                                                                                                <
cc:                                                                                                               <
=========== ============ ===========                                                                              <
ID: x ParentID: <-                                                                                                <
we did not find ID                                                                                                <
ID: x ParentID: <-                                                                                                <
we did not find ID                                                                                                <
ID: x ParentID: <-                                                                                                <
we did not find ID                                                                                                <
ID: x ParentID: <-                                                                                                <
we did not find ID                                                                                                <
ID: x ParentID: <-                                                                                                <
we did not find ID                                                                                                <
ID: x ParentID: <-                                                                                                <
we did not find ID                                                                                                <
Func: main returns type void [line: 1]                                                                            <
. Child: 1 Compound [line: 2]                                                                                     <
. . Child: 0 Var: aa of array of type int [line: 3]                                                               <
. . Sibling: 1 Var: a of type int [line: 3]                                                                       <
. . Sibling: 2 Var: bb of array of type bool [line: 4]                                                            <
. . Sibling: 3 Var: b of type bool [line: 4]                                                                      <
. . Sibling: 4 Var: cc of array of type char [line: 5]                                                            <
. . Sibling: 5 Var: c of type char [line: 5]                                                                      <
. . Child: 1 Assign: <- of type (null) [line: 7]                                                                  <
. . . Child: 0 Id: x of type (null) [line: 7]                                                                     <
. . . Child: 1 Id: x of type (null) [line: 7]                                                                     <
. . Sibling: 1 Assign: <- of type (null) [line: 8]                                                                <
. . . Child: 0 Id: x of type (null) [line: 8]                                                                     <
. . . Child: 1 Const 3 of type int [line: 8]                                                                      <
. . Sibling: 2 Op: [ of type (null) [line: 9]                                                                     <
. . . Child: 0 Id: aa of type int [line: 9]                                                                       <
. . . Child: 1 Const 2 of type int [line: 9]                                                                      <
. . Sibling: 3 Assign: <- of type (null) [line: 10]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 10]                                                                    <
. . . . Child: 0 Id: bb of type bool [line: 10]                                                                   <
. . . . Child: 1 Id: a of type int [line: 10]                                                                     <
. . . Child: 1 Id: b of type bool [line: 10]                                                                      <
. . Sibling: 4 Assign: <- of type (null) [line: 12]                                                               <
. . . Child: 0 Id: b of type bool [line: 12]                                                                      <
. . . Child: 1 Op: != of type (null) [line: 12]                                                                   <
. . . . Child: 0 Op: [ of type (null) [line: 12]                                                                  <
. . . . . Child: 0 Id: cc of type char [line: 12]                                                                 <
. . . . . Child: 1 Const 2 of type int [line: 12]                                                                 <
. . . . Child: 1 Const '4' of type char [line: 12]                                                                <
Number of warnings: 0                                                                                             <
Number of errors: 5                                                                                               <

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P break.c-                                                                                                        ./c- -P break.c-
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
=========== ============ ===========                                                                              <
Func: main returns type void [line: 2]                                                                                  Func: main returns type void [line: 2]
. Child: 1 Compound [line: 3]                                                                                           . Child: 1 Compound [line: 3]
. . Child: 1 While [line: 4]                                                                                            . . Child: 1 While [line: 4]
. . . Child: 0 Const true of type bool [line: 4]                                                                        . . . Child: 0 Const true of type bool [line: 4]
. . . Child: 1 Compound [line: 4]                                                                                       . . . Child: 1 Compound [line: 4]
. . . . Child: 1 Const 666 of type int [line: 5]                                                                        . . . . Child: 1 Const 666 of type int [line: 5]
. . . . Sibling: 1 Break [line: 6]                                                                                      . . . . Sibling: 1 Break [line: 6]
. . . . Sibling: 2 Const 777 of type int [line: 7]                                                                      . . . . Sibling: 2 Const 777 of type int [line: 7]
. . . . Sibling: 3 Break [line: 8]                                                                                      . . . . Sibling: 3 Break [line: 8]
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 0                                                                                                     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P break2.c-                                                                                                       ./c- -P break2.c-
ERROR(9) : Unary '++' requires an operand of type int but was given type (null).                                  |     ERROR(10): Symbol 'output' is not declared.
ERROR(10) : Symbol 'output' is not declared.                                                                      |     ERROR(12): Symbol 'outnl' is not declared.
ERROR(11) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    |     ERROR(16): Symbol 'output' is not declared.
ERROR(12) : Symbol 'outnl' is not declared.                                                                       |     ERROR(17): Symbol 'outnl' is not declared.
ERROR(14) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(16) : Symbol 'output' is not declared.                                                                      <
ERROR(17) : Symbol 'outnl' is not declared.                                                                       <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
i:                                                                                                                <
=========== ============ ===========                                                                              <
ID: i ParentID: <-                                                                                                <
yes, we found ID: i                                                                                               <
ID: i ParentID: <-                                                                                                <
yes, we found ID: i                                                                                               <
ID: i ParentID: <-                                                                                                <
yes, we found ID: i                                                                                               <
Func: main returns type void [line: 2]                                                                            <
. Child: 1 Compound [line: 3]                                                                                     <
. . Child: 0 Var: i of type int [line: 4]                                                                         <
. . Child: 1 Assign: <- of type int [line: 6]                                                                     <
. . . Child: 0 Id: i of type int [line: 6]                                                                        <
. . . Child: 1 Const 0 of type int [line: 6]                                                                      <
. . Sibling: 1 While [line: 7]                                                                                    <
. . . Child: 0 Const true of type bool [line: 7]                                                                  <
. . . Child: 1 Compound [line: 7]                                                                                 <
. . . . Child: 1 While [line: 8]                                                                                  <
. . . . . Child: 0 Const true of type bool [line: 8]                                                              <
. . . . . Child: 1 Compound [line: 8]                                                                             <
. . . . . . Child: 1 Assign: ++ of type (null) [line: 9]                                                          <
. . . . . . . Child: 0 Id: i of type int [line: 9]                                                                <
. . . . . . Sibling: 1 Call: output of type (null) [line: 10]                                                     <
. . . . . . . Child: 0 Id: i of type (null) [line: 10]                                                            <
. . . . . . Sibling: 2 If [line: 11]                                                                              <
. . . . . . . Child: 0 Op: > of type (null) [line: 11]                                                            <
. . . . . . . . Child: 0 Id: i of type int [line: 11]                                                             <
. . . . . . . . Child: 1 Const 4 of type int [line: 11]                                                           <
. . . . . . . Child: 1 Break [line: 11]                                                                           <
. . . . . . Sibling: 3 Call: outnl of type (null) [line: 12]                                                      <
. . . . Sibling: 1 If [line: 14]                                                                                  <
. . . . . Child: 0 Op: > of type (null) [line: 14]                                                                <
. . . . . . Child: 0 Id: i of type int [line: 14]                                                                 <
. . . . . . Child: 1 Const 8 of type int [line: 14]                                                               <
. . . . . Child: 1 Break [line: 14]                                                                               <
. . Sibling: 2 Call: output of type (null) [line: 16]                                                             <
. . . Child: 0 Id: i of type (null) [line: 16]                                                                    <
. . Sibling: 3 Call: outnl of type (null) [line: 17]                                                              <
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 7                                                                                               |     Number of errors: 4

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P break3.c-                                                                                                       ./c- -P break3.c-
ERROR(5) : Symbol 'x' is already declared.                                                                        |     WARNING(4): The variable 'x' seems not to be used.
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
x:                                                                                                                <
=========== ============ ===========                                                                              <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: >                                                                                                 <
yes, we found ID: x                                                                                               <
ID: x ParentID: >                                                                                                 <
yes, we found ID: x                                                                                               <
ID: x ParentID: >                                                                                                 <
yes, we found ID: x                                                                                               <
Func: main returns type void [line: 2]                                                                                  Func: main returns type void [line: 2]
. Child: 1 Compound [line: 3]                                                                                           . Child: 1 Compound [line: 3]
. . Child: 0 Var: x of type int [line: 4]                                                                               . . Child: 0 Var: x of type int [line: 4]
. . Child: 1 While [line: 5]                                                                                            . . Child: 1 While [line: 5]
. . . Child: 0 Const true of type bool [line: 5]                                                                        . . . Child: 0 Const true of type bool [line: 5]
. . . Child: 1 For [line: 5]                                                                                            . . . Child: 1 For [line: 5]
. . . . Child: 0 Var: x of type int [line: 5]                                                                           . . . . Child: 0 Var: x of type int [line: 5]
. . . . Child: 1 Range [line: 5]                                                                                        . . . . Child: 1 Range [line: 5]
. . . . . Child: 0 Const 1 of type int [line: 5]                                                                        . . . . . Child: 0 Const 1 of type int [line: 5]
. . . . . Child: 1 Id: x of type int [line: 5]                                                                    |     . . . . . Child: 1 Id: x of undefined type [line: 5]
. . . . Child: 2 If [line: 5]                                                                                           . . . . Child: 2 If [line: 5]
. . . . . Child: 0 Op: > of type bool [line: 5]                                                                         . . . . . Child: 0 Op: > of type bool [line: 5]
. . . . . . Child: 0 Id: x of type int [line: 5]                                                                        . . . . . . Child: 0 Id: x of type int [line: 5]
. . . . . . Child: 1 Const 1 of type int [line: 5]                                                                      . . . . . . Child: 1 Const 1 of type int [line: 5]
. . . . . Child: 1 Break [line: 5]                                                                                      . . . . . Child: 1 Break [line: 5]
. . . . . Child: 2 Break [line: 5]                                                                                      . . . . . Child: 2 Break [line: 5]
Number of warnings: 0                                                                                             |     Number of warnings: 1
Number of errors: 1                                                                                               |     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P break4.c-                                                                                                       ./c- -P break4.c-
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
=========== ============ ===========                                                                              <
Func: main returns type void [line: 2]                                                                                  Func: main returns type void [line: 2]
. Child: 1 Compound [line: 3]                                                                                           . Child: 1 Compound [line: 3]
. . Child: 1 While [line: 4]                                                                                            . . Child: 1 While [line: 4]
. . . Child: 0 Const true of type bool [line: 4]                                                                        . . . Child: 0 Const true of type bool [line: 4]
. . . Child: 1 Compound [line: 4]                                                                                       . . . Child: 1 Compound [line: 4]
. . . . Child: 1 While [line: 5]                                                                                        . . . . Child: 1 While [line: 5]
. . . . . Child: 0 Const true of type bool [line: 5]                                                                    . . . . . Child: 0 Const true of type bool [line: 5]
. . . . . Child: 1 Compound [line: 5]                                                                                   . . . . . Child: 1 Compound [line: 5]
. . . . . . Child: 1 Break [line: 6]                                                                                    . . . . . . Child: 1 Break [line: 6]
. . . . Sibling: 1 Break [line: 8]                                                                                      . . . . Sibling: 1 Break [line: 8]
. . Sibling: 1 Break [line: 10]                                                                                         . . Sibling: 1 Break [line: 10]
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 0                                                                                                     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P call.c-                                                                                                         ./c- -P call.c-
ERROR(4) : Symbol 'output' is not declared.                                                                       |     ERROR(4): Symbol 'output' is not declared.
ERROR(5) : Symbol 'outputb' is not declared.                                                                      |     ERROR(5): Symbol 'outputb' is not declared.
ERROR(6) : Symbol 'outputc' is not declared.                                                                      |     ERROR(6): Symbol 'outputc' is not declared.
ERROR(7) : Symbol 'outnl' is not declared.                                                                        |     ERROR(7): Symbol 'outnl' is not declared.
ERROR(13) : Symbol 'output' is not declared.                                                                      |     ERROR(13): Symbol 'output' is not declared.
ERROR(14) : Symbol 'outputb' is not declared.                                                                     |     ERROR(14): Symbol 'outputb' is not declared.
ERROR(15) : Symbol 'outputc' is not declared.                                                                     |     ERROR(15): Symbol 'outputc' is not declared.
ERROR(16) : Symbol 'outnl' is not declared.                                                                       |     ERROR(16): Symbol 'outnl' is not declared.
ERROR(25) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  <
ERROR(25) : Cannot index nonarray 'b'.                                                                            <
ERROR(26) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  <
ERROR(26) : Cannot index nonarray 'c'.                                                                            <
ERROR(42) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(42) : Cannot index nonarray 'a'.                                                                            <
ERROR(43) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  <
ERROR(43) : Cannot index nonarray 'b'.                                                                            <
ERROR(44) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  <
ERROR(44) : Cannot index nonarray 'c'.                                                                            <
ERROR(50) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(50) : Cannot index nonarray 'ga'.                                                                           <
ERROR(51) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  <
ERROR(51) : Cannot index nonarray 'gb'.                                                                           <
ERROR(52) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  <
ERROR(52) : Cannot index nonarray 'gc'.                                                                           <
ERROR(60) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(60) : Cannot index nonarray 'ga'.                                                                           <
ERROR(61) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  <
ERROR(61) : Cannot index nonarray 'gb'.                                                                           <
ERROR(62) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  <
ERROR(62) : Cannot index nonarray 'gc'.                                                                           <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
cheyenne: °åÜ                                                                                                        <
Scope: cheyenne -----------------                                                                                 <
a:                                                                                                                <
b:                                                                                                                <
c:                                                                                                                <
sioux:  ÷Ü                                                                                                           <
Scope: sioux -----------------                                                                                    <
a:                                                                                                                <
b:                                                                                                                <
c:                                                                                                                <
comanche: ðÝ                                                                                                        <
Scope: comanche -----------------                                                                                 <
ga:                                                                                                               <
gb:                                                                                                               <
gc:                                                                                                               <
main:                                                                                                             <
z:                                                                                                                <
Scope: main -----------------                                                                                     <
a:                                                                                                                <
b:                                                                                                                <
c:                                                                                                                <
=========== ============ ===========                                                                              <
ID: a ParentID: output                                                                                            <
yes, we found ID: a                                                                                               <
ID: a ParentID: output                                                                                            <
yes, we found ID: a                                                                                               <
ID: a ParentID: output                                                                                            <
yes, we found ID: a                                                                                               <
Func: cheyenne returns type void [line: 2]                                                                        <
. Child: 0 Parm: a of type int [line: 2]                                                                          <
. Sibling: 1 Parm: b of type bool [line: 2]                                                                       <
. Sibling: 2 Parm: c of type char [line: 2]                                                                       <
. Child: 1 Compound [line: 3]                                                                                     <
. . Child: 1 Call: output of type (null) [line: 4]                                                                <
. . . Child: 0 Id: a of type int [line: 4]                                                                        <
. . Sibling: 1 Call: outputb of type (null) [line: 5]                                                             <
. . . Child: 0 Id: b of type (null) [line: 5]                                                                     <
. . Sibling: 2 Call: outputc of type (null) [line: 6]                                                             <
. . . Child: 0 Id: c of type (null) [line: 6]                                                                     <
. . Sibling: 3 Call: outnl of type (null) [line: 7]                                                               <
Sibling: 1 Func: sioux returns type void [line: 11]                                                               <
. Child: 0 Parm: a of array of type int [line: 11]                                                                <
. Sibling: 1 Parm: b of array of type bool [line: 11]                                                             <
. Sibling: 2 Parm: c of array of type char [line: 11]                                                             <
. Child: 1 Compound [line: 12]                                                                                    <
. . Child: 1 Call: output of type (null) [line: 13]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 13]                                                                    <
. . . . Child: 0 Id: a of type (null) [line: 13]                                                                  <
. . . . Child: 1 Const 1 of type int [line: 13]                                                                   <
. . Sibling: 1 Call: outputb of type (null) [line: 14]                                                            <
. . . Child: 0 Op: [ of type (null) [line: 14]                                                                    <
. . . . Child: 0 Id: b of type (null) [line: 14]                                                                  <
. . . . Child: 1 Const 2 of type int [line: 14]                                                                   <
. . Sibling: 2 Call: outputc of type (null) [line: 15]                                                            <
. . . Child: 0 Op: [ of type (null) [line: 15]                                                                    <
. . . . Child: 0 Id: c of type (null) [line: 15]                                                                  <
. . . . Child: 1 Const 3 of type int [line: 15]                                                                   <
. . Sibling: 3 Call: outnl of type (null) [line: 16]                                                              <
Sibling: 2 Func: comanche returns type void [line: 20]                                                            <
. Child: 0 Parm: z of array of type int [line: 20]                                                                <
. Child: 1 Compound [line: 21]                                                                                    <
. . Child: 0 Var: b of array of type bool [line: 22]                                                              <
. . Sibling: 1 Var: c of array of type char [line: 23]                                                            <
. . Child: 1 Assign: <- of type (null) [line: 25]                                                                 <
. . . Child: 0 Op: [ of type (null) [line: 25]                                                                    <
. . . . Child: 0 Id: b of type bool [line: 25]                                                                    <
. . . . Child: 1 Const 2 of type int [line: 25]                                                                   <
. . . Child: 1 Const true of type bool [line: 25]                                                                 <
. . Sibling: 1 Assign: <- of type (null) [line: 26]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 26]                                                                    <
. . . . Child: 0 Id: c of type char [line: 26]                                                                    <
. . . . Child: 1 Const 3 of type int [line: 26]                                                                   <
. . . Child: 1 Const 'z' of type char [line: 26]                                                                  <
. . Sibling: 2 Call: sioux of type void [line: 27]                                                                <
. . . Child: 0 Id: z of type (null) [line: 27]                                                                    <
. . . Sibling: 1 Id: b of type (null) [line: 27]                                                                  <
. . . Sibling: 2 Id: c of type (null) [line: 27]                                                                  <
Sibling: 3 Var: ga of array of type int [line: 32]                                                                <
Sibling: 4 Var: gb of array of type bool [line: 33]                                                               <
Sibling: 5 Var: gc of array of type char [line: 34]                                                               <
Sibling: 6 Func: main returns type void [line: 36]                                                                <
. Child: 1 Compound [line: 37]                                                                                    <
. . Child: 0 Var: a of array of type int [line: 38]                                                               <
. . Sibling: 1 Var: b of array of type bool [line: 39]                                                            <
. . Sibling: 2 Var: c of array of type char [line: 40]                                                            <
. . Child: 1 Assign: <- of type (null) [line: 42]                                                                 <
. . . Child: 0 Op: [ of type (null) [line: 42]                                                                    <
. . . . Child: 0 Id: a of type int [line: 42]                                                                     <
. . . . Child: 1 Const 1 of type int [line: 42]                                                                   <
. . . Child: 1 Const 555 of type int [line: 42]                                                                   <
. . Sibling: 1 Assign: <- of type (null) [line: 43]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 43]                                                                    <
. . . . Child: 0 Id: b of type bool [line: 43]                                                                    <
. . . . Child: 1 Const 2 of type int [line: 43]                                                                   <
. . . Child: 1 Const true of type bool [line: 43]                                                                 <
. . Sibling: 2 Assign: <- of type (null) [line: 44]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 44]                                                                    <
. . . . Child: 0 Id: c of type char [line: 44]                                                                    <
. . . . Child: 1 Const 3 of type int [line: 44]                                                                   <
. . . Child: 1 Const 'z' of type char [line: 44]                                                                  <
. . Sibling: 3 Call: cheyenne of type void [line: 45]                                                             <
. . . Child: 0 Const 666 of type int [line: 45]                                                                   <
. . . Sibling: 1 Const true of type bool [line: 45]                                                               <
. . . Sibling: 2 Const 'c' of type char [line: 45]                                                                <
. . Sibling: 4 Call: cheyenne of type void [line: 46]                                                             <
. . . Child: 0 Const 777 of type int [line: 46]                                                                   <
. . . Sibling: 1 Const false of type bool [line: 46]                                                              <
. . . Sibling: 2 Const 'd' of type char [line: 46]                                                                <
. . Sibling: 5 Call: sioux of type void [line: 47]                                                                <
. . . Child: 0 Id: a of type (null) [line: 47]                                                                    <
. . . Sibling: 1 Id: b of type (null) [line: 47]                                                                  <
. . . Sibling: 2 Id: c of type (null) [line: 47]                                                                  <
. . Sibling: 6 Call: comanche of type void [line: 48]                                                             <
. . . Child: 0 Id: a of type (null) [line: 48]                                                                    <
. . Sibling: 7 Assign: <- of type (null) [line: 50]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 50]                                                                    <
. . . . Child: 0 Id: ga of type int [line: 50]                                                                    <
. . . . Child: 1 Const 1 of type int [line: 50]                                                                   <
. . . Child: 1 Const 888 of type int [line: 50]                                                                   <
. . Sibling: 8 Assign: <- of type (null) [line: 51]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 51]                                                                    <
. . . . Child: 0 Id: gb of type bool [line: 51]                                                                   <
. . . . Child: 1 Const 2 of type int [line: 51]                                                                   <
. . . Child: 1 Const false of type bool [line: 51]                                                                <
. . Sibling: 9 Assign: <- of type (null) [line: 52]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 52]                                                                    <
. . . . Child: 0 Id: gc of type char [line: 52]                                                                   <
. . . . Child: 1 Const 3 of type int [line: 52]                                                                   <
. . . Child: 1 Const 'g' of type char [line: 52]                                                                  <
. . Sibling: 10 Call: sioux of type void [line: 53]                                                               <
. . . Child: 0 Id: ga of type (null) [line: 53]                                                                   <
. . . Sibling: 1 Id: gb of type (null) [line: 53]                                                                 <
. . . Sibling: 2 Id: gc of type (null) [line: 53]                                                                 <
. . Sibling: 11 Call: comanche of type void [line: 54]                                                            <
. . . Child: 0 Id: ga of type (null) [line: 54]                                                                   <
. . Sibling: 12 Compound [line: 56]                                                                               <
. . . Child: 0 Var: ga of array of type int [line: 57]                                                            <
. . . Sibling: 1 Var: gb of array of type bool [line: 58]                                                         <
. . . Sibling: 2 Var: gc of array of type char [line: 59]                                                         <
. . . Child: 1 Assign: <- of type (null) [line: 60]                                                               <
. . . . Child: 0 Op: [ of type (null) [line: 60]                                                                  <
. . . . . Child: 0 Id: ga of type int [line: 60]                                                                  <
. . . . . Child: 1 Const 1 of type int [line: 60]                                                                 <
. . . . Child: 1 Const 999 of type int [line: 60]                                                                 <
. . . Sibling: 1 Assign: <- of type (null) [line: 61]                                                             <
. . . . Child: 0 Op: [ of type (null) [line: 61]                                                                  <
. . . . . Child: 0 Id: gb of type bool [line: 61]                                                                 <
. . . . . Child: 1 Const 2 of type int [line: 61]                                                                 <
. . . . Child: 1 Const true of type bool [line: 61]                                                               <
. . . Sibling: 2 Assign: <- of type (null) [line: 62]                                                             <
. . . . Child: 0 Op: [ of type (null) [line: 62]                                                                  <
. . . . . Child: 0 Id: gc of type char [line: 62]                                                                 <
. . . . . Child: 1 Const 3 of type int [line: 62]                                                                 <
. . . . Child: 1 Const 's' of type char [line: 62]                                                                <
. . . Sibling: 3 Call: sioux of type void [line: 64]                                                              <
. . . . Child: 0 Id: ga of type (null) [line: 64]                                                                 <
. . . . Sibling: 1 Id: gb of type (null) [line: 64]                                                               <
. . . . Sibling: 2 Id: gc of type (null) [line: 64]                                                               <
. . . Sibling: 4 Call: comanche of type void [line: 65]                                                           <
. . . . Child: 0 Id: ga of type (null) [line: 65]                                                                 <
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 19                                                                                              |     Number of errors: 8

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P call2.c-                                                                                                        ./c- -P call2.c-
ERROR(3) : Symbol 'output' is not declared.                                                                       |     ERROR(3): Symbol 'output' is not declared.
ERROR(4) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                    |     ERROR(5): Symbol 'outnl' is not declared.
ERROR(4) : Cannot index nonarray 'z'.                                                                             |     ERROR(10): Symbol 'output' is not declared.
ERROR(5) : Symbol 'outnl' is not declared.                                                                        |     ERROR(12): Symbol 'output' is not declared.
ERROR(10) : Symbol 'output' is not declared.                                                                      |     ERROR(17): Symbol 'output' is not declared.
ERROR(12) : Symbol 'output' is not declared.                                                                      |     ERROR(19): Symbol 'output' is not declared.
ERROR(17) : Symbol 'output' is not declared.                                                                      |     ERROR(29): Symbol 'output' is not declared.
ERROR(19) : Symbol 'output' is not declared.                                                                      |     ERROR(30): Symbol 'outnl' is not declared.
ERROR(27) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(27) : Cannot index nonarray 'w'.                                                                            <
ERROR(29) : Symbol 'output' is not declared.                                                                      <
ERROR(30) : Symbol 'outnl' is not declared.                                                                       <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
three:                                                                                                            <
Scope: three -----------------                                                                                    <
two: @&É                                                                                                           <
z:                                                                                                                <
Scope: two -----------------                                                                                      <
one: `7É                                                                                                           <
y:                                                                                                                <
Scope: one -----------------                                                                                      <
main:                                                                                                             <
x:                                                                                                                <
Scope: main -----------------                                                                                     <
w:                                                                                                                <
=========== ============ ===========                                                                              <
ID: z ParentID: [                                                                                                 <
yes, we found ID: z                                                                                               <
ID: z ParentID: [                                                                                                 <
yes, we found ID: z                                                                                               <
ID: z ParentID: [                                                                                                 <
yes, we found ID: z                                                                                               <
Func: three returns type void [line: 2]                                                                           <
. Child: 0 Parm: z of array of type int [line: 2]                                                                 <
. Child: 1 Compound [line: 2]                                                                                     <
. . Child: 1 Call: output of type (null) [line: 3]                                                                <
. . . Child: 0 Op: [ of type int [line: 3]                                                                        <
. . . . Child: 0 Id: z of type int [line: 3]                                                                      <
. . . . Child: 1 Const 7 of type int [line: 3]                                                                    <
. . Sibling: 1 Assign: <- of type (null) [line: 4]                                                                <
. . . Child: 0 Op: [ of type (null) [line: 4]                                                                     <
. . . . Child: 0 Id: z of type int [line: 4]                                                                      <
. . . . Child: 1 Const 7 of type int [line: 4]                                                                    <
. . . Child: 1 Const 666 of type int [line: 4]                                                                    <
. . Sibling: 2 Call: outnl of type (null) [line: 5]                                                               <
Sibling: 1 Func: two returns type void [line: 9]                                                                  <
. Child: 0 Parm: y of array of type int [line: 9]                                                                 <
. Child: 1 Compound [line: 9]                                                                                     <
. . Child: 1 Call: output of type (null) [line: 10]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 10]                                                                    <
. . . . Child: 0 Id: y of type (null) [line: 10]                                                                  <
. . . . Child: 1 Const 7 of type int [line: 10]                                                                   <
. . Sibling: 1 Call: three of type void [line: 11]                                                                <
. . . Child: 0 Id: y of type (null) [line: 11]                                                                    <
. . Sibling: 2 Call: output of type (null) [line: 12]                                                             <
. . . Child: 0 Op: [ of type (null) [line: 12]                                                                    <
. . . . Child: 0 Id: y of type (null) [line: 12]                                                                  <
. . . . Child: 1 Const 7 of type int [line: 12]                                                                   <
Sibling: 2 Func: one returns type void [line: 16]                                                                 <
. Child: 0 Parm: x of array of type int [line: 16]                                                                <
. Child: 1 Compound [line: 16]                                                                                    <
. . Child: 1 Call: output of type (null) [line: 17]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 17]                                                                    <
. . . . Child: 0 Id: x of type (null) [line: 17]                                                                  <
. . . . Child: 1 Const 7 of type int [line: 17]                                                                   <
. . Sibling: 1 Call: two of type void [line: 18]                                                                  <
. . . Child: 0 Id: x of type (null) [line: 18]                                                                    <
. . Sibling: 2 Call: output of type (null) [line: 19]                                                             <
. . . Child: 0 Op: [ of type (null) [line: 19]                                                                    <
. . . . Child: 0 Id: x of type (null) [line: 19]                                                                  <
. . . . Child: 1 Const 7 of type int [line: 19]                                                                   <
Sibling: 3 Func: main returns type void [line: 23]                                                                <
. Child: 1 Compound [line: 24]                                                                                    <
. . Child: 0 Var: w of array of type int [line: 25]                                                               <
. . Child: 1 Assign: <- of type (null) [line: 27]                                                                 <
. . . Child: 0 Op: [ of type (null) [line: 27]                                                                    <
. . . . Child: 0 Id: w of type int [line: 27]                                                                     <
. . . . Child: 1 Const 7 of type int [line: 27]                                                                   <
. . . Child: 1 Const 42 of type int [line: 27]                                                                    <
. . Sibling: 1 Call: one of type void [line: 28]                                                                  <
. . . Child: 0 Id: w of type (null) [line: 28]                                                                    <
. . Sibling: 2 Call: output of type (null) [line: 29]                                                             <
. . . Child: 0 Op: [ of type (null) [line: 29]                                                                    <
. . . . Child: 0 Id: w of type (null) [line: 29]                                                                  <
. . . . Child: 1 Const 7 of type int [line: 29]                                                                   <
. . Sibling: 3 Call: outnl of type (null) [line: 30]                                                              <
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 10                                                                                              |     Number of errors: 8

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P call3.c-                                                                                                        ./c- -P call3.c-
ERROR(3) : Symbol 'output' is not declared.                                                                       |     ERROR(3): Symbol 'output' is not declared.
ERROR(4) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                    |     ERROR(5): Symbol 'outnl' is not declared.
ERROR(4) : Cannot index nonarray 'z'.                                                                             |     ERROR(12): Symbol 'output' is not declared.
ERROR(5) : Symbol 'outnl' is not declared.                                                                        |     ERROR(14): Symbol 'output' is not declared.
ERROR(7) : Cannot index nonarray 'z'.                                                                             |     ERROR(21): Symbol 'output' is not declared.
ERROR(12) : Symbol 'output' is not declared.                                                                      |     ERROR(23): Symbol 'output' is not declared.
ERROR(14) : Symbol 'output' is not declared.                                                                      |     ERROR(34): Symbol 'output' is not declared.
ERROR(16) : Cannot index nonarray 'y'.                                                                            |     ERROR(35): Symbol 'output' is not declared.
ERROR(21) : Symbol 'output' is not declared.                                                                      |     ERROR(36): Symbol 'outnl' is not declared.
ERROR(23) : Symbol 'output' is not declared.                                                                      <
ERROR(25) : Cannot index nonarray 'x'.                                                                            <
ERROR(33) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(33) : Cannot index nonarray 'w'.                                                                            <
ERROR(34) : Symbol 'output' is not declared.                                                                      <
ERROR(35) : Symbol 'output' is not declared.                                                                      <
ERROR(36) : Symbol 'outnl' is not declared.                                                                       <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
three: PV                                                                                                         <
Scope: three -----------------                                                                                    <
two: k                                                                                                            <
z:                                                                                                                <
Scope: two -----------------                                                                                      <
one: Ð                                                                                                             <
y:                                                                                                                <
Scope: one -----------------                                                                                      <
main:                                                                                                             <
x:                                                                                                                <
Scope: main -----------------                                                                                     <
w:                                                                                                                <
=========== ============ ===========                                                                              <
ID: z ParentID: [                                                                                                 <
yes, we found ID: z                                                                                               <
ID: z ParentID: [                                                                                                 <
yes, we found ID: z                                                                                               <
ID: z ParentID: [                                                                                                 <
yes, we found ID: z                                                                                               <
Func: three returns type int [line: 2]                                                                            <
. Child: 0 Parm: z of array of type int [line: 2]                                                                 <
. Child: 1 Compound [line: 2]                                                                                     <
. . Child: 1 Call: output of type (null) [line: 3]                                                                <
. . . Child: 0 Op: [ of type int [line: 3]                                                                        <
. . . . Child: 0 Id: z of type int [line: 3]                                                                      <
. . . . Child: 1 Const 7 of type int [line: 3]                                                                    <
. . Sibling: 1 Assign: <- of type (null) [line: 4]                                                                <
. . . Child: 0 Op: [ of type (null) [line: 4]                                                                     <
. . . . Child: 0 Id: z of type int [line: 4]                                                                      <
. . . . Child: 1 Const 7 of type int [line: 4]                                                                    <
. . . Child: 1 Const 666 of type int [line: 4]                                                                    <
. . Sibling: 2 Call: outnl of type (null) [line: 5]                                                               <
. . Sibling: 3 Return [line: 7]                                                                                   <
. . . Child: 0 Op: [ of type (null) [line: 7]                                                                     <
. . . . Child: 0 Id: z of type int [line: 7]                                                                      <
. . . . Child: 1 Const 7 of type int [line: 7]                                                                    <
Sibling: 1 Func: two returns type int [line: 11]                                                                  <
. Child: 0 Parm: y of array of type int [line: 11]                                                                <
. Child: 1 Compound [line: 11]                                                                                    <
. . Child: 1 Call: output of type (null) [line: 12]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 12]                                                                    <
. . . . Child: 0 Id: y of type (null) [line: 12]                                                                  <
. . . . Child: 1 Const 7 of type int [line: 12]                                                                   <
. . Sibling: 1 Call: three of type int [line: 13]                                                                 <
. . . Child: 0 Id: y of type (null) [line: 13]                                                                    <
. . Sibling: 2 Call: output of type (null) [line: 14]                                                             <
. . . Child: 0 Op: [ of type (null) [line: 14]                                                                    <
. . . . Child: 0 Id: y of type (null) [line: 14]                                                                  <
. . . . Child: 1 Const 7 of type int [line: 14]                                                                   <
. . Sibling: 3 Return [line: 16]                                                                                  <
. . . Child: 0 Op: [ of type (null) [line: 16]                                                                    <
. . . . Child: 0 Id: y of type int [line: 16]                                                                     <
. . . . Child: 1 Const 7 of type int [line: 16]                                                                   <
Sibling: 2 Func: one returns type int [line: 20]                                                                  <
. Child: 0 Parm: x of array of type int [line: 20]                                                                <
. Child: 1 Compound [line: 20]                                                                                    <
. . Child: 1 Call: output of type (null) [line: 21]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 21]                                                                    <
. . . . Child: 0 Id: x of type (null) [line: 21]                                                                  <
. . . . Child: 1 Const 7 of type int [line: 21]                                                                   <
. . Sibling: 1 Call: two of type int [line: 22]                                                                   <
. . . Child: 0 Id: x of type (null) [line: 22]                                                                    <
. . Sibling: 2 Call: output of type (null) [line: 23]                                                             <
. . . Child: 0 Op: [ of type (null) [line: 23]                                                                    <
. . . . Child: 0 Id: x of type (null) [line: 23]                                                                  <
. . . . Child: 1 Const 7 of type int [line: 23]                                                                   <
. . Sibling: 3 Return [line: 25]                                                                                  <
. . . Child: 0 Op: [ of type (null) [line: 25]                                                                    <
. . . . Child: 0 Id: x of type int [line: 25]                                                                     <
. . . . Child: 1 Const 7 of type int [line: 25]                                                                   <
Sibling: 3 Func: main returns type void [line: 29]                                                                <
. Child: 1 Compound [line: 30]                                                                                    <
. . Child: 0 Var: w of array of type int [line: 31]                                                               <
. . Child: 1 Assign: <- of type (null) [line: 33]                                                                 <
. . . Child: 0 Op: [ of type (null) [line: 33]                                                                    <
. . . . Child: 0 Id: w of type int [line: 33]                                                                     <
. . . . Child: 1 Const 7 of type int [line: 33]                                                                   <
. . . Child: 1 Const 42 of type int [line: 33]                                                                    <
. . Sibling: 1 Call: output of type (null) [line: 34]                                                             <
. . . Child: 0 Call: one of type (null) [line: 34]                                                                <
. . . . Child: 0 Id: w of type (null) [line: 34]                                                                  <
. . Sibling: 2 Call: output of type (null) [line: 35]                                                             <
. . . Child: 0 Op: [ of type (null) [line: 35]                                                                    <
. . . . Child: 0 Id: w of type (null) [line: 35]                                                                  <
. . . . Child: 1 Const 7 of type int [line: 35]                                                                   <
. . Sibling: 3 Call: outnl of type (null) [line: 36]                                                              <
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 11                                                                                              |     Number of errors: 9

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P callerr.c-                                                                                                      ./c- -P callerr.c-
ERROR(16) : Symbol 'lyra' is not declared.                                                                        |     ERROR(LINKER): A function named 'main()' must be defined.
ERROR(22) : Symbol 'lyra' is not declared.                                                                        |     ERROR(16): Symbol 'lyra' is not declared.
=========== Symbol Table ===========                                                                              |     ERROR(22): Symbol 'lyra' is not declared.
Scope: Global -----------------                                                                                   |     ERROR(23): Symbol 'lyra' is not declared.
dory:                                                                                                             |     ERROR(27): '<-' requires operands of the same type but lhs is type int and rhs is type void.
Scope: dory -----------------                                                                                     <
ella: Àª,                                                                                                           <
Scope: ella -----------------                                                                                     <
fred:                                                                                                             <
x:                                                                                                                <
Scope: fred -----------------                                                                                     <
x:                                                                                                                <
=========== ============ ===========                                                                              <
Func: dory returns type int [line: 1]                                                                             <
. Child: 1 Compound [line: 2]                                                                                     <
. . Child: 1 Return [line: 3]                                                                                     <
. . . Child: 0 Const 6 of type int [line: 3]                                                                      <
Sibling: 1 Func: ella returns type void [line: 6]                                                                 <
. Child: 0 Parm: x of type int [line: 6]                                                                          <
. Child: 1 Compound [line: 7]                                                                                     <
. . Child: 1 Return [line: 8]                                                                                     <
. . . Child: 0 Id: x of type int [line: 8]                                                                        <
Sibling: 2 Func: fred returns type void [line: 11]                                                                <
. Child: 1 Compound [line: 12]                                                                                    <
. . Child: 0 Var: x of type int [line: 13]                                                                        <
. . Child: 1 Call: fred of type void [line: 15]                                                                   <
. . Sibling: 1 Call: lyra of type (null) [line: 16]                                                               <
. . . Child: 0 Call: ella of type (null) [line: 16]                                                               <
. . . . Child: 0 Const 3 of type int [line: 16]                                                                   <
. . Sibling: 2 Call: ella of type void [line: 18]                                                                 <
. . . Child: 0 Call: ella of type (null) [line: 18]                                                               <
. . . . Child: 0 Const 9 of type int [line: 18]                                                                   <
. . Sibling: 3 Call: ella of type void [line: 19]                                                                 <
. . . Child: 0 Call: dory of type (null) [line: 19]                                                               <
. . Sibling: 4 Call: dory of type int [line: 20]                                                                  <
. . . Child: 0 Call: ella of type (null) [line: 20]                                                               <
. . . . Child: 0 Const 7 of type int [line: 20]                                                                   <
. . Sibling: 5 Call: dory of type int [line: 21]                                                                  <
. . . Child: 0 Call: dory of type (null) [line: 21]                                                               <
. . Sibling: 6 Call: lyra of type (null) [line: 22]                                                               <
. . . Child: 0 Call: dory of type (null) [line: 22]                                                               <
. . Sibling: 7 Call: dory of type int [line: 23]                                                                  <
. . . Child: 0 Call: lyra of type (null) [line: 23]                                                               <
. . Sibling: 8 Assign: <- of type (null) [line: 26]                                                               <
. . . Child: 0 Id: x of type int [line: 26]                                                                       <
. . . Child: 1 Call: dory of type int [line: 26]                                                                  <
. . Sibling: 9 Assign: <- of type (null) [line: 27]                                                               <
. . . Child: 0 Id: x of type int [line: 27]                                                                       <
. . . Child: 1 Call: ella of type void [line: 27]                                                                 <
. . . . Child: 0 Const 8 of type int [line: 27]                                                                   <
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 2                                                                                               |     Number of errors: 5

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P constants.c-                                                                                                    ./c- -P constants.c-
ERROR(4) : Symbol 'output' is not declared.                                                                       |     ERROR(4): Symbol 'output' is not declared.
ERROR(5) : Symbol 'outputb' is not declared.                                                                      |     ERROR(5): Symbol 'outputb' is not declared.
ERROR(6) : Symbol 'outputb' is not declared.                                                                      |     ERROR(6): Symbol 'outputb' is not declared.
ERROR(7) : Symbol 'outputc' is not declared.                                                                      |     ERROR(7): Symbol 'outputc' is not declared.
ERROR(8) : Symbol 'outnl' is not declared.                                                                        |     ERROR(8): Symbol 'outnl' is not declared.
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
=========== ============ ===========                                                                              <
Func: main returns type void [line: 2]                                                                            <
. Child: 1 Compound [line: 3]                                                                                     <
. . Child: 1 Call: output of type (null) [line: 4]                                                                <
. . . Child: 0 Const 111 of type int [line: 4]                                                                    <
. . Sibling: 1 Call: outputb of type (null) [line: 5]                                                             <
. . . Child: 0 Const true of type bool [line: 5]                                                                  <
. . Sibling: 2 Call: outputb of type (null) [line: 6]                                                             <
. . . Child: 0 Const false of type bool [line: 6]                                                                 <
. . Sibling: 3 Call: outputc of type (null) [line: 7]                                                             <
. . . Child: 0 Const 'x' of type char [line: 7]                                                                   <
. . Sibling: 4 Call: outnl of type (null) [line: 8]                                                               <
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 5                                                                                                     Number of errors: 5

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P cover.c-                                                                                                        ./c- -P cover.c-
                                                                                                                  >     ERROR(19): Unary '--' requires an operand of type int but was given type char.
                                                                                                                  >     ERROR(20): Unary '?' requires an operand of type int but was given type char.
                                                                                                                  >     ERROR(22): '+' requires operands of type int but lhs is of type bool.
                                                                                                                  >     ERROR(22): '+' requires operands of type int but rhs is of type bool.
                                                                                                                  >     ERROR(22): Cannot index nonarray 'e'.
                                                                                                                  >     ERROR(22): Cannot index nonarray 'e'.
                                                                                                                  >     ERROR(23): Array 'e' should be indexed by type int but got type bool.
                                                                                                                  >     ERROR(23): Cannot index nonarray 'e'.
                                                                                                                  >     ERROR(23): Cannot index nonarray 'e'.
                                                                                                                  >     ERROR(26): 'and' requires operands of type bool but lhs is of type int.
                                                                                                                  >     ERROR(26): 'and' requires operands of type bool but rhs is of type int.
                                                                                                                  >     WARNING(31): The variable 'i' seems not to be used.
                                                                                                                  >     WARNING(31): The variable 'x' seems not to be used.
                                                                                                                  >     WARNING(35): The variable 'a' seems not to be used.
                                                                                                                  >     WARNING(36): The variable 'c' seems not to be used.
                                                                                                                  >     WARNING(38): The variable 'g' seems not to be used.
                                                                                                                  >     WARNING(39): Variable 'b' may be uninitialized when used here.
                                                                                                                  >     WARNING(39): Variable 'd' may be uninitialized when used here.
                                                                                                                  >     WARNING(39): Variable 'e' may be uninitialized when used here.
                                                                                                                  >     WARNING(39): Variable 'f' may be uninitialized when used here.
                                                                                                                  >     Number of warnings: 9
                                                                                                                  >     Number of errors: 11

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P decl.c-                                                                                                         ./c- -P decl.c-
=========== Symbol Table ===========                                                                              |     WARNING(4): The variable 'a' seems not to be used.
Scope: Global -----------------                                                                                   |     WARNING(5): The variable 'b' seems not to be used.
main:                                                                                                             |     WARNING(6): The variable 'c' seems not to be used.
Scope: main -----------------                                                                                     <
a:                                                                                                                <
b:                                                                                                                <
c:                                                                                                                <
=========== ============ ===========                                                                              <
Func: main returns type void [line: 2]                                                                                  Func: main returns type void [line: 2]
. Child: 1 Compound [line: 3]                                                                                           . Child: 1 Compound [line: 3]
. . Child: 0 Var: a of type int [line: 4]                                                                               . . Child: 0 Var: a of type int [line: 4]
. . Sibling: 1 Var: b of type bool [line: 5]                                                                            . . Sibling: 1 Var: b of type bool [line: 5]
. . Sibling: 2 Var: c of type char [line: 6]                                                                            . . Sibling: 2 Var: c of type char [line: 6]
Number of warnings: 0                                                                                             |     Number of warnings: 3
Number of errors: 0                                                                                                     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P emptyline.c-                                                                                                    ./c- -P emptyline.c-
ERROR(12) : Symbol 'x' is already declared.                                                                       |     WARNING(6): The variable 'x' seems not to be used.
=========== Symbol Table ===========                                                                              |     WARNING(12): The variable 'x' seems not to be used.
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
dogs:                                                                                                             <
Scope: dogs -----------------                                                                                     <
x:                                                                                                                <
=========== ============ ===========                                                                              <
Func: main returns type void [line: 2]                                                                                  Func: main returns type void [line: 2]
. Child: 1 Compound [line: 2]                                                                                           . Child: 1 Compound [line: 2]
Sibling: 1 Func: dogs returns type void [line: 4]                                                                       Sibling: 1 Func: dogs returns type void [line: 4]
. Child: 1 Compound [line: 5]                                                                                           . Child: 1 Compound [line: 5]
. . Child: 0 Var: x of type int [line: 6]                                                                               . . Child: 0 Var: x of type int [line: 6]
. . Child: 1 If [line: 9]                                                                                               . . Child: 1 If [line: 9]
. . . Child: 0 Const true of type bool [line: 9]                                                                        . . . Child: 0 Const true of type bool [line: 9]
. . Sibling: 1 While [line: 11]                                                                                         . . Sibling: 1 While [line: 11]
. . . Child: 0 Const true of type bool [line: 11]                                                                       . . . Child: 0 Const true of type bool [line: 11]
. . Sibling: 2 For [line: 12]                                                                                           . . Sibling: 2 For [line: 12]
. . . Child: 0 Var: x of type int [line: 12]                                                                            . . . Child: 0 Var: x of type int [line: 12]
. . . Child: 1 Range [line: 12]                                                                                         . . . Child: 1 Range [line: 12]
. . . . Child: 0 Const 1 of type int [line: 12]                                                                         . . . . Child: 0 Const 1 of type int [line: 12]
. . . . Child: 1 Const 10 of type int [line: 12]                                                                        . . . . Child: 1 Const 10 of type int [line: 12]
. . Sibling: 3 Compound [line: 13]                                                                                      . . Sibling: 3 Compound [line: 13]
Number of warnings: 0                                                                                             |     Number of warnings: 2
Number of errors: 1                                                                                               |     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P everythingS22.c-                                                                                                ./c- -P everythingS22.c-
ERROR(135): syntax error, unexpected CHARCONST, expecting SEMI or COMMA                                           |     WARNING(46): Variable 'trousers' may be uninitialized when used here.
WARNING(135): character is 11 characters long and not a single character: '';                                     |     WARNING(54): The variable 'cheese' seems not to be used.
char cat:''. The first char will be used.                                                                         |     WARNING(54): The variable 'launch' seems not to be used.
Errors found when tokenizing                                                                                      |     WARNING(58): The variable 'c' seems not to be used.
Number of warnings: 0                                                                                             |     WARNING(59): The variable 'i' seems not to be used.
                                                                                                                  >     WARNING(62): Variable 'Wensleydale' may be uninitialized when used here.
                                                                                                                  >     WARNING(70): The variable 'skein' seems not to be used.
                                                                                                                  >     WARNING(82): Variable 'chicken' may be uninitialized when used here.
                                                                                                                  >     WARNING(82): Variable 'run' may be uninitialized when used here.
                                                                                                                  >     WARNING(85): Variable 'gromit' may be uninitialized when used here.
                                                                                                                  >     WARNING(85): Variable 'wallace' may be uninitialized when used here.
                                                                                                                  >     WARNING(90): The variable 'y' seems not to be used.
                                                                                                                  >     WARNING(98): The variable 'pastry' seems not to be used.
                                                                                                                  >     WARNING(116): The variable 'wool' seems not to be used.
                                                                                                                  >     WARNING(125): Variable 'yarn' may be uninitialized when used here.
                                                                                                                  >     WARNING(127): Variable 'preston' may be uninitialized when used here.
                                                                                                                  >     WARNING(127): Variable 'shaun' may be uninitialized when used here.
                                                                                                                  >     Var: gromit of type int [line: 6]
                                                                                                                  >     Sibling: 1 Var: mysteriousPenguin of type int [line: 6]
                                                                                                                  >     Sibling: 2 Func: wallace returns type void [line: 9]
                                                                                                                  >     . Child: 0 Parm: wrong of type int [line: 9]
                                                                                                                  >     . Sibling: 1 Parm: trousers of type int [line: 9]
                                                                                                                  >     . Child: 1 Compound [line: 10]
                                                                                                                  >     . . Child: 0 Var: close of type bool [line: 11]
                                                                                                                  >     . . . Child: 0 Const true of type bool [line: 11]
                                                                                                                  >     . . Sibling: 1 Var: shave of type bool [line: 11]
                                                                                                                  >     . . . Child: 0 Const false of type bool [line: 11]
                                                                                                                  >     . . Sibling: 2 Var: cheese of type int [line: 12]
                                                                                                                  >     . . . Child: 0 Const 17 of type int [line: 12]
                                                                                                                  >     . . Child: 1 Const 1729 of type int [line: 14]
                                                                                                                  >     . . Sibling: 1 Id: close of type bool [line: 15]
                                                                                                                  >     . . Sibling: 2 Op: + of type int [line: 16]
                                                                                                                  >     . . . Child: 0 Op: * of type int [line: 16]
                                                                                                                  >     . . . . Child: 0 Const 11 of type int [line: 16]
                                                                                                                  >     . . . . Child: 1 Const 22 of type int [line: 16]
                                                                                                                  >     . . . Child: 1 Op: * of type int [line: 16]
                                                                                                                  >     . . . . Child: 0 Const 33 of type int [line: 16]
                                                                                                                  >     . . . . Child: 1 Const 44 of type int [line: 16]
                                                                                                                  >     . . Sibling: 3 Assign: <- of type bool [line: 17]
                                                                                                                  >     . . . Child: 0 Id: close of type bool [line: 17]
                                                                                                                  >     . . . Child: 1 Id: shave of type bool [line: 17]
                                                                                                                  >     . . Sibling: 4 Assign: <- of type int [line: 18]
                                                                                                                  >     . . . Child: 0 Id: wrong of type int [line: 18]
                                                                                                                  >     . . . Child: 1 Op: % of type int [line: 18]
                                                                                                                  >     . . . . Child: 0 Id: trousers of type int [line: 18]
                                                                                                                  >     . . . . Child: 1 Op: / of type int [line: 18]
                                                                                                                  >     . . . . . Child: 0 Const 666 of type int [line: 18]
                                                                                                                  >     . . . . . Child: 1 Id: wrong of type int [line: 18]
                                                                                                                  >     . . Sibling: 5 Assign: <- of type int [line: 19]
                                                                                                                  >     . . . Child: 0 Id: gromit of type int [line: 19]
                                                                                                                  >     . . . Child: 1 Op: + of type int [line: 19]
                                                                                                                  >     . . . . Child: 0 Op: - of type int [line: 19]
                                                                                                                  >     . . . . . Child: 0 Op: * of type int [line: 19]
                                                                                                                  >     . . . . . . Child: 0 Id: wrong of type int [line: 19]
                                                                                                                  >     . . . . . . Child: 1 Id: trousers of type int [line: 19]
                                                                                                                  >     . . . . . Child: 1 Id: gromit of type int [line: 19]
                                                                                                                  >     . . . . Child: 1 Op: chsign of type int [line: 19]
                                                                                                                  >     . . . . . Child: 0 Const 42 of type int [line: 19]
                                                                                                                  >     . . Sibling: 6 Assign: += of type int [line: 20]
                                                                                                                  >     . . . Child: 0 Id: gromit of type int [line: 20]
                                                                                                                  >     . . . Child: 1 Const 27182818 of type int [line: 20]
                                                                                                                  >     . . Sibling: 7 Assign: -= of type int [line: 21]
                                                                                                                  >     . . . Child: 0 Id: gromit of type int [line: 21]
                                                                                                                  >     . . . Child: 1 Op: chsign of type int [line: 21]
                                                                                                                  >     . . . . Child: 0 Const 31415927 of type int [line: 21]
                                                                                                                  >     . . Sibling: 8 Assign: /= of type int [line: 22]
                                                                                                                  >     . . . Child: 0 Id: gromit of type int [line: 22]
                                                                                                                  >     . . . Child: 1 Assign: *= of type int [line: 22]
                                                                                                                  >     . . . . Child: 0 Id: wrong of type int [line: 22]
                                                                                                                  >     . . . . Child: 1 Const 42 of type int [line: 22]
                                                                                                                  >     . . Sibling: 9 Assign: <- of type bool [line: 23]
                                                                                                                  >     . . . Child: 0 Id: close of type bool [line: 23]
                                                                                                                  >     . . . Child: 1 Op: and of type bool [line: 23]
                                                                                                                  >     . . . . Child: 0 Op: < of type bool [line: 23]
                                                                                                                  >     . . . . . Child: 0 Id: wrong of type int [line: 23]
                                                                                                                  >     . . . . . Child: 1 Id: trousers of type int [line: 23]
                                                                                                                  >     . . . . Child: 1 Op: <= of type bool [line: 23]
                                                                                                                  >     . . . . . Child: 0 Id: trousers of type int [line: 23]
                                                                                                                  >     . . . . . Child: 1 Id: gromit of type int [line: 23]
                                                                                                                  >     . . Sibling: 10 Assign: <- of type bool [line: 24]
                                                                                                                  >     . . . Child: 0 Id: shave of type bool [line: 24]
                                                                                                                  >     . . . Child: 1 Op: and of type bool [line: 24]
                                                                                                                  >     . . . . Child: 0 Op: > of type bool [line: 24]
                                                                                                                  >     . . . . . Child: 0 Id: wrong of type int [line: 24]
                                                                                                                  >     . . . . . Child: 1 Id: trousers of type int [line: 24]
                                                                                                                  >     . . . . Child: 1 Op: >= of type bool [line: 24]
                                                                                                                  >     . . . . . Child: 0 Id: trousers of type int [line: 24]
                                                                                                                  >     . . . . . Child: 1 Id: gromit of type int [line: 24]
                                                                                                                  >     . . Sibling: 11 Compound [line: 25]
                                                                                                                  >     . . . Child: 0 Var: a of type int [line: 26]
                                                                                                                  >     . . . Sibling: 1 Var: grand of type int [line: 26]
                                                                                                                  >     . . . . Child: 0 Op: / of type int [line: 26]
                                                                                                                  >     . . . . . Child: 0 Const 1 of type int [line: 26]
                                                                                                                  >     . . . . . Child: 1 Const 2 of type int [line: 26]
                                                                                                                  >     . . . Sibling: 2 Var: day of type int [line: 26]
                                                                                                                  >     . . . . Child: 0 Op: * of type int [line: 26]
                                                                                                                  >     . . . . . Child: 0 Const 3 of type int [line: 26]
                                                                                                                  >     . . . . . Child: 1 Const 4 of type int [line: 26]
                                                                                                                  >     . . . Sibling: 3 Var: out of type int [line: 26]
                                                                                                                  >     . . . . Child: 0 Op: chsign of type int [line: 26]
                                                                                                                  >     . . . . . Child: 0 Const 9 of type int [line: 26]
                                                                                                                  >     . . . Child: 1 Assign: <- of type int [line: 27]
                                                                                                                  >     . . . . Child: 0 Id: a of type int [line: 27]
                                                                                                                  >     . . . . Child: 1 Assign: += of type int [line: 27]
                                                                                                                  >     . . . . . Child: 0 Id: grand of type int [line: 27]
                                                                                                                  >     . . . . . Child: 1 Assign: -= of type int [line: 27]
                                                                                                                  >     . . . . . . Child: 0 Id: day of type int [line: 27]
                                                                                                                  >     . . . . . . Child: 1 Id: out of type int [line: 27]
                                                                                                                  >     . . Sibling: 12 Assign: <- of type bool [line: 29]
                                                                                                                  >     . . . Child: 0 Id: close of type bool [line: 29]
                                                                                                                  >     . . . Child: 1 Op: and of type bool [line: 29]
                                                                                                                  >     . . . . Child: 0 Op: < of type bool [line: 29]
                                                                                                                  >     . . . . . Child: 0 Op: + of type int [line: 29]
                                                                                                                  >     . . . . . . Child: 0 Op: * of type int [line: 29]
                                                                                                                  >     . . . . . . . Child: 0 Op: chsign of type int [line: 29]
                                                                                                                  >     . . . . . . . . Child: 0 Const 1 of type int [line: 29]
                                                                                                                  >     . . . . . . . Child: 1 Const 2 of type int [line: 29]
                                                                                                                  >     . . . . . . Child: 1 Const 3 of type int [line: 29]
                                                                                                                  >     . . . . . Child: 1 Op: * of type int [line: 29]
                                                                                                                  >     . . . . . . Child: 0 Const 4 of type int [line: 29]
                                                                                                                  >     . . . . . . Child: 1 Const 5 of type int [line: 29]
                                                                                                                  >     . . . . Child: 1 Op: > of type bool [line: 29]
                                                                                                                  >     . . . . . Child: 0 Op: + of type int [line: 29]
                                                                                                                  >     . . . . . . Child: 0 Const 6 of type int [line: 29]
                                                                                                                  >     . . . . . . Child: 1 Const 7 of type int [line: 29]
                                                                                                                  >     . . . . . Child: 1 Op: chsign of type int [line: 29]
                                                                                                                  >     . . . . . . Child: 0 Const 3 of type int [line: 29]
                                                                                                                  >     . . Sibling: 13 Assign: <- of type bool [line: 30]
                                                                                                                  >     . . . Child: 0 Id: shave of type bool [line: 30]
                                                                                                                  >     . . . Child: 1 Op: or of type bool [line: 30]
                                                                                                                  >     . . . . Child: 0 Const true of type bool [line: 30]
                                                                                                                  >     . . . . Child: 1 Op: and of type bool [line: 30]
                                                                                                                  >     . . . . . Child: 0 Op: < of type bool [line: 30]
                                                                                                                  >     . . . . . . Child: 0 Op: chsign of type int [line: 30]
                                                                                                                  >     . . . . . . . Child: 0 Op: * of type int [line: 30]
                                                                                                                  >     . . . . . . . . Child: 0 Const 1 of type int [line: 30]
                                                                                                                  >     . . . . . . . . Child: 1 Op: + of type int [line: 30]
                                                                                                                  >     . . . . . . . . . Child: 0 Const 2 of type int [line: 30]
                                                                                                                  >     . . . . . . . . . Child: 1 Const 3 of type int [line: 30]
                                                                                                                  >     . . . . . . Child: 1 Op: * of type int [line: 30]
                                                                                                                  >     . . . . . . . Child: 0 Const 4 of type int [line: 30]
                                                                                                                  >     . . . . . . . Child: 1 Const 5 of type int [line: 30]
                                                                                                                  >     . . . . . Child: 1 Op: > of type bool [line: 30]
                                                                                                                  >     . . . . . . Child: 0 Op: + of type int [line: 30]
                                                                                                                  >     . . . . . . . Child: 0 Const 6 of type int [line: 30]
                                                                                                                  >     . . . . . . . Child: 1 Const 7 of type int [line: 30]
                                                                                                                  >     . . . . . . Child: 1 Op: chsign of type int [line: 30]
                                                                                                                  >     . . . . . . . Child: 0 Const 3 of type int [line: 30]
                                                                                                                  >     . . Sibling: 14 If [line: 31]
                                                                                                                  >     . . . Child: 0 Op: != of type bool [line: 31]
                                                                                                                  >     . . . . Child: 0 Id: shave of type bool [line: 31]
                                                                                                                  >     . . . . Child: 1 Id: close of type bool [line: 31]
                                                                                                                  >     . . . Child: 1 Assign: <- of type bool [line: 31]
                                                                                                                  >     . . . . Child: 0 Id: shave of type bool [line: 31]
                                                                                                                  >     . . . . Child: 1 Op: not of type bool [line: 31]
                                                                                                                  >     . . . . . Child: 0 Id: close of type bool [line: 31]
                                                                                                                  >     . . Sibling: 15 If [line: 32]
                                                                                                                  >     . . . Child: 0 Op: not of type bool [line: 32]
                                                                                                                  >     . . . . Child: 0 Op: or of type bool [line: 32]
                                                                                                                  >     . . . . . Child: 0 Op: = of type bool [line: 32]
                                                                                                                  >     . . . . . . Child: 0 Id: shave of type bool [line: 32]
                                                                                                                  >     . . . . . . Child: 1 Id: close of type bool [line: 32]
                                                                                                                  >     . . . . . Child: 1 Op: not of type bool [line: 32]
                                                                                                                  >     . . . . . . Child: 0 Id: close of type bool [line: 32]
                                                                                                                  >     . . . Child: 1 Assign: <- of type bool [line: 32]
                                                                                                                  >     . . . . Child: 0 Id: shave of type bool [line: 32]
                                                                                                                  >     . . . . Child: 1 Const true of type bool [line: 32]
                                                                                                                  >     . . . Child: 2 Assign: <- of type bool [line: 33]
                                                                                                                  >     . . . . Child: 0 Id: close of type bool [line: 33]
                                                                                                                  >     . . . . Child: 1 Const false of type bool [line: 33]
                                                                                                                  >     . . Sibling: 16 Assign: <- of type int [line: 34]
                                                                                                                  >     . . . Child: 0 Id: mysteriousPenguin of type int [line: 34]
                                                                                                                  >     . . . Child: 1 Op: chsign of type int [line: 34]
                                                                                                                  >     . . . . Child: 0 Op: - of type int [line: 34]
                                                                                                                  >     . . . . . Child: 0 Op: chsign of type int [line: 34]
                                                                                                                  >     . . . . . . Child: 0 Op: chsign of type int [line: 34]
                                                                                                                  >     . . . . . . . Child: 0 Const 8 of type int [line: 34]
                                                                                                                  >     . . . . . Child: 1 Op: chsign of type int [line: 34]
                                                                                                                  >     . . . . . . Child: 0 Assign: -- of type int [line: 34]
                                                                                                                  >     . . . . . . . Child: 0 Id: cheese of type int [line: 34]
                                                                                                                  >     . . Sibling: 17 While [line: 36]
                                                                                                                  >     . . . Child: 0 Id: shave of type bool [line: 36]
                                                                                                                  >     . . . Child: 1 Compound [line: 36]
                                                                                                                  >     . . . . Child: 0 Var: were of type int [line: 37]
                                                                                                                  >     . . . . Sibling: 1 Var: rabbit of type int [line: 37]
                                                                                                                  >     . . . . Sibling: 2 Var: sheep is array of type int [line: 38]
                                                                                                                  >     . . . . Child: 1 Assign: <- of type int [line: 40]
                                                                                                                  >     . . . . . Child: 0 Op: [ of type int [line: 40]
                                                                                                                  >     . . . . . . Child: 0 Id: sheep of type int [line: 40]
                                                                                                                  >     . . . . . . Child: 1 Const 2 of type int [line: 40]
                                                                                                                  >     . . . . . Child: 1 Const 1618 of type int [line: 40]
                                                                                                                  >     . . . . Sibling: 1 If [line: 41]
                                                                                                                  >     . . . . . Child: 0 Op: < of type bool [line: 41]
                                                                                                                  >     . . . . . . Child: 0 Op: [ of type int [line: 41]
                                                                                                                  >     . . . . . . . Child: 0 Id: sheep of type int [line: 41]
                                                                                                                  >     . . . . . . . Child: 1 Const 2 of type int [line: 41]
                                                                                                                  >     . . . . . . Child: 1 Const 496 of type int [line: 41]
                                                                                                                  >     . . . . . Child: 1 Break [line: 41]
                                                                                                                  >     . . . . Sibling: 2 Call: wallace of type void [line: 42]
                                                                                                                  >     . . . . . Child: 0 Assign: -- of type int [line: 42]
                                                                                                                  >     . . . . . . Child: 0 Id: gromit of type int [line: 42]
                                                                                                                  >     . . . . . Sibling: 1 Op: - of type int [line: 42]
                                                                                                                  >     . . . . . . Child: 0 Id: were of type int [line: 42]
                                                                                                                  >     . . . . . . Child: 1 Id: rabbit of type int [line: 42]
                                                                                                                  >     . . . . Sibling: 3 Compound [line: 43]
                                                                                                                  >     . . . . . Child: 0 Var: the of type int [line: 44]
                                                                                                                  >     . . . . . Sibling: 1 Var: wrong of type int [line: 44]
                                                                                                                  >     . . . . . Sibling: 2 Var: trousers of type int [line: 44]
                                                                                                                  >     . . . . . Child: 1 Assign: <- of type int [line: 46]
                                                                                                                  >     . . . . . . Child: 0 Id: the of type int [line: 46]
                                                                                                                  >     . . . . . . Child: 1 Assign: += of type int [line: 46]
                                                                                                                  >     . . . . . . . Child: 0 Id: wrong of type int [line: 46]
                                                                                                                  >     . . . . . . . Child: 1 Assign: ++ of type int [line: 46]
                                                                                                                  >     . . . . . . . . Child: 0 Id: trousers of type int [line: 46]
                                                                                                                  >     . . . . . Sibling: 1 If [line: 47]
                                                                                                                  >     . . . . . . Child: 0 Op: = of type bool [line: 47]
                                                                                                                  >     . . . . . . . Child: 0 Id: were of type int [line: 47]
                                                                                                                  >     . . . . . . . Child: 1 Id: rabbit of type int [line: 47]
                                                                                                                  >     . . . . . . Child: 1 Assign: <- of type int [line: 47]
                                                                                                                  >     . . . . . . . Child: 0 Id: were of type int [line: 47]
                                                                                                                  >     . . . . . . . Child: 1 Assign: -- of type int [line: 47]
                                                                                                                  >     . . . . . . . . Child: 0 Id: wrong of type int [line: 47]
                                                                                                                  >     . . Sibling: 18 Return [line: 50]
                                                                                                                  >     Sibling: 3 Func: penguin returns type bool [line: 54]
                                                                                                                  >     . Child: 0 Parm: Feathers of type char [line: 54]
                                                                                                                  >     . Sibling: 1 Parm: McGraw is array of type char [line: 54]
                                                                                                                  >     . Sibling: 2 Parm: moon of type bool [line: 54]
                                                                                                                  >     . Sibling: 3 Parm: cheese of type bool [line: 54]
                                                                                                                  >     . Sibling: 4 Parm: launch of type int [line: 54]
                                                                                                                  >     . Child: 1 Compound [line: 55]
                                                                                                                  >     . . Child: 0 Var: tottington of type char [line: 56]
                                                                                                                  >     . . . Child: 0 Const 'x' of type char [line: 56]
                                                                                                                  >     . . Sibling: 1 Var: Wensleydale is array of type char [line: 57]
                                                                                                                  >     . . Sibling: 2 Var: c of type char [line: 58]
                                                                                                                  >     . . Sibling: 3 Var: i of type int [line: 59]
                                                                                                                  >     . . Child: 1 Assign: <- of type char [line: 61]
                                                                                                                  >     . . . Child: 0 Id: tottington of type char [line: 61]
                                                                                                                  >     . . . Child: 1 Id: Feathers of type char [line: 61]
                                                                                                                  >     . . Sibling: 1 Assign: <- of type bool [line: 62]
                                                                                                                  >     . . . Child: 0 Id: moon of type bool [line: 62]
                                                                                                                  >     . . . Child: 1 Op: and of type bool [line: 62]
                                                                                                                  >     . . . . Child: 0 Op: <= of type bool [line: 62]
                                                                                                                  >     . . . . . Child: 0 Id: McGraw of type char [line: 62]
                                                                                                                  >     . . . . . Child: 1 Id: Wensleydale of type char [line: 62]
                                                                                                                  >     . . . . Child: 1 Id: moon of type bool [line: 62]
                                                                                                                  >     . . Sibling: 2 Assign: <- of type char [line: 63]
                                                                                                                  >     . . . Child: 0 Id: Wensleydale of type char [line: 63]
                                                                                                                  >     . . . Child: 1 Id: McGraw of type char [line: 63]
                                                                                                                  >     . . Sibling: 3 Assign: <- of type char [line: 64]
                                                                                                                  >     . . . Child: 0 Op: [ of type char [line: 64]
                                                                                                                  >     . . . . Child: 0 Id: Wensleydale of type char [line: 64]
                                                                                                                  >     . . . . Child: 1 Op: sizeof of type int [line: 64]
                                                                                                                  >     . . . . . Child: 0 Id: McGraw of type char [line: 64]
                                                                                                                  >     . . . Child: 1 Const 'Q' of type char [line: 64]
                                                                                                                  >     . . Sibling: 4 Assign: <- of type char [line: 65]
                                                                                                                  >     . . . Child: 0 Op: [ of type char [line: 65]
                                                                                                                  >     . . . . Child: 0 Id: McGraw of type char [line: 65]
                                                                                                                  >     . . . . Child: 1 Const 3 of type int [line: 65]
                                                                                                                  >     . . . Child: 1 Const 'A' of type char [line: 65]
                                                                                                                  >     Sibling: 4 Func: Wendolene returns type int [line: 68]
                                                                                                                  >     . Child: 0 Parm: wool of type int [line: 68]
                                                                                                                  >     . Sibling: 1 Parm: shaun of type bool [line: 68]
                                                                                                                  >     . Sibling: 2 Parm: yarn is array of type int [line: 68]
                                                                                                                  >     . Sibling: 3 Parm: preston is array of type bool [line: 68]
                                                                                                                  >     . Child: 1 Compound [line: 69]
                                                                                                                  >     . . Child: 0 Var: skein of type int [line: 70]
                                                                                                                  >     . . Child: 1 Assign: <- of type bool [line: 71]
                                                                                                                  >     . . . Child: 0 Op: [ of type bool [line: 71]
                                                                                                                  >     . . . . Child: 0 Id: preston of type bool [line: 71]
                                                                                                                  >     . . . . Child: 1 Const 3 of type int [line: 71]
                                                                                                                  >     . . . Child: 1 Op: or of type bool [line: 71]
                                                                                                                  >     . . . . Child: 0 Op: > of type bool [line: 71]
                                                                                                                  >     . . . . . Child: 0 Op: [ of type int [line: 71]
                                                                                                                  >     . . . . . . Child: 0 Id: yarn of type int [line: 71]
                                                                                                                  >     . . . . . . Child: 1 Const 1 of type int [line: 71]
                                                                                                                  >     . . . . . Child: 1 Id: wool of type int [line: 71]
                                                                                                                  >     . . . . Child: 1 Op: not of type bool [line: 71]
                                                                                                                  >     . . . . . Child: 0 Id: shaun of type bool [line: 71]
                                                                                                                  >     . . Sibling: 1 Return [line: 72]
                                                                                                                  >     . . . Child: 0 Op: + of type int [line: 72]
                                                                                                                  >     . . . . Child: 0 Op: + of type int [line: 72]
                                                                                                                  >     . . . . . Child: 0 Op: + of type int [line: 72]
                                                                                                                  >     . . . . . . Child: 0 Op: + of type int [line: 72]
                                                                                                                  >     . . . . . . . Child: 0 Id: wool of type int [line: 72]
                                                                                                                  >     . . . . . . . Child: 1 Op: [ of type int [line: 72]
                                                                                                                  >     . . . . . . . . Child: 0 Id: yarn of type int [line: 72]
                                                                                                                  >     . . . . . . . . Child: 1 Const 0 of type int [line: 72]
                                                                                                                  >     . . . . . . Child: 1 Op: sizeof of type int [line: 72]
                                                                                                                  >     . . . . . . . Child: 0 Id: yarn of type int [line: 72]
                                                                                                                  >     . . . . . Child: 1 Op: [ of type int [line: 72]
                                                                                                                  >     . . . . . . Child: 0 Id: yarn of type int [line: 72]
                                                                                                                  >     . . . . . . Child: 1 Op: * of type int [line: 72]
                                                                                                                  >     . . . . . . . Child: 0 Const 7 of type int [line: 72]
                                                                                                                  >     . . . . . . . Child: 1 Id: wool of type int [line: 72]
                                                                                                                  >     . . . . Child: 1 Op: [ of type int [line: 72]
                                                                                                                  >     . . . . . Child: 0 Id: yarn of type int [line: 72]
                                                                                                                  >     . . . . . Child: 1 Op: - of type int [line: 72]
                                                                                                                  >     . . . . . . Child: 0 Op: [ of type int [line: 72]
                                                                                                                  >     . . . . . . . Child: 0 Id: yarn of type int [line: 72]
                                                                                                                  >     . . . . . . . Child: 1 Op: + of type int [line: 72]
                                                                                                                  >     . . . . . . . . Child: 0 Const 3 of type int [line: 72]
                                                                                                                  >     . . . . . . . . Child: 1 Op: * of type int [line: 72]
                                                                                                                  >     . . . . . . . . . Child: 0 Id: wool of type int [line: 72]
                                                                                                                  >     . . . . . . . . . Child: 1 Const 2 of type int [line: 72]
                                                                                                                  >     . . . . . . Child: 1 Const 4 of type int [line: 72]
                                                                                                                  >     Sibling: 5 Func: ramsBottom returns type bool [line: 76]
                                                                                                                  >     . Child: 1 Compound [line: 77]
                                                                                                                  >     . . Child: 0 Var: chicken is array of type int [line: 78]
                                                                                                                  >     . . Sibling: 1 Var: run is array of type bool [line: 79]
                                                                                                                  >     . . Sibling: 2 Var: wallace is array of type int [line: 80]
                                                                                                                  >     . . Sibling: 3 Var: gromit is array of type int [line: 80]
                                                                                                                  >     . . Child: 1 Op: * of type int [line: 82]
                                                                                                                  >     . . . Child: 0 Const 42 of type int [line: 82]
                                                                                                                  >     . . . Child: 1 Call: Wendolene of type int [line: 82]
                                                                                                                  >     . . . . Child: 0 Op: + of type int [line: 82]
                                                                                                                  >     . . . . . Child: 0 Op: + of type int [line: 82]
                                                                                                                  >     . . . . . . Child: 0 Const 1 of type int [line: 82]
                                                                                                                  >     . . . . . . Child: 1 Const 2 of type int [line: 82]
                                                                                                                  >     . . . . . Child: 1 Const 3 of type int [line: 82]
                                                                                                                  >     . . . . Sibling: 1 Op: or of type bool [line: 82]
                                                                                                                  >     . . . . . Child: 0 Op: not of type bool [line: 82]
                                                                                                                  >     . . . . . . Child: 0 Const true of type bool [line: 82]
                                                                                                                  >     . . . . . Child: 1 Op: and of type bool [line: 82]
                                                                                                                  >     . . . . . . Child: 0 Const true of type bool [line: 82]
                                                                                                                  >     . . . . . . Child: 1 Const false of type bool [line: 82]
                                                                                                                  >     . . . . Sibling: 2 Id: chicken of type int [line: 82]
                                                                                                                  >     . . . . Sibling: 3 Id: run of type bool [line: 82]
                                                                                                                  >     . . Sibling: 1 Op: [ of type bool [line: 83]
                                                                                                                  >     . . . Child: 0 Id: run of type bool [line: 83]
                                                                                                                  >     . . . Child: 1 Op: - of type int [line: 83]
                                                                                                                  >     . . . . Child: 0 Op: sizeof of type int [line: 83]
                                                                                                                  >     . . . . . Child: 0 Id: run of type bool [line: 83]
                                                                                                                  >     . . . . Child: 1 Const 1 of type int [line: 83]
                                                                                                                  >     . . Sibling: 2 Return [line: 85]
                                                                                                                  >     . . . Child: 0 Op: not of type bool [line: 85]
                                                                                                                  >     . . . . Child: 0 Op: >= of type bool [line: 85]
                                                                                                                  >     . . . . . Child: 0 Op: [ of type int [line: 85]
                                                                                                                  >     . . . . . . Child: 0 Id: wallace of type int [line: 85]
                                                                                                                  >     . . . . . . Child: 1 Const 1 of type int [line: 85]
                                                                                                                  >     . . . . . Child: 1 Op: * of type int [line: 85]
                                                                                                                  >     . . . . . . Child: 0 Op: chsign of type int [line: 85]
                                                                                                                  >     . . . . . . . Child: 0 Op: [ of type int [line: 85]
                                                                                                                  >     . . . . . . . . Child: 0 Id: gromit of type int [line: 85]
                                                                                                                  >     . . . . . . . . Child: 1 Const 2 of type int [line: 85]
                                                                                                                  >     . . . . . . Child: 1 Const 3 of type int [line: 85]
                                                                                                                  >     Sibling: 6 Func: cheese returns type int [line: 88]
                                                                                                                  >     . Child: 0 Parm: x of type int [line: 88]
                                                                                                                  >     . Sibling: 1 Parm: y of type int [line: 88]
                                                                                                                  >     . Child: 1 Compound [line: 88]
                                                                                                                  >     . . Child: 1 While [line: 88]
                                                                                                                  >     . . . Child: 0 Op: > of type bool [line: 88]
                                                                                                                  >     . . . . Child: 0 Id: x of type int [line: 88]
                                                                                                                  >     . . . . Child: 1 Const 0 of type int [line: 88]
                                                                                                                  >     . . . Child: 1 If [line: 88]
                                                                                                                  >     . . . . Child: 0 Op: > of type bool [line: 88]
                                                                                                                  >     . . . . . Child: 0 Id: y of type int [line: 88]
                                                                                                                  >     . . . . . Child: 1 Const 3 of type int [line: 88]
                                                                                                                  >     . . . . Child: 1 Assign: -- of type int [line: 88]
                                                                                                                  >     . . . . . Child: 0 Id: x of type int [line: 88]
                                                                                                                  >     . . . . Child: 2 Return [line: 88]
                                                                                                                  >     . . . . . Child: 0 Op: % of type int [line: 88]
                                                                                                                  >     . . . . . . Child: 0 Op: * of type int [line: 88]
                                                                                                                  >     . . . . . . . Child: 0 Id: x of type int [line: 88]
                                                                                                                  >     . . . . . . . Child: 1 Id: x of type int [line: 88]
                                                                                                                  >     . . . . . . Child: 1 Id: y of type int [line: 88]
                                                                                                                  >     Sibling: 7 Func: Wensleydale returns type int [line: 90]
                                                                                                                  >     . Child: 0 Parm: x of type int [line: 90]
                                                                                                                  >     . Sibling: 1 Parm: y of type int [line: 90]
                                                                                                                  >     . Child: 1 Compound [line: 90]
                                                                                                                  >     . . Child: 1 Return [line: 90]
                                                                                                                  >     . . . Child: 0 Call: cheese of type int [line: 90]
                                                                                                                  >     . . . . Child: 0 Id: x of type int [line: 90]
                                                                                                                  >     . . . . Sibling: 1 Id: gromit of type int [line: 90]
                                                                                                                  >     Sibling: 8 Func: LadyCampanula returns type int [line: 92]
                                                                                                                  >     . Child: 0 Parm: c of type char [line: 92]
                                                                                                                  >     . Sibling: 1 Parm: s is array of type char [line: 92]
                                                                                                                  >     . Child: 1 Compound [line: 92]
                                                                                                                  >     . . Child: 1 While [line: 92]
                                                                                                                  >     . . . Child: 0 Const true of type bool [line: 92]
                                                                                                                  >     . . . Child: 1 For [line: 92]
                                                                                                                  >     . . . . Child: 0 Var: i of type int [line: 92]
                                                                                                                  >     . . . . Child: 1 Range [line: 92]
                                                                                                                  >     . . . . . Child: 0 Op: - of undefined type [line: 92]
                                                                                                                  >     . . . . . . Child: 0 Op: sizeof of undefined type [line: 92]
                                                                                                                  >     . . . . . . . Child: 0 Id: s of undefined type [line: 92]
                                                                                                                  >     . . . . . . Child: 1 Const 1 of type int [line: 92]
                                                                                                                  >     . . . . . Child: 1 Const 0 of type int [line: 92]
                                                                                                                  >     . . . . . Child: 2 Op: chsign of undefined type [line: 92]
                                                                                                                  >     . . . . . . Child: 0 Const 1 of type int [line: 92]
                                                                                                                  >     . . . . Child: 2 If [line: 92]
                                                                                                                  >     . . . . . Child: 0 Op: = of type bool [line: 92]
                                                                                                                  >     . . . . . . Child: 0 Op: [ of type char [line: 92]
                                                                                                                  >     . . . . . . . Child: 0 Id: s of type char [line: 92]
                                                                                                                  >     . . . . . . . Child: 1 Id: i of type int [line: 92]
                                                                                                                  >     . . . . . . Child: 1 Id: c of type char [line: 92]
                                                                                                                  >     . . . . . Child: 1 Return [line: 92]
                                                                                                                  >     . . . . . . Child: 0 Id: i of type int [line: 92]
                                                                                                                  >     Sibling: 9 Func: MrsTweedy returns type char [line: 95]
                                                                                                                  >     . Child: 0 Parm: c of type char [line: 95]
                                                                                                                  >     . Sibling: 1 Parm: s is array of type char [line: 95]
                                                                                                                  >     . Child: 1 Compound [line: 96]
                                                                                                                  >     . . Child: 1 For [line: 97]
                                                                                                                  >     . . . Child: 0 Var: ginger of type int [line: 97]
                                                                                                                  >     . . . Child: 1 Range [line: 97]
                                                                                                                  >     . . . . Child: 0 Const 0 of type int [line: 97]
                                                                                                                  >     . . . . Child: 1 Const 10 of type int [line: 97]
                                                                                                                  >     . . . Child: 2 Assign: <- of type char [line: 97]
                                                                                                                  >     . . . . Child: 0 Op: [ of type char [line: 97]
                                                                                                                  >     . . . . . Child: 0 Id: s of type char [line: 97]
                                                                                                                  >     . . . . . Child: 1 Id: ginger of type int [line: 97]
                                                                                                                  >     . . . . Child: 1 Id: c of type char [line: 97]
                                                                                                                  >     . . Sibling: 1 For [line: 98]
                                                                                                                  >     . . . Child: 0 Var: pastry of type int [line: 98]
                                                                                                                  >     . . . Child: 1 Range [line: 98]
                                                                                                                  >     . . . . Child: 0 Const 0 of type int [line: 98]
                                                                                                                  >     . . . . Child: 1 Const 2 of type int [line: 98]
                                                                                                                  >     . . . . Child: 2 Const 7 of type int [line: 98]
                                                                                                                  >     . . . Child: 2 If [line: 98]
                                                                                                                  >     . . . . Child: 0 Op: = of type bool [line: 98]
                                                                                                                  >     . . . . . Child: 0 Op: [ of type char [line: 98]
                                                                                                                  >     . . . . . . Child: 0 Id: s of type char [line: 98]
                                                                                                                  >     . . . . . . Child: 1 Const 0 of type int [line: 98]
                                                                                                                  >     . . . . . Child: 1 Op: [ of type char [line: 98]
                                                                                                                  >     . . . . . . Child: 0 Id: s of type char [line: 98]
                                                                                                                  >     . . . . . . Child: 1 Const 1 of type int [line: 98]
                                                                                                                  >     . . . . Child: 1 Break [line: 98]
                                                                                                                  >     . . Sibling: 2 While [line: 99]
                                                                                                                  >     . . . Child: 0 Const true of type bool [line: 99]
                                                                                                                  >     . . . Child: 1 Break [line: 99]
                                                                                                                  >     . . Sibling: 3 Return [line: 101]
                                                                                                                  >     . . . Child: 0 Const 'x' of type char [line: 101]
                                                                                                                  >     Sibling: 10 Func: TheWereRabbit returns type char [line: 104]
                                                                                                                  >     . Child: 0 Parm: x of type int [line: 104]
                                                                                                                  >     . Child: 1 Compound [line: 105]
                                                                                                                  >     . . Child: 1 If [line: 106]
                                                                                                                  >     . . . Child: 0 Op: = of type bool [line: 106]
                                                                                                                  >     . . . . Child: 0 Id: x of type int [line: 106]
                                                                                                                  >     . . . . Child: 1 Const 0 of type int [line: 106]
                                                                                                                  >     . . . Child: 1 Return [line: 106]
                                                                                                                  >     . . . . Child: 0 Const '@' of type char [line: 106]
                                                                                                                  >     . . . Child: 2 If [line: 107]
                                                                                                                  >     . . . . Child: 0 Op: = of type bool [line: 107]
                                                                                                                  >     . . . . . Child: 0 Id: x of type int [line: 107]
                                                                                                                  >     . . . . . Child: 1 Const 1 of type int [line: 107]
                                                                                                                  >     . . . . Child: 1 Return [line: 107]
                                                                                                                  >     . . . . . Child: 0 Const 'a' of type char [line: 107]
                                                                                                                  >     . . . . Child: 2 If [line: 108]
                                                                                                                  >     . . . . . Child: 0 Op: = of type bool [line: 108]
                                                                                                                  >     . . . . . . Child: 0 Id: x of type int [line: 108]
                                                                                                                  >     . . . . . . Child: 1 Const 2 of type int [line: 108]
                                                                                                                  >     . . . . . Child: 1 Return [line: 108]
                                                                                                                  >     . . . . . . Child: 0 Const 'b' of type char [line: 108]
                                                                                                                  >     . . . . . Child: 2 If [line: 109]
                                                                                                                  >     . . . . . . Child: 0 Op: = of type bool [line: 109]
                                                                                                                  >     . . . . . . . Child: 0 Id: x of type int [line: 109]
                                                                                                                  >     . . . . . . . Child: 1 Const 3 of type int [line: 109]
                                                                                                                  >     . . . . . . Child: 1 Return [line: 109]
                                                                                                                  >     . . . . . . . Child: 0 Const 'c' of type char [line: 109]
                                                                                                                  >     . . . . . . Child: 2 If [line: 110]
                                                                                                                  >     . . . . . . . Child: 0 Op: = of type bool [line: 110]
                                                                                                                  >     . . . . . . . . Child: 0 Id: x of type int [line: 110]
                                                                                                                  >     . . . . . . . . Child: 1 Const 4 of type int [line: 110]
                                                                                                                  >     . . . . . . . Child: 1 Return [line: 110]
                                                                                                                  >     . . . . . . . . Child: 0 Const 'd' of type char [line: 110]
                                                                                                                  >     . . . . . . . Child: 2 Return [line: 111]
                                                                                                                  >     . . . . . . . . Child: 0 Const ' ' of type char [line: 111]
                                                                                                                  >     Sibling: 11 Func: main returns type int [line: 114]
                                                                                                                  >     . Child: 1 Compound [line: 115]
                                                                                                                  >     . . Child: 0 Var: wool of type int [line: 116]
                                                                                                                  >     . . Sibling: 1 Var: yarn is array of type int [line: 116]
                                                                                                                  >     . . Sibling: 2 Var: shaun of type bool [line: 117]
                                                                                                                  >     . . Sibling: 3 Var: preston is array of type bool [line: 117]
                                                                                                                  >     . . Sibling: 4 Var: rocky is array of type char [line: 118]
                                                                                                                  >     . . Child: 1 Call: wallace of type void [line: 120]
                                                                                                                  >     . . . Child: 0 Call: cheese of type int [line: 120]
                                                                                                                  >     . . . . Child: 0 Const 62 of type int [line: 120]
                                                                                                                  >     . . . . Sibling: 1 Op: chsign of type int [line: 120]
                                                                                                                  >     . . . . . Child: 0 Const 311 of type int [line: 120]
                                                                                                                  >     . . . Sibling: 1 Id: gromit of type int [line: 120]
                                                                                                                  >     . . Sibling: 1 Assign: <- of type char [line: 121]
                                                                                                                  >     . . . Child: 0 Id: rocky of type char [line: 121]
                                                                                                                  >     . . . Child: 1 Const is array "molybdenum" of type char [line: 121]
                                                                                                                  >     . . Sibling: 2 Call: MrsTweedy of type char [line: 123]
                                                                                                                  >     . . . Child: 0 Const 'Z' of type char [line: 123]
                                                                                                                  >     . . . Sibling: 1 Id: rocky of type char [line: 123]
                                                                                                                  >     . . Sibling: 3 Op: + of type int [line: 125]
                                                                                                                  >     . . . Child: 0 Op: [ of type int [line: 125]
                                                                                                                  >     . . . . Child: 0 Id: yarn of type int [line: 125]
                                                                                                                  >     . . . . Child: 1 Op: ? of type int [line: 125]
                                                                                                                  >     . . . . . Child: 0 Const 100 of type int [line: 125]
                                                                                                                  >     . . . Child: 1 Op: [ of type int [line: 125]
                                                                                                                  >     . . . . Child: 0 Id: yarn of type int [line: 125]
                                                                                                                  >     . . . . Child: 1 Op: ? of type int [line: 125]
                                                                                                                  >     . . . . . Child: 0 Op: sizeof of type int [line: 125]
                                                                                                                  >     . . . . . . Child: 0 Id: yarn of type int [line: 125]
                                                                                                                  >     . . Sibling: 4 Return [line: 127]
                                                                                                                  >     . . . Child: 0 Call: Wendolene of type int [line: 127]
                                                                                                                  >     . . . . Child: 0 Op: * of type int [line: 127]
                                                                                                                  >     . . . . . Child: 0 Op: sizeof of type int [line: 127]
                                                                                                                  >     . . . . . . Child: 0 Id: preston of type bool [line: 127]
                                                                                                                  >     . . . . . Child: 1 Op: sizeof of type int [line: 127]
                                                                                                                  >     . . . . . . Child: 0 Id: yarn of type int [line: 127]
                                                                                                                  >     . . . . Sibling: 1 Id: shaun of type bool [line: 127]
                                                                                                                  >     . . . . Sibling: 2 Id: yarn of type int [line: 127]
                                                                                                                  >     . . . . Sibling: 3 Id: preston of type bool [line: 127]
                                                                                                                  >     Sibling: 12 Var: aBigLongVariableName6andthx1138 of type bool [line: 130]
                                                                                                                  >     Sibling: 13 Var: odd of type int [line: 131]
                                                                                                                  >     Sibling: 14 Var: separation of type int [line: 131]
                                                                                                                  >     Sibling: 15 Var: of of type int [line: 131]
                                                                                                                  >     Sibling: 16 Var: stuff of type int [line: 132]
                                                                                                                  >     Sibling: 17 Var: ant is array of type char [line: 134]
                                                                                                                  >     . Child: 0 Const is array "unwrinkled" of type char [line: 134]
                                                                                                                  >     Sibling: 18 Var: bat of type char [line: 135]
                                                                                                                  >     . Child: 0 Const ''' of type char [line: 135]
                                                                                                                  >     Sibling: 19 Var: cat of type char [line: 136]
                                                                                                                  >     . Child: 0 Const 't' of type char [line: 136]
                                                                                                                  >     Sibling: 20 Var: dog of type char [line: 137]
                                                                                                                  >     . Child: 0 Const '
                                                                                                                  >     ' of type char [line: 137]
                                                                                                                  >     Sibling: 21 Var: hog of type char [line: 138]
                                                                                                                  >     . Child: 0 Const ' ' of type char [line: 138]
                                                                                                                  >     Number of warnings: 17
Number of errors: 0                                                                                                     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P exp.c-                                                                                                          ./c- -P exp.c-
ERROR(8) : Symbol 'output' is not declared.                                                                       |     ERROR(8): Symbol 'output' is not declared.
ERROR(9) : Symbol 'output' is not declared.                                                                       |     ERROR(9): Symbol 'output' is not declared.
ERROR(10) : Symbol 'output' is not declared.                                                                      |     ERROR(10): Symbol 'output' is not declared.
ERROR(11) : Symbol 'outnl' is not declared.                                                                       |     ERROR(11): Symbol 'outnl' is not declared.
ERROR(12) : Symbol 'output' is not declared.                                                                      |     ERROR(12): Symbol 'output' is not declared.
ERROR(13) : Symbol 'output' is not declared.                                                                      |     ERROR(13): Symbol 'output' is not declared.
ERROR(14) : Symbol 'outnl' is not declared.                                                                       |     ERROR(14): Symbol 'outnl' is not declared.
ERROR(15) : Symbol 'output' is not declared.                                                                      |     ERROR(15): Symbol 'output' is not declared.
ERROR(16) : Symbol 'output' is not declared.                                                                      |     ERROR(16): Symbol 'output' is not declared.
ERROR(17) : Symbol 'outnl' is not declared.                                                                       |     ERROR(17): Symbol 'outnl' is not declared.
ERROR(18) : Symbol 'output' is not declared.                                                                      |     ERROR(18): Symbol 'output' is not declared.
ERROR(19) : Symbol 'output' is not declared.                                                                      |     ERROR(19): Symbol 'output' is not declared.
ERROR(20) : Symbol 'output' is not declared.                                                                      |     ERROR(20): Symbol 'output' is not declared.
ERROR(21) : Symbol 'outnl' is not declared.                                                                       |     ERROR(21): Symbol 'outnl' is not declared.
ERROR(22) : Symbol 'outputb' is not declared.                                                                     |     ERROR(22): Symbol 'outputb' is not declared.
ERROR(23) : Symbol 'outputb' is not declared.                                                                     |     ERROR(23): Symbol 'outputb' is not declared.
ERROR(24) : Symbol 'outnl' is not declared.                                                                       |     ERROR(24): Symbol 'outnl' is not declared.
ERROR(25) : Symbol 'outputb' is not declared.                                                                     |     ERROR(25): Symbol 'outputb' is not declared.
ERROR(26) : Symbol 'outputb' is not declared.                                                                     |     ERROR(26): Symbol 'outputb' is not declared.
ERROR(27) : Symbol 'outnl' is not declared.                                                                       |     ERROR(27): Symbol 'outnl' is not declared.
ERROR(28) : Symbol 'outputb' is not declared.                                                                     |     ERROR(28): Symbol 'outputb' is not declared.
ERROR(29) : Symbol 'outputb' is not declared.                                                                     |     ERROR(29): Symbol 'outputb' is not declared.
ERROR(30) : Symbol 'outnl' is not declared.                                                                       |     ERROR(30): Symbol 'outnl' is not declared.
ERROR(31) : Symbol 'outputb' is not declared.                                                                     |     ERROR(31): Symbol 'outputb' is not declared.
ERROR(32) : Symbol 'outnl' is not declared.                                                                       |     ERROR(32): Symbol 'outnl' is not declared.
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
ident:                                                                                                            <
Scope: ident -----------------                                                                                    <
main:                                                                                                             <
x:                                                                                                                <
Scope: main -----------------                                                                                     <
x:                                                                                                                <
=========== ============ ===========                                                                              <
ID: x ParentID: return                                                                                            <
yes, we found ID: x                                                                                               <
ID: x ParentID: return                                                                                            <
yes, we found ID: x                                                                                               <
ID: x ParentID: return                                                                                            <
yes, we found ID: x                                                                                               <
Func: ident returns type int [line: 2]                                                                            <
. Child: 0 Parm: x of type int [line: 2]                                                                          <
. Child: 1 Compound [line: 2]                                                                                     <
. . Child: 1 Return [line: 2]                                                                                     <
. . . Child: 0 Id: x of type int [line: 2]                                                                        <
Sibling: 1 Func: main returns type void [line: 4]                                                                 <
. Child: 1 Compound [line: 5]                                                                                     <
. . Child: 0 Var: x of type bool [line: 6]                                                                        <
. . Child: 1 Call: output of type (null) [line: 8]                                                                <
. . . Child: 0 Call: ident of type (null) [line: 8]                                                               <
. . . . Child: 0 Const 111 of type int [line: 8]                                                                  <
. . Sibling: 1 Call: output of type (null) [line: 9]                                                              <
. . . Child: 0 Op: * of type (null) [line: 9]                                                                     <
. . . . Child: 0 Call: ident of type (null) [line: 9]                                                             <
. . . . . Child: 0 Const 111 of type int [line: 9]                                                                <
. . . . Child: 1 Const 222 of type int [line: 9]                                                                  <
. . Sibling: 2 Call: output of type (null) [line: 10]                                                             <
. . . Child: 0 Op: * of type (null) [line: 10]                                                                    <
. . . . Child: 0 Const 222 of type int [line: 10]                                                                 <
. . . . Child: 1 Call: ident of type (null) [line: 10]                                                            <
. . . . . Child: 0 Const 111 of type int [line: 10]                                                               <
. . Sibling: 3 Call: outnl of type (null) [line: 11]                                                              <
. . Sibling: 4 Call: output of type (null) [line: 12]                                                             <
. . . Child: 0 Op: + of type (null) [line: 12]                                                                    <
. . . . Child: 0 Op: * of type (null) [line: 12]                                                                  <
. . . . . Child: 0 Call: ident of type (null) [line: 12]                                                          <
. . . . . . Child: 0 Const 111 of type int [line: 12]                                                             <
. . . . . Child: 1 Const 222 of type int [line: 12]                                                               <
. . . . Child: 1 Const 333 of type int [line: 12]                                                                 <
. . Sibling: 5 Call: output of type (null) [line: 13]                                                             <
. . . Child: 0 Op: * of type (null) [line: 13]                                                                    <
. . . . Child: 0 Op: + of type (null) [line: 13]                                                                  <
. . . . . Child: 0 Call: ident of type (null) [line: 13]                                                          <
. . . . . . Child: 0 Const 111 of type int [line: 13]                                                             <
. . . . . Child: 1 Const 222 of type int [line: 13]                                                               <
. . . . Child: 1 Const 333 of type int [line: 13]                                                                 <
. . Sibling: 6 Call: outnl of type (null) [line: 14]                                                              <
. . Sibling: 7 Call: output of type (null) [line: 15]                                                             <
. . . Child: 0 Op: chsign of type (null) [line: 15]                                                               <
. . . . Child: 0 Op: + of type (null) [line: 15]                                                                  <
. . . . . Child: 0 Call: ident of type (null) [line: 15]                                                          <
. . . . . . Child: 0 Const 111 of type int [line: 15]                                                             <
. . . . . Child: 1 Const 222 of type int [line: 15]                                                               <
. . Sibling: 8 Call: output of type (null) [line: 16]                                                             <
. . . Child: 0 Op: chsign of type (null) [line: 16]                                                               <
. . . . Child: 0 Op: chsign of type (null) [line: 16]                                                             <
. . . . . Child: 0 Op: + of type (null) [line: 16]                                                                <
. . . . . . Child: 0 Call: ident of type (null) [line: 16]                                                        <
. . . . . . . Child: 0 Const 111 of type int [line: 16]                                                           <
. . . . . . Child: 1 Const 222 of type int [line: 16]                                                             <
. . Sibling: 9 Call: outnl of type (null) [line: 17]                                                              <
. . Sibling: 10 Call: output of type (null) [line: 18]                                                            <
. . . Child: 0 Op: * of type (null) [line: 18]                                                                    <
. . . . Child: 0 Op: chsign of type (null) [line: 18]                                                             <
. . . . . Child: 0 Op: chsign of type (null) [line: 18]                                                           <
. . . . . . Child: 0 Op: + of type (null) [line: 18]                                                              <
. . . . . . . Child: 0 Call: ident of type (null) [line: 18]                                                      <
. . . . . . . . Child: 0 Const 111 of type int [line: 18]                                                         <
. . . . . . . Child: 1 Const 222 of type int [line: 18]                                                           <
. . . . Child: 1 Const 333 of type int [line: 18]                                                                 <
. . Sibling: 11 Call: output of type (null) [line: 19]                                                            <
. . . Child: 0 Op: / of type (null) [line: 19]                                                                    <
. . . . Child: 0 Op: * of type (null) [line: 19]                                                                  <
. . . . . Child: 0 Op: chsign of type (null) [line: 19]                                                           <
. . . . . . Child: 0 Op: chsign of type (null) [line: 19]                                                         <
. . . . . . . Child: 0 Op: + of type (null) [line: 19]                                                            <
. . . . . . . . Child: 0 Call: ident of type (null) [line: 19]                                                    <
. . . . . . . . . Child: 0 Const 111 of type int [line: 19]                                                       <
. . . . . . . . Child: 1 Const 222 of type int [line: 19]                                                         <
. . . . . Child: 1 Const 333 of type int [line: 19]                                                               <
. . . . Child: 1 Const 444 of type int [line: 19]                                                                 <
. . Sibling: 12 Call: output of type (null) [line: 20]                                                            <
. . . Child: 0 Op: % of type (null) [line: 20]                                                                    <
. . . . Child: 0 Op: / of type (null) [line: 20]                                                                  <
. . . . . Child: 0 Op: * of type (null) [line: 20]                                                                <
. . . . . . Child: 0 Op: chsign of type (null) [line: 20]                                                         <
. . . . . . . Child: 0 Op: chsign of type (null) [line: 20]                                                       <
. . . . . . . . Child: 0 Op: + of type (null) [line: 20]                                                          <
. . . . . . . . . Child: 0 Call: ident of type (null) [line: 20]                                                  <
. . . . . . . . . . Child: 0 Const 111 of type int [line: 20]                                                     <
. . . . . . . . . Child: 1 Const 222 of type int [line: 20]                                                       <
. . . . . . Child: 1 Const 333 of type int [line: 20]                                                             <
. . . . . Child: 1 Const 444 of type int [line: 20]                                                               <
. . . . Child: 1 Const 42 of type int [line: 20]                                                                  <
. . Sibling: 13 Call: outnl of type (null) [line: 21]                                                             <
. . Sibling: 14 Call: outputb of type (null) [line: 22]                                                           <
. . . Child: 0 Op: <= of type (null) [line: 22]                                                                   <
. . . . Child: 0 Op: + of type (null) [line: 22]                                                                  <
. . . . . Child: 0 Op: % of type (null) [line: 22]                                                                <
. . . . . . Child: 0 Op: / of type (null) [line: 22]                                                              <
. . . . . . . Child: 0 Op: * of type (null) [line: 22]                                                            <
. . . . . . . . Child: 0 Op: chsign of type (null) [line: 22]                                                     <
. . . . . . . . . Child: 0 Op: chsign of type (null) [line: 22]                                                   <
. . . . . . . . . . Child: 0 Op: + of type (null) [line: 22]                                                      <
. . . . . . . . . . . Child: 0 Call: ident of type (null) [line: 22]                                              <
. . . . . . . . . . . . Child: 0 Const 111 of type int [line: 22]                                                 <
. . . . . . . . . . . Child: 1 Const 222 of type int [line: 22]                                                   <
. . . . . . . . Child: 1 Const 333 of type int [line: 22]                                                         <
. . . . . . . Child: 1 Const 444 of type int [line: 22]                                                           <
. . . . . . Child: 1 Const 42 of type int [line: 22]                                                              <
. . . . . Child: 1 Const 555 of type int [line: 22]                                                               <
. . . . Child: 1 Const 666 of type int [line: 22]                                                                 <
. . Sibling: 15 Call: outputb of type (null) [line: 23]                                                           <
. . . Child: 0 Op: >= of type (null) [line: 23]                                                                   <
. . . . Child: 0 Op: + of type (null) [line: 23]                                                                  <
. . . . . Child: 0 Op: % of type (null) [line: 23]                                                                <
. . . . . . Child: 0 Op: / of type (null) [line: 23]                                                              <
. . . . . . . Child: 0 Op: * of type (null) [line: 23]                                                            <
. . . . . . . . Child: 0 Op: chsign of type (null) [line: 23]                                                     <
. . . . . . . . . Child: 0 Op: chsign of type (null) [line: 23]                                                   <
. . . . . . . . . . Child: 0 Op: + of type (null) [line: 23]                                                      <
. . . . . . . . . . . Child: 0 Call: ident of type (null) [line: 23]                                              <
. . . . . . . . . . . . Child: 0 Const 111 of type int [line: 23]                                                 <
. . . . . . . . . . . Child: 1 Const 222 of type int [line: 23]                                                   <
. . . . . . . . Child: 1 Const 333 of type int [line: 23]                                                         <
. . . . . . . Child: 1 Const 444 of type int [line: 23]                                                           <
. . . . . . Child: 1 Const 42 of type int [line: 23]                                                              <
. . . . . Child: 1 Const 555 of type int [line: 23]                                                               <
. . . . Child: 1 Const 666 of type int [line: 23]                                                                 <
. . Sibling: 16 Call: outnl of type (null) [line: 24]                                                             <
. . Sibling: 17 Call: outputb of type (null) [line: 25]                                                           <
. . . Child: 0 Op: not of type (null) [line: 25]                                                                  <
. . . . Child: 0 Op: <= of type (null) [line: 25]                                                                 <
. . . . . Child: 0 Op: + of type (null) [line: 25]                                                                <
. . . . . . Child: 0 Op: % of type (null) [line: 25]                                                              <
. . . . . . . Child: 0 Op: / of type (null) [line: 25]                                                            <
. . . . . . . . Child: 0 Op: * of type (null) [line: 25]                                                          <
. . . . . . . . . Child: 0 Op: chsign of type (null) [line: 25]                                                   <
. . . . . . . . . . Child: 0 Op: chsign of type (null) [line: 25]                                                 <
. . . . . . . . . . . Child: 0 Op: + of type (null) [line: 25]                                                    <
. . . . . . . . . . . . Child: 0 Call: ident of type (null) [line: 25]                                            <
. . . . . . . . . . . . . Child: 0 Const 111 of type int [line: 25]                                               <
. . . . . . . . . . . . Child: 1 Const 222 of type int [line: 25]                                                 <
. . . . . . . . . Child: 1 Const 333 of type int [line: 25]                                                       <
. . . . . . . . Child: 1 Const 444 of type int [line: 25]                                                         <
. . . . . . . Child: 1 Const 42 of type int [line: 25]                                                            <
. . . . . . Child: 1 Const 555 of type int [line: 25]                                                             <
. . . . . Child: 1 Const 666 of type int [line: 25]                                                               <
. . Sibling: 18 Call: outputb of type (null) [line: 26]                                                           <
. . . Child: 0 Op: not of type (null) [line: 26]                                                                  <
. . . . Child: 0 Op: not of type (null) [line: 26]                                                                <
. . . . . Child: 0 Op: <= of type (null) [line: 26]                                                               <
. . . . . . Child: 0 Op: + of type (null) [line: 26]                                                              <
. . . . . . . Child: 0 Op: % of type (null) [line: 26]                                                            <
. . . . . . . . Child: 0 Op: / of type (null) [line: 26]                                                          <
. . . . . . . . . Child: 0 Op: * of type (null) [line: 26]                                                        <
. . . . . . . . . . Child: 0 Op: chsign of type (null) [line: 26]                                                 <
. . . . . . . . . . . Child: 0 Op: chsign of type (null) [line: 26]                                               <
. . . . . . . . . . . . Child: 0 Op: + of type (null) [line: 26]                                                  <
. . . . . . . . . . . . . Child: 0 Call: ident of type (null) [line: 26]                                          <
. . . . . . . . . . . . . . Child: 0 Const 111 of type int [line: 26]                                             <
. . . . . . . . . . . . . Child: 1 Const 222 of type int [line: 26]                                               <
. . . . . . . . . . Child: 1 Const 333 of type int [line: 26]                                                     <
. . . . . . . . . Child: 1 Const 444 of type int [line: 26]                                                       <
. . . . . . . . Child: 1 Const 42 of type int [line: 26]                                                          <
. . . . . . . Child: 1 Const 555 of type int [line: 26]                                                           <
. . . . . . Child: 1 Const 666 of type int [line: 26]                                                             <
. . Sibling: 19 Call: outnl of type (null) [line: 27]                                                             <
. . Sibling: 20 Call: outputb of type (null) [line: 28]                                                           <
. . . Child: 0 Op: and of type (null) [line: 28]                                                                  <
. . . . Child: 0 Op: not of type (null) [line: 28]                                                                <
. . . . . Child: 0 Op: not of type (null) [line: 28]                                                              <
. . . . . . Child: 0 Op: <= of type (null) [line: 28]                                                             <
. . . . . . . Child: 0 Op: + of type (null) [line: 28]                                                            <
. . . . . . . . Child: 0 Op: % of type (null) [line: 28]                                                          <
. . . . . . . . . Child: 0 Op: / of type (null) [line: 28]                                                        <
. . . . . . . . . . Child: 0 Op: * of type (null) [line: 28]                                                      <
. . . . . . . . . . . Child: 0 Op: chsign of type (null) [line: 28]                                               <
. . . . . . . . . . . . Child: 0 Op: chsign of type (null) [line: 28]                                             <
. . . . . . . . . . . . . Child: 0 Op: + of type (null) [line: 28]                                                <
. . . . . . . . . . . . . . Child: 0 Call: ident of type (null) [line: 28]                                        <
. . . . . . . . . . . . . . . Child: 0 Const 111 of type int [line: 28]                                           <
. . . . . . . . . . . . . . Child: 1 Const 222 of type int [line: 28]                                             <
. . . . . . . . . . . Child: 1 Const 333 of type int [line: 28]                                                   <
. . . . . . . . . . Child: 1 Const 444 of type int [line: 28]                                                     <
. . . . . . . . . Child: 1 Const 42 of type int [line: 28]                                                        <
. . . . . . . . Child: 1 Const 555 of type int [line: 28]                                                         <
. . . . . . . Child: 1 Const 666 of type int [line: 28]                                                           <
. . . . Child: 1 Op: < of type (null) [line: 28]                                                                  <
. . . . . Child: 0 Const 777 of type int [line: 28]                                                               <
. . . . . Child: 1 Const 888 of type int [line: 28]                                                               <
. . Sibling: 21 Call: outputb of type (null) [line: 29]                                                           <
. . . Child: 0 Op: or of type (null) [line: 29]                                                                   <
. . . . Child: 0 Op: and of type (null) [line: 29]                                                                <
. . . . . Child: 0 Op: not of type (null) [line: 29]                                                              <
. . . . . . Child: 0 Op: not of type (null) [line: 29]                                                            <
. . . . . . . Child: 0 Op: <= of type (null) [line: 29]                                                           <
. . . . . . . . Child: 0 Op: + of type (null) [line: 29]                                                          <
. . . . . . . . . Child: 0 Op: % of type (null) [line: 29]                                                        <
. . . . . . . . . . Child: 0 Op: / of type (null) [line: 29]                                                      <
. . . . . . . . . . . Child: 0 Op: * of type (null) [line: 29]                                                    <
. . . . . . . . . . . . Child: 0 Op: chsign of type (null) [line: 29]                                             <
. . . . . . . . . . . . . Child: 0 Op: chsign of type (null) [line: 29]                                           <
. . . . . . . . . . . . . . Child: 0 Op: + of type (null) [line: 29]                                              <
. . . . . . . . . . . . . . . Child: 0 Call: ident of type (null) [line: 29]                                      <
. . . . . . . . . . . . . . . . Child: 0 Const 111 of type int [line: 29]                                         <
. . . . . . . . . . . . . . . Child: 1 Const 222 of type int [line: 29]                                           <
. . . . . . . . . . . . Child: 1 Const 333 of type int [line: 29]                                                 <
. . . . . . . . . . . Child: 1 Const 444 of type int [line: 29]                                                   <
. . . . . . . . . . Child: 1 Const 42 of type int [line: 29]                                                      <
. . . . . . . . . Child: 1 Const 555 of type int [line: 29]                                                       <
. . . . . . . . Child: 1 Const 666 of type int [line: 29]                                                         <
. . . . . Child: 1 Op: < of type (null) [line: 29]                                                                <
. . . . . . Child: 0 Const 777 of type int [line: 29]                                                             <
. . . . . . Child: 1 Const 888 of type int [line: 29]                                                             <
. . . . Child: 1 Op: != of type (null) [line: 29]                                                                 <
. . . . . Child: 0 Const 999 of type int [line: 29]                                                               <
. . . . . Child: 1 Const 1000 of type int [line: 29]                                                              <
. . Sibling: 22 Call: outnl of type (null) [line: 30]                                                             <
. . Sibling: 23 Call: outputb of type (null) [line: 31]                                                           <
. . . Child: 0 Assign: <- of type (null) [line: 31]                                                               <
. . . . Child: 0 Id: x of type (null) [line: 31]                                                                  <
. . . . Child: 1 Op: or of type (null) [line: 31]                                                                 <
. . . . . Child: 0 Op: and of type (null) [line: 31]                                                              <
. . . . . . Child: 0 Op: not of type (null) [line: 31]                                                            <
. . . . . . . Child: 0 Op: not of type (null) [line: 31]                                                          <
. . . . . . . . Child: 0 Op: <= of type (null) [line: 31]                                                         <
. . . . . . . . . Child: 0 Op: + of type (null) [line: 31]                                                        <
. . . . . . . . . . Child: 0 Op: % of type (null) [line: 31]                                                      <
. . . . . . . . . . . Child: 0 Op: / of type (null) [line: 31]                                                    <
. . . . . . . . . . . . Child: 0 Op: * of type (null) [line: 31]                                                  <
. . . . . . . . . . . . . Child: 0 Op: chsign of type (null) [line: 31]                                           <
. . . . . . . . . . . . . . Child: 0 Op: chsign of type (null) [line: 31]                                         <
. . . . . . . . . . . . . . . Child: 0 Op: + of type (null) [line: 31]                                            <
. . . . . . . . . . . . . . . . Child: 0 Call: ident of type (null) [line: 31]                                    <
. . . . . . . . . . . . . . . . . Child: 0 Const 111 of type int [line: 31]                                       <
. . . . . . . . . . . . . . . . Child: 1 Const 222 of type int [line: 31]                                         <
. . . . . . . . . . . . . Child: 1 Const 333 of type int [line: 31]                                               <
. . . . . . . . . . . . Child: 1 Const 444 of type int [line: 31]                                                 <
. . . . . . . . . . . Child: 1 Const 42 of type int [line: 31]                                                    <
. . . . . . . . . . Child: 1 Const 555 of type int [line: 31]                                                     <
. . . . . . . . . Child: 1 Const 666 of type int [line: 31]                                                       <
. . . . . . Child: 1 Op: < of type (null) [line: 31]                                                              <
. . . . . . . Child: 0 Const 777 of type int [line: 31]                                                           <
. . . . . . . Child: 1 Const 888 of type int [line: 31]                                                           <
. . . . . Child: 1 Op: != of type (null) [line: 31]                                                               <
. . . . . . Child: 0 Const 999 of type int [line: 31]                                                             <
. . . . . . Child: 1 Const 1000 of type int [line: 31]                                                            <
. . Sibling: 24 Call: outnl of type (null) [line: 32]                                                             <
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 25                                                                                                    Number of errors: 25

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P expL.c-                                                                                                         ./c- -P expL.c-
=========== Symbol Table ===========                                                                              |     WARNING(6): Variable 'x' may be uninitialized when used here.
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
x:                                                                                                                <
=========== ============ ===========                                                                              <
ID: x ParentID: +                                                                                                 <
yes, we found ID: x                                                                                               <
ID: x ParentID: +                                                                                                 <
yes, we found ID: x                                                                                               <
ID: x ParentID: +                                                                                                 <
yes, we found ID: x                                                                                               <
Func: main returns type void [line: 2]                                                                                  Func: main returns type void [line: 2]
. Child: 1 Compound [line: 3]                                                                                           . Child: 1 Compound [line: 3]
. . Child: 0 Var: x of type int [line: 4]                                                                               . . Child: 0 Var: x of type int [line: 4]
. . Child: 1 Op: > of type bool [line: 6]                                                                               . . Child: 1 Op: > of type bool [line: 6]
. . . Child: 0 Op: + of type int [line: 6]                                                                              . . . Child: 0 Op: + of type int [line: 6]
. . . . Child: 0 Op: * of type int [line: 6]                                                                            . . . . Child: 0 Op: * of type int [line: 6]
. . . . . Child: 0 Const 555 of type int [line: 6]                                                                      . . . . . Child: 0 Const 555 of type int [line: 6]
. . . . . Child: 1 Const 666 of type int [line: 6]                                                                      . . . . . Child: 1 Const 666 of type int [line: 6]
. . . . Child: 1 Id: x of type int [line: 6]                                                                            . . . . Child: 1 Id: x of type int [line: 6]
. . . Child: 1 Const 777 of type int [line: 6]                                                                          . . . Child: 1 Const 777 of type int [line: 6]
Number of warnings: 0                                                                                             |     Number of warnings: 1
Number of errors: 0                                                                                                     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P expR.c-                                                                                                         ./c- -P expR.c-
=========== Symbol Table ===========                                                                              |     WARNING(6): Variable 'x' may be uninitialized when used here.
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
x:                                                                                                                <
=========== ============ ===========                                                                              <
ID: x ParentID: *                                                                                                 <
yes, we found ID: x                                                                                               <
ID: x ParentID: *                                                                                                 <
yes, we found ID: x                                                                                               <
ID: x ParentID: *                                                                                                 <
yes, we found ID: x                                                                                               <
Func: main returns type void [line: 2]                                                                                  Func: main returns type void [line: 2]
. Child: 1 Compound [line: 3]                                                                                           . Child: 1 Compound [line: 3]
. . Child: 0 Var: x of type int [line: 4]                                                                               . . Child: 0 Var: x of type int [line: 4]
. . Child: 1 Op: > of type bool [line: 6]                                                                               . . Child: 1 Op: > of type bool [line: 6]
. . . Child: 0 Const 555 of type int [line: 6]                                                                          . . . Child: 0 Const 555 of type int [line: 6]
. . . Child: 1 Op: + of type int [line: 6]                                                                              . . . Child: 1 Op: + of type int [line: 6]
. . . . Child: 0 Const 666 of type int [line: 6]                                                                        . . . . Child: 0 Const 666 of type int [line: 6]
. . . . Child: 1 Op: * of type int [line: 6]                                                                            . . . . Child: 1 Op: * of type int [line: 6]
. . . . . Child: 0 Id: x of type int [line: 6]                                                                          . . . . . Child: 0 Id: x of type int [line: 6]
. . . . . Child: 1 Const 777 of type int [line: 6]                                                                      . . . . . Child: 1 Const 777 of type int [line: 6]
Number of warnings: 0                                                                                             |     Number of warnings: 1
Number of errors: 0                                                                                                     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P for.c-                                                                                                          ./c- -P for.c-
ERROR(8) : '<-' requires both operands be arrays or not but lhs is an array and rhs is not an array.              |     WARNING(5): The variable 'ba' seems not to be used.
ERROR(9) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                    |     ERROR(12): Cannot index nonarray 'bb'.
ERROR(9) : Cannot index nonarray 'aa'.                                                                            |     ERROR(12): Symbol 'bb' is not declared.
ERROR(10) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(13): Cannot index nonarray 'bb'.
ERROR(10) : Cannot index nonarray 'aa'.                                                                           |     ERROR(13): Symbol 'bb' is not declared.
ERROR(12) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  |     ERROR(14): Cannot index nonarray 'bb'.
ERROR(12) : Cannot index nonarray 'bb'.                                                                           |     ERROR(14): Symbol 'bb' is not declared.
ERROR(12) : Symbol 'bb' is not declared.                                                                          |     ERROR(16): Cannot index nonarray 'cc'.
ERROR(13) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  |     ERROR(16): Symbol 'cc' is not declared.
ERROR(13) : Cannot index nonarray 'bb'.                                                                           |     ERROR(17): Cannot index nonarray 'cc'.
ERROR(13) : Symbol 'bb' is not declared.                                                                          |     ERROR(17): Symbol 'cc' is not declared.
ERROR(14) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  |     ERROR(20): Cannot index nonarray 'a'.
ERROR(14) : Cannot index nonarray 'bb'.                                                                           |     ERROR(20): Symbol 'a' is not declared.
ERROR(14) : Symbol 'bb' is not declared.                                                                          |     ERROR(20): Symbol 'output' is not declared.
ERROR(16) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  |     ERROR(21): Symbol 'outnl' is not declared.
ERROR(16) : Cannot index nonarray 'cc'.                                                                           |     ERROR(23): Cannot index nonarray 'b'.
ERROR(16) : Symbol 'cc' is not declared.                                                                          |     ERROR(23): Symbol 'b' is not declared.
ERROR(17) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  |     ERROR(23): Symbol 'outputb' is not declared.
ERROR(17) : Cannot index nonarray 'cc'.                                                                           |     ERROR(24): Symbol 'outnl' is not declared.
ERROR(17) : Symbol 'cc' is not declared.                                                                          |     ERROR(26): Cannot index nonarray 'c'.
ERROR(18) : '<-' requires operands of the same type but lhs is type (null) and rhs is type char.                  |     ERROR(26): Symbol 'c' is not declared.
ERROR(18) : Cannot index nonarray 'ca'.                                                                           |     ERROR(26): Symbol 'outputc' is not declared.
ERROR(20) : Symbol 'output' is not declared.                                                                      |     ERROR(27): Symbol 'outnl' is not declared.
ERROR(21) : Symbol 'outnl' is not declared.                                                                       |     ERROR(29): Symbol 'output' is not declared.
ERROR(23) : Symbol 'i' is already declared.                                                                       |     Number of warnings: 1
ERROR(23) : Symbol 'outputb' is not declared.                                                                     |     Number of errors: 23
ERROR(24) : Symbol 'outnl' is not declared.                                                                       <
ERROR(26) : Symbol 'i' is already declared.                                                                       <
ERROR(26) : Symbol 'outputc' is not declared.                                                                     <
ERROR(27) : Symbol 'outnl' is not declared.                                                                       <
ERROR(29) : Symbol 'i' is already declared.                                                                       <
ERROR(29) : Symbol 'output' is not declared.                                                                      <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
aa:                                                                                                               <
ba:                                                                                                               <
ca:                                                                                                               <
i:                                                                                                                <
j:                                                                                                                <
=========== ============ ===========                                                                              <
ID: aa ParentID: [                                                                                                <
yes, we found ID: aa                                                                                              <
ID: aa ParentID: [                                                                                                <
yes, we found ID: aa                                                                                              <
ID: aa ParentID: [                                                                                                <
yes, we found ID: aa                                                                                              <
Func: main returns type void [line: 2]                                                                            <
. Child: 1 Compound [line: 3]                                                                                     <
. . Child: 0 Var: aa of array of type int [line: 4]                                                               <
. . Sibling: 1 Var: ba of array of type bool [line: 5]                                                            <
. . Sibling: 2 Var: ca of array of type char [line: 6]                                                            <
. . Child: 1 Assign: <- of type int [line: 8]                                                                     <
. . . Child: 0 Op: [ of type int [line: 8]                                                                        <
. . . . Child: 0 Id: aa of type int [line: 8]                                                                     <
. . . . Child: 1 Const 0 of type int [line: 8]                                                                    <
. . . Child: 1 Const 100 of type int [line: 8]                                                                    <
. . Sibling: 1 Assign: <- of type (null) [line: 9]                                                                <
. . . Child: 0 Op: [ of type (null) [line: 9]                                                                     <
. . . . Child: 0 Id: aa of type int [line: 9]                                                                     <
. . . . Child: 1 Const 1 of type int [line: 9]                                                                    <
. . . Child: 1 Const 101 of type int [line: 9]                                                                    <
. . Sibling: 2 Assign: <- of type (null) [line: 10]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 10]                                                                    <
. . . . Child: 0 Id: aa of type int [line: 10]                                                                    <
. . . . Child: 1 Const 2 of type int [line: 10]                                                                   <
. . . Child: 1 Const 102 of type int [line: 10]                                                                   <
. . Sibling: 3 Assign: <- of type (null) [line: 12]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 12]                                                                    <
. . . . Child: 0 Id: bb of type (null) [line: 12]                                                                 <
. . . . Child: 1 Const 0 of type int [line: 12]                                                                   <
. . . Child: 1 Const true of type bool [line: 12]                                                                 <
. . Sibling: 4 Assign: <- of type (null) [line: 13]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 13]                                                                    <
. . . . Child: 0 Id: bb of type (null) [line: 13]                                                                 <
. . . . Child: 1 Const 1 of type int [line: 13]                                                                   <
. . . Child: 1 Const false of type bool [line: 13]                                                                <
. . Sibling: 5 Assign: <- of type (null) [line: 14]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 14]                                                                    <
. . . . Child: 0 Id: bb of type (null) [line: 14]                                                                 <
. . . . Child: 1 Const 2 of type int [line: 14]                                                                   <
. . . Child: 1 Const true of type bool [line: 14]                                                                 <
. . Sibling: 6 Assign: <- of type (null) [line: 16]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 16]                                                                    <
. . . . Child: 0 Id: cc of type (null) [line: 16]                                                                 <
. . . . Child: 1 Const 0 of type int [line: 16]                                                                   <
. . . Child: 1 Const 'a' of type char [line: 16]                                                                  <
. . Sibling: 7 Assign: <- of type (null) [line: 17]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 17]                                                                    <
. . . . Child: 0 Id: cc of type (null) [line: 17]                                                                 <
. . . . Child: 1 Const 1 of type int [line: 17]                                                                   <
. . . Child: 1 Const 'b' of type char [line: 17]                                                                  <
. . Sibling: 8 Assign: <- of type (null) [line: 18]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 18]                                                                    <
. . . . Child: 0 Id: ca of type char [line: 18]                                                                   <
. . . . Child: 1 Const 2 of type int [line: 18]                                                                   <
. . . Child: 1 Const 'c' of type char [line: 18]                                                                  <
. . Sibling: 9 For [line: 20]                                                                                     <
. . . Child: 0 Var: i of type int [line: 20]                                                                      <
. . . Child: 1 Range [line: 20]                                                                                   <
. . . . Child: 0 Const 0 of type int [line: 20]                                                                   <
. . . . Child: 1 Const 2 of type int [line: 20]                                                                   <
. . . Child: 2 Call: output of type (null) [line: 20]                                                             <
. . . . Child: 0 Op: [ of type (null) [line: 20]                                                                  <
. . . . . Child: 0 Id: a of type (null) [line: 20]                                                                <
. . . . . Child: 1 Id: i of type (null) [line: 20]                                                                <
. . Sibling: 10 Call: outnl of type (null) [line: 21]                                                             <
. . Sibling: 11 For [line: 23]                                                                                    <
. . . Child: 0 Var: i of type int [line: 23]                                                                      <
. . . Child: 1 Range [line: 23]                                                                                   <
. . . . Child: 0 Const 0 of type int [line: 23]                                                                   <
. . . . Child: 1 Const 2 of type int [line: 23]                                                                   <
. . . Child: 2 Call: outputb of type (null) [line: 23]                                                            <
. . . . Child: 0 Op: [ of type (null) [line: 23]                                                                  <
. . . . . Child: 0 Id: b of type (null) [line: 23]                                                                <
. . . . . Child: 1 Id: i of type (null) [line: 23]                                                                <
. . Sibling: 12 Call: outnl of type (null) [line: 24]                                                             <
. . Sibling: 13 For [line: 26]                                                                                    <
. . . Child: 0 Var: i of type int [line: 26]                                                                      <
. . . Child: 1 Range [line: 26]                                                                                   <
. . . . Child: 0 Const 0 of type int [line: 26]                                                                   <
. . . . Child: 1 Const 2 of type int [line: 26]                                                                   <
. . . Child: 2 Call: outputc of type (null) [line: 26]                                                            <
. . . . Child: 0 Op: [ of type (null) [line: 26]                                                                  <
. . . . . Child: 0 Id: c of type (null) [line: 26]                                                                <
. . . . . Child: 1 Id: i of type (null) [line: 26]                                                                <
. . Sibling: 14 Call: outnl of type (null) [line: 27]                                                             <
. . Sibling: 15 For [line: 29]                                                                                    <
. . . Child: 0 Var: i of type int [line: 29]                                                                      <
. . . Child: 1 Range [line: 29]                                                                                   <
. . . . Child: 0 Const 1 of type int [line: 29]                                                                   <
. . . . Child: 1 Const 3 of type int [line: 29]                                                                   <
. . . Child: 2 For [line: 29]                                                                                     <
. . . . Child: 0 Var: j of type int [line: 29]                                                                    <
. . . . Child: 1 Range [line: 29]                                                                                 <
. . . . . Child: 0 Const 1 of type int [line: 29]                                                                 <
. . . . . Child: 1 Const 6 of type int [line: 29]                                                                 <
. . . . . Child: 2 Const 2 of type int [line: 29]                                                                 <
. . . . Child: 2 Call: output of type (null) [line: 29]                                                           <
. . . . . Child: 0 Op: * of type (null) [line: 29]                                                                <
. . . . . . Child: 0 Id: i of type (null) [line: 29]                                                              <
. . . . . . Child: 1 Id: j of type (null) [line: 29]                                                              <
Number of warnings: 0                                                                                             <
Number of errors: 24                                                                                              <

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P for2.c-                                                                                                         ./c- -P for2.c-
ERROR(5) : Symbol 'j' is not declared.                                                                            |     WARNING(3): The variable 'a' seems not to be used.
=========== Symbol Table ===========                                                                              |     WARNING(5): The variable 'i' seems not to be used.
Scope: Global -----------------                                                                                   |     ERROR(8): Symbol 'j' is already declared at line 6.
main:                                                                                                             |     WARNING(9): Variable 'i' may be uninitialized when used here.
Scope: main -----------------                                                                                     |     Number of warnings: 3
a:                                                                                                                <
i:                                                                                                                <
j:                                                                                                                <
=========== ============ ===========                                                                              <
ID: a ParentID: to                                                                                                <
yes, we found ID: a                                                                                               <
ID: a ParentID: to                                                                                                <
yes, we found ID: a                                                                                               <
ID: a ParentID: to                                                                                                <
yes, we found ID: a                                                                                               <
ID: j ParentID: to                                                                                                <
yes, we found ID: j                                                                                               <
ID: j ParentID: to                                                                                                <
yes, we found ID: j                                                                                               <
ID: j ParentID: to                                                                                                <
yes, we found ID: j                                                                                               <
ID: a ParentID: to                                                                                                <
yes, we found ID: a                                                                                               <
ID: a ParentID: to                                                                                                <
yes, we found ID: a                                                                                               <
ID: a ParentID: to                                                                                                <
yes, we found ID: a                                                                                               <
ID: i ParentID: to                                                                                                <
yes, we found ID: i                                                                                               <
ID: i ParentID: to                                                                                                <
yes, we found ID: i                                                                                               <
ID: i ParentID: to                                                                                                <
yes, we found ID: i                                                                                               <
ID: i ParentID: +                                                                                                 <
yes, we found ID: i                                                                                               <
ID: i ParentID: +                                                                                                 <
yes, we found ID: i                                                                                               <
ID: i ParentID: +                                                                                                 <
yes, we found ID: i                                                                                               <
ID: j ParentID: +                                                                                                 <
yes, we found ID: j                                                                                               <
ID: j ParentID: +                                                                                                 <
yes, we found ID: j                                                                                               <
ID: j ParentID: +                                                                                                 <
yes, we found ID: j                                                                                               <
Func: main returns type void [line: 1]                                                                            <
. Child: 1 Compound [line: 2]                                                                                     <
. . Child: 0 Var: a of array of type int [line: 3]                                                                <
. . Child: 1 For [line: 5]                                                                                        <
. . . Child: 0 Var: i of type int [line: 5]                                                                       <
. . . Child: 1 Range [line: 5]                                                                                    <
. . . . Child: 0 Id: a of type int [line: 5]                                                                      <
. . . . Child: 1 Id: j of type int [line: 5]                                                                      <
. . . Child: 2 For [line: 6]                                                                                      <
. . . . Child: 0 Var: j of type int [line: 6]                                                                     <
. . . . Child: 1 Range [line: 6]                                                                                  <
. . . . . Child: 0 Id: a of type int [line: 6]                                                                    <
. . . . . Child: 1 Id: i of type int [line: 6]                                                                    <
. . . . Child: 2 Compound [line: 6]                                                                               <
. . . . . Child: 0 Var: i of type int [line: 7]                                                                   <
. . . . . Sibling: 1 Var: j of type int [line: 8]                                                                 <
. . . . . Child: 1 Op: + of type int [line: 9]                                                                    <
. . . . . . Child: 0 Id: i of type int [line: 9]                                                                  <
. . . . . . Child: 1 Id: j of type int [line: 9]                                                                  <
Number of warnings: 0                                                                                             <
Number of errors: 1                                                                                                     Number of errors: 1

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P fora.c-                                                                                                         ./c- -P fora.c-
ERROR(5) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                    |     WARNING(7): The variable 'i' seems not to be used.
ERROR(7) : Symbol 'i' is already declared.                                                                        <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
i:                                                                                                                <
j:                                                                                                                <
=========== ============ ===========                                                                              <
ID: i ParentID: <-                                                                                                <
yes, we found ID: i                                                                                               <
ID: i ParentID: <-                                                                                                <
yes, we found ID: i                                                                                               <
ID: i ParentID: <-                                                                                                <
yes, we found ID: i                                                                                               <
Func: main returns type void [line: 1]                                                                                  Func: main returns type void [line: 1]
. Child: 1 Compound [line: 2]                                                                                           . Child: 1 Compound [line: 2]
. . Child: 1 For [line: 3]                                                                                              . . Child: 1 For [line: 3]
. . . Child: 0 Var: i of type int [line: 3]                                                                             . . . Child: 0 Var: i of type int [line: 3]
. . . Child: 1 Range [line: 3]                                                                                          . . . Child: 1 Range [line: 3]
. . . . Child: 0 Const 1 of type int [line: 3]                                                                          . . . . Child: 0 Const 1 of type int [line: 3]
. . . . Child: 1 Const 11 of type int [line: 3]                                                                         . . . . Child: 1 Const 11 of type int [line: 3]
. . . Child: 2 Assign: <- of type int [line: 3]                                                                         . . . Child: 2 Assign: <- of type int [line: 3]
. . . . Child: 0 Id: i of type int [line: 3]                                                                            . . . . Child: 0 Id: i of type int [line: 3]
. . . . Child: 1 Const 3 of type int [line: 3]                                                                          . . . . Child: 1 Const 3 of type int [line: 3]
. . Sibling: 1 For [line: 5]                                                                                            . . Sibling: 1 For [line: 5]
. . . Child: 0 Var: j of type int [line: 5]                                                                             . . . Child: 0 Var: j of type int [line: 5]
. . . Child: 1 Range [line: 5]                                                                                          . . . Child: 1 Range [line: 5]
. . . . Child: 0 Const 2 of type int [line: 5]                                                                          . . . . Child: 0 Const 2 of type int [line: 5]
. . . . Child: 1 Const 22 of type int [line: 5]                                                                         . . . . Child: 1 Const 22 of type int [line: 5]
. . . . Child: 2 Const 3 of type int [line: 5]                                                                          . . . . Child: 2 Const 3 of type int [line: 5]
. . . Child: 2 Assign: <- of type (null) [line: 5]                                                                |     . . . Child: 2 Assign: <- of type int [line: 5]
. . . . Child: 0 Id: j of type int [line: 5]                                                                            . . . . Child: 0 Id: j of type int [line: 5]
. . . . Child: 1 Const 7 of type int [line: 5]                                                                          . . . . Child: 1 Const 7 of type int [line: 5]
. . Sibling: 2 For [line: 7]                                                                                            . . Sibling: 2 For [line: 7]
. . . Child: 0 Var: i of type int [line: 7]                                                                             . . . Child: 0 Var: i of type int [line: 7]
. . . Child: 1 Range [line: 7]                                                                                          . . . Child: 1 Range [line: 7]
. . . . Child: 0 Id: i of type int [line: 7]                                                                      |     . . . . Child: 0 Id: i of undefined type [line: 7]
. . . . Child: 1 Id: i of type int [line: 7]                                                                      |     . . . . Child: 1 Id: i of undefined type [line: 7]
. . . . Child: 2 Id: i of type int [line: 7]                                                                      |     . . . . Child: 2 Id: i of undefined type [line: 7]
. . . Child: 2 Const 666 of type int [line: 7]                                                                          . . . Child: 2 Const 666 of type int [line: 7]
Number of warnings: 0                                                                                             |     Number of warnings: 1
Number of errors: 2                                                                                               |     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P forb.c-                                                                                                         ./c- -P forb.c-
ERROR(7) : Symbol 'x' is already declared.                                                                        |     WARNING(3): The variable 'y' seems not to be used.
ERROR(8) : Symbol 'x' is already declared.                                                                        |     WARNING(3): The variable 'z' seems not to be used.
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
x:                                                                                                                <
y:                                                                                                                <
z:                                                                                                                <
=========== ============ ===========                                                                              <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: for                                                                                               <
yes, we found ID: x                                                                                               <
ID: x ParentID: for                                                                                               <
yes, we found ID: x                                                                                               <
ID: x ParentID: for                                                                                               <
yes, we found ID: x                                                                                               <
Func: main returns type void [line: 1]                                                                                  Func: main returns type void [line: 1]
. Child: 1 Compound [line: 2]                                                                                           . Child: 1 Compound [line: 2]
. . Child: 0 Var: y of type int [line: 3]                                                                               . . Child: 0 Var: y of type int [line: 3]
. . Sibling: 1 Var: z of array of type int [line: 3]                                                              |     . . Sibling: 1 Var: z is array of type int [line: 3]
. . Child: 1 For [line: 4]                                                                                              . . Child: 1 For [line: 4]
. . . Child: 0 Var: x of type int [line: 4]                                                                             . . . Child: 0 Var: x of type int [line: 4]
. . . Child: 1 Range [line: 5]                                                                                          . . . Child: 1 Range [line: 5]
. . . . Child: 0 Id: x of type int [line: 5]                                                                      |     . . . . Child: 0 Id: x of undefined type [line: 5]
. . . . Child: 1 Id: x of type int [line: 5]                                                                      |     . . . . Child: 1 Id: x of undefined type [line: 5]
. . . . Child: 2 Id: x of type int [line: 5]                                                                      |     . . . . Child: 2 Id: x of undefined type [line: 5]
. . . Child: 2 Id: x of type int [line: 6]                                                                              . . . Child: 2 Id: x of type int [line: 6]
. . Sibling: 1 For [line: 7]                                                                                            . . Sibling: 1 For [line: 7]
. . . Child: 0 Var: x of type int [line: 7]                                                                             . . . Child: 0 Var: x of type int [line: 7]
. . . Child: 1 Range [line: 7]                                                                                          . . . Child: 1 Range [line: 7]
. . . . Child: 0 Id: y of type int [line: 7]                                                                      |     . . . . Child: 0 Id: y of undefined type [line: 7]
. . . . Child: 1 Id: x of type int [line: 7]                                                                      |     . . . . Child: 1 Id: x of undefined type [line: 7]
. . . Child: 2 Id: x of type int [line: 7]                                                                              . . . Child: 2 Id: x of type int [line: 7]
. . Sibling: 2 For [line: 8]                                                                                            . . Sibling: 2 For [line: 8]
. . . Child: 0 Var: x of type int [line: 8]                                                                             . . . Child: 0 Var: x of type int [line: 8]
. . . Child: 1 Range [line: 8]                                                                                          . . . Child: 1 Range [line: 8]
. . . . Child: 0 Id: z of type int [line: 8]                                                                      |     . . . . Child: 0 Id: z of undefined type [line: 8]
. . . . Child: 1 Id: x of type int [line: 8]                                                                      |     . . . . Child: 1 Id: x of undefined type [line: 8]
. . . Child: 2 Id: x of type int [line: 8]                                                                              . . . Child: 2 Id: x of type int [line: 8]
Number of warnings: 0                                                                                             |     Number of warnings: 2
Number of errors: 2                                                                                               |     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P forscope.c-                                                                                                     ./c- -P forscope.c-
ERROR(3) : '<-' requires both operands be arrays or not but lhs is an array and rhs is not an array.              |     ERROR(6): Symbol 'x' is already declared at line 5.
ERROR(7) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                    |     WARNING(10): The variable 'x' seems not to be used.
ERROR(10) : Symbol 'x' is already declared.                                                                       |     WARNING(15): The variable 'x' seems not to be used.
ERROR(12) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(16): Symbol 'x' is already declared at line 15.
ERROR(15) : Symbol 'x' is already declared.                                                                       |     ERROR(29): Symbol 'x' is already declared at line 28.
ERROR(19) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     Number of warnings: 2
ERROR(22) : Symbol 'x' is already declared.                                                                       |     Number of errors: 3
ERROR(23) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(25) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(28) : Symbol 'x' is already declared.                                                                       <
ERROR(30) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(31) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(35) : Symbol 'x' is already declared.                                                                       <
ERROR(37) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(38) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(41) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(44) : Symbol 'x' is already declared.                                                                       <
ERROR(46) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(48) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
values:                                                                                                           <
x:                                                                                                                <
=========== ============ ===========                                                                              <
ID: values ParentID: [                                                                                            <
yes, we found ID: values                                                                                          <
ID: values ParentID: [                                                                                            <
yes, we found ID: values                                                                                          <
ID: values ParentID: [                                                                                            <
yes, we found ID: values                                                                                          <
Func: main returns type void [line: 1]                                                                            <
. Child: 1 Compound [line: 1]                                                                                     <
. . Child: 0 Var: values of array of type int [line: 2]                                                           <
. . Child: 1 Assign: <- of type int [line: 3]                                                                     <
. . . Child: 0 Op: [ of type int [line: 3]                                                                        <
. . . . Child: 0 Id: values of type int [line: 3]                                                                 <
. . . . Child: 1 Const 0 of type int [line: 3]                                                                    <
. . . Child: 1 Const 3 of type int [line: 3]                                                                      <
. . Sibling: 1 For [line: 5]                                                                                      <
. . . Child: 0 Var: x of type int [line: 5]                                                                       <
. . . Child: 1 Range [line: 5]                                                                                    <
. . . . Child: 0 Id: values of type int [line: 5]                                                                 <
. . . . Child: 1 Const 10 of type int [line: 5]                                                                   <
. . . Child: 2 Compound [line: 5]                                                                                 <
. . . . Child: 0 Var: x of type int [line: 6]                                                                     <
. . . . Child: 1 Assign: <- of type (null) [line: 7]                                                              <
. . . . . Child: 0 Id: x of type int [line: 7]                                                                    <
. . . . . Child: 1 Const 1 of type int [line: 7]                                                                  <
. . Sibling: 2 For [line: 10]                                                                                     <
. . . Child: 0 Var: x of type int [line: 10]                                                                      <
. . . Child: 1 Range [line: 10]                                                                                   <
. . . . Child: 0 Id: values of type int [line: 10]                                                                <
. . . . Child: 1 Const 20 of type int [line: 10]                                                                  <
. . . Child: 2 Compound [line: 10]                                                                                <
. . . . Child: 1 Compound [line: 10]                                                                              <
. . . . . Child: 0 Var: x of type int [line: 11]                                                                  <
. . . . . Child: 1 Assign: <- of type (null) [line: 12]                                                           <
. . . . . . Child: 0 Id: x of type int [line: 12]                                                                 <
. . . . . . Child: 1 Const 2 of type int [line: 12]                                                               <
. . Sibling: 3 For [line: 15]                                                                                     <
. . . Child: 0 Var: x of type int [line: 15]                                                                      <
. . . Child: 1 Range [line: 15]                                                                                   <
. . . . Child: 0 Id: values of type int [line: 15]                                                                <
. . . . Child: 1 Const 30 of type int [line: 15]                                                                  <
. . . Child: 2 Compound [line: 15]                                                                                <
. . . . Child: 0 Var: x of type int [line: 16]                                                                    <
. . . . Child: 1 Compound [line: 17]                                                                              <
. . . . . Child: 0 Var: x of type int [line: 18]                                                                  <
. . . . . Child: 1 Assign: <- of type (null) [line: 19]                                                           <
. . . . . . Child: 0 Id: x of type int [line: 19]                                                                 <
. . . . . . Child: 1 Const 3 of type int [line: 19]                                                               <
. . Sibling: 4 For [line: 22]                                                                                     <
. . . Child: 0 Var: x of type int [line: 22]                                                                      <
. . . Child: 1 Range [line: 22]                                                                                   <
. . . . Child: 0 Id: values of type int [line: 22]                                                                <
. . . . Child: 1 Const 40 of type int [line: 22]                                                                  <
. . . Child: 2 If [line: 23]                                                                                      <
. . . . Child: 0 Op: > of type (null) [line: 23]                                                                  <
. . . . . Child: 0 Id: x of type int [line: 23]                                                                   <
. . . . . Child: 1 Const 3 of type int [line: 23]                                                                 <
. . . . Child: 1 Compound [line: 23]                                                                              <
. . . . . Child: 0 Var: x of type int [line: 24]                                                                  <
. . . . . Child: 1 Assign: <- of type (null) [line: 25]                                                           <
. . . . . . Child: 0 Id: x of type int [line: 25]                                                                 <
. . . . . . Child: 1 Const 4 of type int [line: 25]                                                               <
. . Sibling: 5 For [line: 28]                                                                                     <
. . . Child: 0 Var: x of type int [line: 28]                                                                      <
. . . Child: 1 Range [line: 28]                                                                                   <
. . . . Child: 0 Id: values of type int [line: 28]                                                                <
. . . . Child: 1 Const 50 of type int [line: 28]                                                                  <
. . . Child: 2 Compound [line: 28]                                                                                <
. . . . Child: 0 Var: x of type int [line: 29]                                                                    <
. . . . Child: 1 If [line: 30]                                                                                    <
. . . . . Child: 0 Op: > of type (null) [line: 30]                                                                <
. . . . . . Child: 0 Id: x of type int [line: 30]                                                                 <
. . . . . . Child: 1 Const 3 of type int [line: 30]                                                               <
. . . . . Child: 1 Compound [line: 30]                                                                            <
. . . . . . Child: 0 Var: x of type int [line: 31]                                                                <
. . . . . . Child: 1 Assign: <- of type (null) [line: 31]                                                         <
. . . . . . . Child: 0 Id: x of type int [line: 31]                                                               <
. . . . . . . Child: 1 Const 5 of type int [line: 31]                                                             <
. . Sibling: 6 For [line: 35]                                                                                     <
. . . Child: 0 Var: x of type int [line: 35]                                                                      <
. . . Child: 1 Range [line: 35]                                                                                   <
. . . . Child: 0 Id: values of type int [line: 35]                                                                <
. . . . Child: 1 Const 60 of type int [line: 35]                                                                  <
. . . Child: 2 While [line: 36]                                                                                   <
. . . . Child: 0 Const true of type bool [line: 36]                                                               <
. . . . Child: 1 If [line: 37]                                                                                    <
. . . . . Child: 0 Op: > of type (null) [line: 37]                                                                <
. . . . . . Child: 0 Id: x of type int [line: 37]                                                                 <
. . . . . . Child: 1 Const 3 of type int [line: 37]                                                               <
. . . . . Child: 1 Compound [line: 37]                                                                            <
. . . . . . Child: 0 Var: x of type int [line: 38]                                                                <
. . . . . . Child: 1 Assign: <- of type (null) [line: 38]                                                         <
. . . . . . . Child: 0 Id: x of type int [line: 38]                                                               <
. . . . . . . Child: 1 Const 6 of type int [line: 38]                                                             <
. . . . . Child: 2 Compound [line: 40]                                                                            <
. . . . . . Child: 0 Var: x of type int [line: 41]                                                                <
. . . . . . Child: 1 Assign: <- of type (null) [line: 41]                                                         <
. . . . . . . Child: 0 Id: x of type int [line: 41]                                                               <
. . . . . . . Child: 1 Const 7 of type int [line: 41]                                                             <
. . Sibling: 7 For [line: 44]                                                                                     <
. . . Child: 0 Var: x of type int [line: 44]                                                                      <
. . . Child: 1 Range [line: 44]                                                                                   <
. . . . Child: 0 Id: values of type int [line: 44]                                                                <
. . . . Child: 1 Const 70 of type int [line: 44]                                                                  <
. . . Child: 2 While [line: 45]                                                                                   <
. . . . Child: 0 Const true of type bool [line: 45]                                                               <
. . . . Child: 1 If [line: 46]                                                                                    <
. . . . . Child: 0 Op: > of type (null) [line: 46]                                                                <
. . . . . . Child: 0 Id: x of type int [line: 46]                                                                 <
. . . . . . Child: 1 Const 3 of type int [line: 46]                                                               <
. . . . . Child: 1 Const 666 of type int [line: 46]                                                               <
. . . . . Child: 2 Compound [line: 47]                                                                            <
. . . . . . Child: 0 Var: x of type int [line: 48]                                                                <
. . . . . . Child: 1 Assign: <- of type (null) [line: 48]                                                         <
. . . . . . . Child: 0 Id: x of type int [line: 48]                                                               <
. . . . . . . Child: 1 Const 7 of type int [line: 48]                                                             <
Number of warnings: 0                                                                                             <
Number of errors: 19                                                                                              <

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P funcscope.c-                                                                                                    ./c- -P funcscope.c-
ERROR(5) : Symbol 'x' is already declared.                                                                        |     ERROR(LINKER): A function named 'main()' must be defined.
ERROR(5) : Symbol 'x' is already declared.                                                                        |     ERROR(5): Symbol 'x' is already declared at line 5.
ERROR(6) : Symbol 'x' is already declared.                                                                        |     ERROR(6): Symbol 'x' is already declared at line 5.
ERROR(12) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     WARNING(10): The variable 'x' seems not to be used.
ERROR(16) : Symbol 'x' is already declared.                                                                       |     WARNING(15): The variable 'x' seems not to be used.
ERROR(19) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(16): Symbol 'x' is already declared at line 15.
ERROR(23) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    |     ERROR(29): Symbol 'x' is already declared at line 28.
ERROR(25) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     Number of warnings: 2
ERROR(29) : Symbol 'x' is already declared.                                                                       |     Number of errors: 5
ERROR(30) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(31) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(37) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(38) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(41) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(47) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(49) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
ant: °Y                                                                                                            <
Scope: ant -----------------                                                                                      <
bat: pY                                                                                                           <
x:                                                                                                                <
Scope: bat -----------------                                                                                      <
cat: )Y                                                                                                           <
x:                                                                                                                <
Scope: cat -----------------                                                                                      <
dog: @4Y                                                                                                          <
x:                                                                                                                <
Scope: dog -----------------                                                                                      <
elk: ÐAY                                                                                                           <
x:                                                                                                                <
Scope: elk -----------------                                                                                      <
fox: ðPY                                                                                                           <
x:                                                                                                                <
Scope: fox -----------------                                                                                      <
gnu: °fY                                                                                                           <
x:                                                                                                                <
Scope: gnu -----------------                                                                                      <
x:                                                                                                                <
=========== ============ ===========                                                                              <
ID: x ParentID: <-                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: <-                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: <-                                                                                                <
yes, we found ID: x                                                                                               <
Func: ant returns type void [line: 5]                                                                             <
. Child: 0 Parm: x of type int [line: 5]                                                                          <
. Sibling: 1 Parm: x of type int [line: 5]                                                                        <
. Child: 1 Compound [line: 5]                                                                                     <
. . Child: 0 Var: x of type int [line: 6]                                                                         <
. . Child: 1 Assign: <- of type int [line: 7]                                                                     <
. . . Child: 0 Id: x of type int [line: 7]                                                                        <
. . . Child: 1 Const 1 of type int [line: 7]                                                                      <
Sibling: 1 Func: bat returns type void [line: 10]                                                                 <
. Child: 0 Parm: x of type int [line: 10]                                                                         <
. Child: 1 Compound [line: 10]                                                                                    <
. . Child: 1 Compound [line: 10]                                                                                  <
. . . Child: 0 Var: x of type int [line: 11]                                                                      <
. . . Child: 1 Assign: <- of type (null) [line: 12]                                                               <
. . . . Child: 0 Id: x of type int [line: 12]                                                                     <
. . . . Child: 1 Const 2 of type int [line: 12]                                                                   <
Sibling: 2 Func: cat returns type void [line: 15]                                                                 <
. Child: 0 Parm: x of type int [line: 15]                                                                         <
. Child: 1 Compound [line: 15]                                                                                    <
. . Child: 0 Var: x of type int [line: 16]                                                                        <
. . Child: 1 Compound [line: 17]                                                                                  <
. . . Child: 0 Var: x of type int [line: 18]                                                                      <
. . . Child: 1 Assign: <- of type (null) [line: 19]                                                               <
. . . . Child: 0 Id: x of type int [line: 19]                                                                     <
. . . . Child: 1 Const 3 of type int [line: 19]                                                                   <
Sibling: 3 Func: dog returns type void [line: 22]                                                                 <
. Child: 0 Parm: x of type int [line: 22]                                                                         <
. Child: 1 Compound [line: 22]                                                                                    <
. . Child: 1 If [line: 23]                                                                                        <
. . . Child: 0 Op: > of type (null) [line: 23]                                                                    <
. . . . Child: 0 Id: x of type int [line: 23]                                                                     <
. . . . Child: 1 Const 3 of type int [line: 23]                                                                   <
. . . Child: 1 Compound [line: 23]                                                                                <
. . . . Child: 0 Var: x of type int [line: 24]                                                                    <
. . . . Child: 1 Assign: <- of type (null) [line: 25]                                                             <
. . . . . Child: 0 Id: x of type int [line: 25]                                                                   <
. . . . . Child: 1 Const 4 of type int [line: 25]                                                                 <
Sibling: 4 Func: elk returns type void [line: 28]                                                                 <
. Child: 0 Parm: x of type int [line: 28]                                                                         <
. Child: 1 Compound [line: 28]                                                                                    <
. . Child: 0 Var: x of type int [line: 29]                                                                        <
. . Child: 1 If [line: 30]                                                                                        <
. . . Child: 0 Op: > of type (null) [line: 30]                                                                    <
. . . . Child: 0 Id: x of type int [line: 30]                                                                     <
. . . . Child: 1 Const 3 of type int [line: 30]                                                                   <
. . . Child: 1 Compound [line: 30]                                                                                <
. . . . Child: 0 Var: x of type int [line: 31]                                                                    <
. . . . Child: 1 Assign: <- of type (null) [line: 31]                                                             <
. . . . . Child: 0 Id: x of type int [line: 31]                                                                   <
. . . . . Child: 1 Const 5 of type int [line: 31]                                                                 <
Sibling: 5 Func: fox returns type void [line: 35]                                                                 <
. Child: 0 Parm: x of type int [line: 35]                                                                         <
. Child: 1 Compound [line: 35]                                                                                    <
. . Child: 1 While [line: 36]                                                                                     <
. . . Child: 0 Const true of type bool [line: 36]                                                                 <
. . . Child: 1 If [line: 37]                                                                                      <
. . . . Child: 0 Op: > of type (null) [line: 37]                                                                  <
. . . . . Child: 0 Id: x of type int [line: 37]                                                                   <
. . . . . Child: 1 Const 3 of type int [line: 37]                                                                 <
. . . . Child: 1 Compound [line: 37]                                                                              <
. . . . . Child: 0 Var: x of type int [line: 38]                                                                  <
. . . . . Child: 1 Assign: <- of type (null) [line: 38]                                                           <
. . . . . . Child: 0 Id: x of type int [line: 38]                                                                 <
. . . . . . Child: 1 Const 6 of type int [line: 38]                                                               <
. . . . Child: 2 Compound [line: 40]                                                                              <
. . . . . Child: 0 Var: x of type int [line: 41]                                                                  <
. . . . . Child: 1 Assign: <- of type (null) [line: 41]                                                           <
. . . . . . Child: 0 Id: x of type int [line: 41]                                                                 <
. . . . . . Child: 1 Const 7 of type int [line: 41]                                                               <
Sibling: 6 Func: gnu returns type void [line: 45]                                                                 <
. Child: 0 Parm: x of type int [line: 45]                                                                         <
. Child: 1 Compound [line: 45]                                                                                    <
. . Child: 1 While [line: 46]                                                                                     <
. . . Child: 0 Const true of type bool [line: 46]                                                                 <
. . . Child: 1 If [line: 47]                                                                                      <
. . . . Child: 0 Op: > of type (null) [line: 47]                                                                  <
. . . . . Child: 0 Id: x of type int [line: 47]                                                                   <
. . . . . Child: 1 Const 3 of type int [line: 47]                                                                 <
. . . . Child: 1 Const 666 of type int [line: 47]                                                                 <
. . . . Child: 2 Compound [line: 48]                                                                              <
. . . . . Child: 0 Var: x of type int [line: 49]                                                                  <
. . . . . Child: 1 Assign: <- of type (null) [line: 49]                                                           <
. . . . . . Child: 0 Id: x of type int [line: 49]                                                                 <
. . . . . . Child: 1 Const 7 of type int [line: 49]                                                               <
Number of warnings: 0                                                                                             <
Number of errors: 16                                                                                              <

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P if.c-                                                                                                           ./c- -P if.c-
ERROR(8) : Unary '++' requires an operand of type int but was given type (null).                                  <
ERROR(10) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(10) : Unary '++' requires an operand of type int but was given type (null).                                 <
ERROR(11) : Unary '--' requires an operand of type int but was given type (null).                                 <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
x:                                                                                                                <
=========== ============ ===========                                                                              <
ID: x ParentID: <-                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: <-                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: <-                                                                                                <
yes, we found ID: x                                                                                               <
Func: main returns type void [line: 2]                                                                                  Func: main returns type void [line: 2]
. Child: 1 Compound [line: 3]                                                                                           . Child: 1 Compound [line: 3]
. . Child: 0 Var: x of type int [line: 4]                                                                               . . Child: 0 Var: x of type int [line: 4]
. . Child: 1 Assign: <- of type int [line: 6]                                                                           . . Child: 1 Assign: <- of type int [line: 6]
. . . Child: 0 Id: x of type int [line: 6]                                                                              . . . Child: 0 Id: x of type int [line: 6]
. . . Child: 1 Const 0 of type int [line: 6]                                                                            . . . Child: 1 Const 0 of type int [line: 6]
. . Sibling: 1 If [line: 8]                                                                                             . . Sibling: 1 If [line: 8]
. . . Child: 0 Const false of type bool [line: 8]                                                                       . . . Child: 0 Const false of type bool [line: 8]
. . . Child: 1 Assign: ++ of type (null) [line: 8]                                                                |     . . . Child: 1 Assign: ++ of type int [line: 8]
. . . . Child: 0 Id: x of type int [line: 8]                                                                            . . . . Child: 0 Id: x of type int [line: 8]
. . Sibling: 2 If [line: 10]                                                                                            . . Sibling: 2 If [line: 10]
. . . Child: 0 Op: < of type (null) [line: 10]                                                                    |     . . . Child: 0 Op: < of type bool [line: 10]
. . . . Child: 0 Id: x of type int [line: 10]                                                                           . . . . Child: 0 Id: x of type int [line: 10]
. . . . Child: 1 Const 10 of type int [line: 10]                                                                        . . . . Child: 1 Const 10 of type int [line: 10]
. . . Child: 1 Assign: ++ of type (null) [line: 10]                                                               |     . . . Child: 1 Assign: ++ of type int [line: 10]
. . . . Child: 0 Id: x of type int [line: 10]                                                                           . . . . Child: 0 Id: x of type int [line: 10]
. . . Child: 2 Assign: -- of type (null) [line: 11]                                                               |     . . . Child: 2 Assign: -- of type int [line: 11]
. . . . Child: 0 Id: x of type int [line: 11]                                                                           . . . . Child: 0 Id: x of type int [line: 11]
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 4                                                                                               |     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P ifNest.c-                                                                                                       ./c- -P ifNest.c-
ERROR(10) : '>=' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     WARNING(6): Variable 'x' may be uninitialized when used here.
ERROR(13) : '>=' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     WARNING(8): Variable 'y' may be uninitialized when used here.
ERROR(17) : '>=' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     WARNING(11): Variable 'z' may be uninitialized when used here.
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
x:                                                                                                                <
y:                                                                                                                <
z:                                                                                                                <
=========== ============ ===========                                                                              <
ID: x ParentID: >=                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: >=                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: >=                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: if                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: if                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: if                                                                                                <
yes, we found ID: x                                                                                               <
ID: y ParentID: if                                                                                                <
yes, we found ID: y                                                                                               <
ID: y ParentID: if                                                                                                <
yes, we found ID: y                                                                                               <
ID: y ParentID: if                                                                                                <
yes, we found ID: y                                                                                               <
Func: main returns type void [line: 2]                                                                                  Func: main returns type void [line: 2]
. Child: 1 Compound [line: 3]                                                                                           . Child: 1 Compound [line: 3]
. . Child: 0 Var: x of type int [line: 4]                                                                               . . Child: 0 Var: x of type int [line: 4]
. . Sibling: 1 Var: y of type int [line: 4]                                                                             . . Sibling: 1 Var: y of type int [line: 4]
. . Sibling: 2 Var: z of type int [line: 4]                                                                             . . Sibling: 2 Var: z of type int [line: 4]
. . Child: 1 If [line: 6]                                                                                               . . Child: 1 If [line: 6]
. . . Child: 0 Op: >= of type bool [line: 6]                                                                            . . . Child: 0 Op: >= of type bool [line: 6]
. . . . Child: 0 Id: x of type int [line: 6]                                                                            . . . . Child: 0 Id: x of type int [line: 6]
. . . . Child: 1 Const 0 of type int [line: 6]                                                                          . . . . Child: 1 Const 0 of type int [line: 6]
. . . Child: 1 If [line: 7]                                                                                             . . . Child: 1 If [line: 7]
. . . . Child: 0 Const true of type bool [line: 7]                                                                      . . . . Child: 0 Const true of type bool [line: 7]
. . . . Child: 1 Id: x of type int [line: 7]                                                                            . . . . Child: 1 Id: x of type int [line: 7]
. . . . Child: 2 Id: y of type int [line: 8]                                                                            . . . . Child: 2 Id: y of type int [line: 8]
. . Sibling: 1 Const 111 of type int [line: 9]                                                                          . . Sibling: 1 Const 111 of type int [line: 9]
. . Sibling: 2 If [line: 10]                                                                                            . . Sibling: 2 If [line: 10]
. . . Child: 0 Op: >= of type (null) [line: 10]                                                                   |     . . . Child: 0 Op: >= of type bool [line: 10]
. . . . Child: 0 Id: y of type int [line: 10]                                                                           . . . . Child: 0 Id: y of type int [line: 10]
. . . . Child: 1 Const 0 of type int [line: 10]                                                                         . . . . Child: 1 Const 0 of type int [line: 10]
. . . Child: 1 Id: y of type int [line: 10]                                                                             . . . Child: 1 Id: y of type int [line: 10]
. . . Child: 2 If [line: 11]                                                                                            . . . Child: 2 If [line: 11]
. . . . Child: 0 Const true of type bool [line: 11]                                                                     . . . . Child: 0 Const true of type bool [line: 11]
. . . . Child: 1 Id: z of type int [line: 11]                                                                           . . . . Child: 1 Id: z of type int [line: 11]
. . Sibling: 3 Const 222 of type int [line: 12]                                                                         . . Sibling: 3 Const 222 of type int [line: 12]
. . Sibling: 4 If [line: 13]                                                                                            . . Sibling: 4 If [line: 13]
. . . Child: 0 Op: >= of type (null) [line: 13]                                                                   |     . . . Child: 0 Op: >= of type bool [line: 13]
. . . . Child: 0 Id: y of type int [line: 13]                                                                           . . . . Child: 0 Id: y of type int [line: 13]
. . . . Child: 1 Const 0 of type int [line: 13]                                                                         . . . . Child: 1 Const 0 of type int [line: 13]
. . . Child: 1 Id: y of type int [line: 13]                                                                             . . . Child: 1 Id: y of type int [line: 13]
. . . Child: 2 If [line: 14]                                                                                            . . . Child: 2 If [line: 14]
. . . . Child: 0 Const true of type bool [line: 14]                                                                     . . . . Child: 0 Const true of type bool [line: 14]
. . . . Child: 1 Id: z of type int [line: 14]                                                                           . . . . Child: 1 Id: z of type int [line: 14]
. . . . Child: 2 Id: x of type int [line: 15]                                                                           . . . . Child: 2 Id: x of type int [line: 15]
. . Sibling: 5 Const 333 of type int [line: 16]                                                                         . . Sibling: 5 Const 333 of type int [line: 16]
. . Sibling: 6 If [line: 17]                                                                                            . . Sibling: 6 If [line: 17]
. . . Child: 0 Op: >= of type (null) [line: 17]                                                                   |     . . . Child: 0 Op: >= of type bool [line: 17]
. . . . Child: 0 Id: x of type int [line: 17]                                                                           . . . . Child: 0 Id: x of type int [line: 17]
. . . . Child: 1 Const 0 of type int [line: 17]                                                                         . . . . Child: 1 Const 0 of type int [line: 17]
. . . Child: 1 If [line: 17]                                                                                            . . . Child: 1 If [line: 17]
. . . . Child: 0 Const true of type bool [line: 17]                                                                     . . . . Child: 0 Const true of type bool [line: 17]
. . . . Child: 1 Id: x of type int [line: 17]                                                                           . . . . Child: 1 Id: x of type int [line: 17]
. . . . Child: 2 Id: y of type int [line: 18]                                                                           . . . . Child: 2 Id: y of type int [line: 18]
. . . Child: 2 Id: z of type int [line: 19]                                                                             . . . Child: 2 Id: z of type int [line: 19]
Number of warnings: 0                                                                                             |     Number of warnings: 3
Number of errors: 3                                                                                               |     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P init.c-                                                                                                         ./c- -P init.c-
ERROR(13) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     WARNING(8): The variable 'b' seems not to be used.
=========== Symbol Table ===========                                                                              |     WARNING(9): The variable 'y' seems not to be used.
Scope: Global -----------------                                                                                   |     WARNING(10): The variable 'c' seems not to be used.
a:                                                                                                                |     Var: a is array of type int [line: 3]
main:                                                                                                             |     Sibling: 1 Var: x of type int [line: 4]
x:                                                                                                                |     . Child: 0 Const 666 of type int [line: 4]
Scope: main -----------------                                                                                     <
b:                                                                                                                <
c:                                                                                                                <
y:                                                                                                                <
z:                                                                                                                <
=========== ============ ===========                                                                              <
Var: a of array of type int [line: 3]                                                                             <
Sibling: 1 Init: : of type int [line: 4]                                                                          <
. Child: 0 Var: x of type (null) [line: 4]                                                                        <
. Child: 1 Const 666 of type int [line: 4]                                                                        <
Sibling: 2 Func: main returns type void [line: 6]                                                                       Sibling: 2 Func: main returns type void [line: 6]
. Child: 1 Compound [line: 7]                                                                                           . Child: 1 Compound [line: 7]
. . Child: 0 Var: b of array of type int [line: 8]                                                                |     . . Child: 0 Var: b is array of type int [line: 8]
. . Sibling: 1 Init: : of type int [line: 9]                                                                      |     . . Sibling: 1 Var: y of type int [line: 9]
. . . Child: 0 Var: y of type (null) [line: 9]                                                                    |     . . . Child: 0 Const 777 of type int [line: 9]
. . . Child: 1 Const 777 of type int [line: 9]                                                                    |     . . Sibling: 2 Var: c is array of type int [line: 10]
. . Sibling: 2 Var: c of array of type int [line: 10]                                                             |     . . Sibling: 3 Var: z of type int [line: 11]
. . Sibling: 3 Init: : of type int [line: 11]                                                                     |     . . . Child: 0 Const 888 of type int [line: 11]
. . . Child: 0 Var: z of type (null) [line: 11]                                                                   |     . . Child: 1 Assign: <- of type int [line: 13]
. . . Child: 1 Const 888 of type int [line: 11]                                                                   |     . . . Child: 0 Id: z of type int [line: 13]
. . Child: 1 Assign: <- of type (null) [line: 13]                                                                 <
. . . Child: 0 Id: z of type (null) [line: 13]                                                                    <
. . . Child: 1 Const 999 of type int [line: 13]                                                                         . . . Child: 1 Const 999 of type int [line: 13]
Number of warnings: 0                                                                                             |     Number of warnings: 3
Number of errors: 1                                                                                               |     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P init2.c-                                                                                                        ./c- -P init2.c-
ERROR(3) : '+' requires operands of type int but rhs is of type (null).                                           |     ERROR(12): Symbol 'output' is not declared.
ERROR(8) : '+' requires operands of type int but rhs is of type (null).                                           |     ERROR(13): Symbol 'output' is not declared.
ERROR(10) : '+' requires operands of type int but rhs is of type (null).                                          |     WARNING(13): Variable 'b' may be uninitialized when used here.
ERROR(12) : Symbol 'output' is not declared.                                                                      |     ERROR(14): Symbol 'output' is not declared.
ERROR(13) : Symbol 'output' is not declared.                                                                      |     ERROR(15): Symbol 'outnl' is not declared.
ERROR(14) : Symbol 'output' is not declared.                                                                      |     ERROR(17): Symbol 'output' is not declared.
ERROR(15) : Symbol 'outnl' is not declared.                                                                       |     ERROR(18): Symbol 'output' is not declared.
ERROR(17) : Symbol 'output' is not declared.                                                                      |     ERROR(19): Symbol 'output' is not declared.
ERROR(18) : Symbol 'output' is not declared.                                                                      |     ERROR(20): Symbol 'outnl' is not declared.
ERROR(19) : Symbol 'output' is not declared.                                                                      |     Number of warnings: 1
ERROR(20) : Symbol 'outnl' is not declared.                                                                       |     Number of errors: 8
ERROR(22) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
a:                                                                                                                <
main:                                                                                                             <
x:                                                                                                                <
Scope: main -----------------                                                                                     <
b:                                                                                                                <
c:                                                                                                                <
y:                                                                                                                <
z:                                                                                                                <
=========== ============ ===========                                                                              <
Var: a of array of type int [line: 2]                                                                             <
Sibling: 1 Init: : of type int [line: 3]                                                                          <
. Child: 0 Var: x of type (null) [line: 3]                                                                        <
. Child: 1 Op: + of type (null) [line: 3]                                                                         <
. . Child: 0 Const 666 of type int [line: 3]                                                                      <
. . Child: 1 Op: * of type (null) [line: 3]                                                                       <
. . . Child: 0 Const 777 of type int [line: 3]                                                                    <
. . . Child: 1 Const 888 of type int [line: 3]                                                                    <
Sibling: 2 Func: main returns type void [line: 5]                                                                 <
. Child: 1 Compound [line: 6]                                                                                     <
. . Child: 0 Var: b of array of type int [line: 7]                                                                <
. . Sibling: 1 Init: : of type int [line: 8]                                                                      <
. . . Child: 0 Var: y of type (null) [line: 8]                                                                    <
. . . Child: 1 Op: + of type (null) [line: 8]                                                                     <
. . . . Child: 0 Const 777 of type int [line: 8]                                                                  <
. . . . Child: 1 Op: * of type (null) [line: 8]                                                                   <
. . . . . Child: 0 Const 666 of type int [line: 8]                                                                <
. . . . . Child: 1 Const 888 of type int [line: 8]                                                                <
. . Sibling: 2 Var: c of array of type int [line: 9]                                                              <
. . Sibling: 3 Init: : of type int [line: 10]                                                                     <
. . . Child: 0 Var: z of type (null) [line: 10]                                                                   <
. . . Child: 1 Op: + of type (null) [line: 10]                                                                    <
. . . . Child: 0 Const 888 of type int [line: 10]                                                                 <
. . . . Child: 1 Op: * of type (null) [line: 10]                                                                  <
. . . . . Child: 0 Const 777 of type int [line: 10]                                                               <
. . . . . Child: 1 Const 666 of type int [line: 10]                                                               <
. . Child: 1 Call: output of type (null) [line: 12]                                                               <
. . . Child: 0 Op: sizeof of type (null) [line: 12]                                                               <
. . . . Child: 0 Id: a of type (null) [line: 12]                                                                  <
. . Sibling: 1 Call: output of type (null) [line: 13]                                                             <
. . . Child: 0 Op: sizeof of type (null) [line: 13]                                                               <
. . . . Child: 0 Id: b of type (null) [line: 13]                                                                  <
. . Sibling: 2 Call: output of type (null) [line: 14]                                                             <
. . . Child: 0 Op: sizeof of type (null) [line: 14]                                                               <
. . . . Child: 0 Id: c of type (null) [line: 14]                                                                  <
. . Sibling: 3 Call: outnl of type (null) [line: 15]                                                              <
. . Sibling: 4 Call: output of type (null) [line: 17]                                                             <
. . . Child: 0 Id: x of type (null) [line: 17]                                                                    <
. . Sibling: 5 Call: output of type (null) [line: 18]                                                             <
. . . Child: 0 Id: y of type (null) [line: 18]                                                                    <
. . Sibling: 6 Call: output of type (null) [line: 19]                                                             <
. . . Child: 0 Id: z of type (null) [line: 19]                                                                    <
. . Sibling: 7 Call: outnl of type (null) [line: 20]                                                              <
. . Sibling: 8 Assign: <- of type (null) [line: 22]                                                               <
. . . Child: 0 Id: z of type (null) [line: 22]                                                                    <
. . . Child: 1 Const 999 of type int [line: 22]                                                                   <
Number of warnings: 0                                                                                             <
Number of errors: 12                                                                                              <

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P init3.c-                                                                                                        ./c- -P init3.c-
ERROR(10) : Symbol 'output' is not declared.                                                                      |     ERROR(10): Symbol 'output' is not declared.
ERROR(11) : Symbol 'output' is not declared.                                                                      |     ERROR(11): Symbol 'output' is not declared.
ERROR(12) : Symbol 'output' is not declared.                                                                      |     ERROR(12): Symbol 'output' is not declared.
ERROR(13) : Symbol 'outputb' is not declared.                                                                     |     ERROR(13): Symbol 'outputb' is not declared.
ERROR(14) : Symbol 'outputc' is not declared.                                                                     |     ERROR(14): Symbol 'outputc' is not declared.
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
x:                                                                                                                <
Scope: main -----------------                                                                                     <
b:                                                                                                                <
c:                                                                                                                <
y:                                                                                                                <
z:                                                                                                                <
=========== ============ ===========                                                                              <
Init: : of type int [line: 2]                                                                                     <
. Child: 0 Var: x of type (null) [line: 2]                                                                        <
. Child: 1 Const 111 of type int [line: 2]                                                                        <
Sibling: 1 Func: main returns type void [line: 4]                                                                 <
. Child: 1 Compound [line: 4]                                                                                     <
. . Child: 0 Init: : of type int [line: 5]                                                                        <
. . . Child: 0 Var: y of type (null) [line: 5]                                                                    <
. . . Child: 1 Const 222 of type int [line: 5]                                                                    <
. . Sibling: 1 Init: : of type int [line: 6]                                                                      <
. . . Child: 0 Var: z of type (null) [line: 6]                                                                    <
. . . Child: 1 Const 333 of type int [line: 6]                                                                    <
. . Sibling: 2 Init: : of type bool [line: 7]                                                                     <
. . . Child: 0 Var: b of type (null) [line: 7]                                                                    <
. . . Child: 1 Const true of type bool [line: 7]                                                                  <
. . Sibling: 3 Init: : of type char [line: 8]                                                                     <
. . . Child: 0 Var: c of type (null) [line: 8]                                                                    <
. . . Child: 1 Const 'Z' of type char [line: 8]                                                                   <
. . Child: 1 Call: output of type (null) [line: 10]                                                               <
. . . Child: 0 Id: x of type (null) [line: 10]                                                                    <
. . Sibling: 1 Call: output of type (null) [line: 11]                                                             <
. . . Child: 0 Id: y of type (null) [line: 11]                                                                    <
. . Sibling: 2 Call: output of type (null) [line: 12]                                                             <
. . . Child: 0 Id: z of type (null) [line: 12]                                                                    <
. . Sibling: 3 Call: outputb of type (null) [line: 13]                                                            <
. . . Child: 0 Id: b of type (null) [line: 13]                                                                    <
. . Sibling: 4 Call: outputc of type (null) [line: 14]                                                            <
. . . Child: 0 Id: c of type (null) [line: 14]                                                                    <
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 5                                                                                                     Number of errors: 5

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P init4.c-                                                                                                        ./c- -P init4.c-
=========== Symbol Table ===========                                                                              |     WARNING(4): The variable 'y' seems not to be used.
Scope: Global -----------------                                                                                   |     WARNING(5): The variable 'roll' seems not to be used.
main:                                                                                                             <
Scope: main -----------------                                                                                     <
roll:                                                                                                             <
x:                                                                                                                <
y:                                                                                                                <
=========== ============ ===========                                                                              <
Func: main returns type int [line: 1]                                                                                   Func: main returns type int [line: 1]
. Child: 1 Compound [line: 2]                                                                                           . Child: 1 Compound [line: 2]
. . Child: 0 Init: : of type int [line: 3]                                                                        |     . . Child: 0 Var: x of type int [line: 3]
. . . Child: 0 Var: x of type (null) [line: 3]                                                                    |     . . . Child: 0 Op: * of type int [line: 3]
. . . Child: 1 Op: * of type int [line: 3]                                                                        <
. . . . Child: 0 Const 23 of type int [line: 3]                                                                         . . . . Child: 0 Const 23 of type int [line: 3]
. . . . Child: 1 Const 3 of type int [line: 3]                                                                          . . . . Child: 1 Const 3 of type int [line: 3]
. . Sibling: 1 Init: : of type int [line: 4]                                                                      |     . . Sibling: 1 Var: y of type int [line: 4]
. . . Child: 0 Var: y of type (null) [line: 4]                                                                    |     . . . Child: 0 Id: x of type int [line: 4]
. . . Child: 1 Id: x of type (null) [line: 4]                                                                     |     . . Sibling: 2 Var: roll of type int [line: 5]
. . Sibling: 2 Init: : of type int [line: 5]                                                                      |     . . . Child: 0 Op: ? of type int [line: 5]
. . . Child: 0 Var: roll of type (null) [line: 5]                                                                 <
. . . Child: 1 Op: ? of type (null) [line: 5]                                                                     <
. . . . Child: 0 Const 6 of type int [line: 5]                                                                          . . . . Child: 0 Const 6 of type int [line: 5]
. . Child: 1 Const 333 of type int [line: 6]                                                                            . . Child: 1 Const 333 of type int [line: 6]
. . Sibling: 1 Const 'z' of type char [line: 7]                                                                         . . Sibling: 1 Const 'z' of type char [line: 7]
. . Sibling: 2 Const true of type bool [line: 8]                                                                        . . Sibling: 2 Const true of type bool [line: 8]
Number of warnings: 0                                                                                             |     Number of warnings: 2
Number of errors: 0                                                                                                     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P mixedControl.c-                                                                                                 ./c- -P mixedControl.c-
ERROR(10) : '>=' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     WARNING(6): Variable 'x' may be uninitialized when used here.
ERROR(13) : '>=' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     WARNING(8): Variable 'y' may be uninitialized when used here.
ERROR(18) : '>=' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     WARNING(11): Variable 'z' may be uninitialized when used here.
ERROR(24) : '>=' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
x:                                                                                                                <
y:                                                                                                                <
z:                                                                                                                <
=========== ============ ===========                                                                              <
ID: x ParentID: >=                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: >=                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: >=                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: while                                                                                             <
yes, we found ID: x                                                                                               <
ID: x ParentID: while                                                                                             <
yes, we found ID: x                                                                                               <
ID: x ParentID: while                                                                                             <
yes, we found ID: x                                                                                               <
ID: y ParentID: if                                                                                                <
yes, we found ID: y                                                                                               <
ID: y ParentID: if                                                                                                <
yes, we found ID: y                                                                                               <
ID: y ParentID: if                                                                                                <
yes, we found ID: y                                                                                               <
Func: main returns type void [line: 2]                                                                                  Func: main returns type void [line: 2]
. Child: 1 Compound [line: 3]                                                                                           . Child: 1 Compound [line: 3]
. . Child: 0 Var: x of type int [line: 4]                                                                               . . Child: 0 Var: x of type int [line: 4]
. . Sibling: 1 Var: y of type int [line: 4]                                                                             . . Sibling: 1 Var: y of type int [line: 4]
. . Sibling: 2 Var: z of type int [line: 4]                                                                             . . Sibling: 2 Var: z of type int [line: 4]
. . Child: 1 If [line: 6]                                                                                               . . Child: 1 If [line: 6]
. . . Child: 0 Op: >= of type bool [line: 6]                                                                            . . . Child: 0 Op: >= of type bool [line: 6]
. . . . Child: 0 Id: x of type int [line: 6]                                                                            . . . . Child: 0 Id: x of type int [line: 6]
. . . . Child: 1 Const 0 of type int [line: 6]                                                                          . . . . Child: 1 Const 0 of type int [line: 6]
. . . Child: 1 While [line: 7]                                                                                          . . . Child: 1 While [line: 7]
. . . . Child: 0 Const true of type bool [line: 7]                                                                      . . . . Child: 0 Const true of type bool [line: 7]
. . . . Child: 1 Id: x of type int [line: 7]                                                                            . . . . Child: 1 Id: x of type int [line: 7]
. . . Child: 2 Id: y of type int [line: 8]                                                                              . . . Child: 2 Id: y of type int [line: 8]
. . Sibling: 1 Const 111 of type int [line: 9]                                                                          . . Sibling: 1 Const 111 of type int [line: 9]
. . Sibling: 2 If [line: 10]                                                                                            . . Sibling: 2 If [line: 10]
. . . Child: 0 Op: >= of type (null) [line: 10]                                                                   |     . . . Child: 0 Op: >= of type bool [line: 10]
. . . . Child: 0 Id: y of type int [line: 10]                                                                           . . . . Child: 0 Id: y of type int [line: 10]
. . . . Child: 1 Const 0 of type int [line: 10]                                                                         . . . . Child: 1 Const 0 of type int [line: 10]
. . . Child: 1 Id: y of type int [line: 10]                                                                             . . . Child: 1 Id: y of type int [line: 10]
. . . Child: 2 While [line: 11]                                                                                         . . . Child: 2 While [line: 11]
. . . . Child: 0 Const true of type bool [line: 11]                                                                     . . . . Child: 0 Const true of type bool [line: 11]
. . . . Child: 1 Id: z of type int [line: 11]                                                                           . . . . Child: 1 Id: z of type int [line: 11]
. . Sibling: 3 Const 222 of type int [line: 12]                                                                         . . Sibling: 3 Const 222 of type int [line: 12]
. . Sibling: 4 If [line: 13]                                                                                            . . Sibling: 4 If [line: 13]
. . . Child: 0 Op: >= of type (null) [line: 13]                                                                   |     . . . Child: 0 Op: >= of type bool [line: 13]
. . . . Child: 0 Id: y of type int [line: 13]                                                                           . . . . Child: 0 Id: y of type int [line: 13]
. . . . Child: 1 Const 0 of type int [line: 13]                                                                         . . . . Child: 1 Const 0 of type int [line: 13]
. . . Child: 1 Id: y of type int [line: 13]                                                                             . . . Child: 1 Id: y of type int [line: 13]
. . Sibling: 5 While [line: 14]                                                                                         . . Sibling: 5 While [line: 14]
. . . Child: 0 Const true of type bool [line: 14]                                                                       . . . Child: 0 Const true of type bool [line: 14]
. . . Child: 1 If [line: 15]                                                                                            . . . Child: 1 If [line: 15]
. . . . Child: 0 Const true of type bool [line: 15]                                                                     . . . . Child: 0 Const true of type bool [line: 15]
. . . . Child: 1 Id: z of type int [line: 15]                                                                           . . . . Child: 1 Id: z of type int [line: 15]
. . . . Child: 2 Id: x of type int [line: 16]                                                                           . . . . Child: 2 Id: x of type int [line: 16]
. . Sibling: 6 Const 333 of type int [line: 17]                                                                         . . Sibling: 6 Const 333 of type int [line: 17]
. . Sibling: 7 If [line: 18]                                                                                            . . Sibling: 7 If [line: 18]
. . . Child: 0 Op: >= of type (null) [line: 18]                                                                   |     . . . Child: 0 Op: >= of type bool [line: 18]
. . . . Child: 0 Id: x of type int [line: 18]                                                                           . . . . Child: 0 Id: x of type int [line: 18]
. . . . Child: 1 Const 0 of type int [line: 18]                                                                         . . . . Child: 1 Const 0 of type int [line: 18]
. . . Child: 1 While [line: 19]                                                                                         . . . Child: 1 While [line: 19]
. . . . Child: 0 Const true of type bool [line: 19]                                                                     . . . . Child: 0 Const true of type bool [line: 19]
. . . . Child: 1 If [line: 20]                                                                                          . . . . Child: 1 If [line: 20]
. . . . . Child: 0 Const true of type bool [line: 20]                                                                   . . . . . Child: 0 Const true of type bool [line: 20]
. . . . . Child: 1 Id: x of type int [line: 20]                                                                         . . . . . Child: 1 Id: x of type int [line: 20]
. . . . . Child: 2 Id: y of type int [line: 21]                                                                         . . . . . Child: 2 Id: y of type int [line: 21]
. . . Child: 2 Id: z of type int [line: 22]                                                                             . . . Child: 2 Id: z of type int [line: 22]
. . Sibling: 8 Const 444 of type int [line: 23]                                                                         . . Sibling: 8 Const 444 of type int [line: 23]
. . Sibling: 9 If [line: 24]                                                                                            . . Sibling: 9 If [line: 24]
. . . Child: 0 Op: >= of type (null) [line: 24]                                                                   |     . . . Child: 0 Op: >= of type bool [line: 24]
. . . . Child: 0 Id: x of type int [line: 24]                                                                           . . . . Child: 0 Id: x of type int [line: 24]
. . . . Child: 1 Const 0 of type int [line: 24]                                                                         . . . . Child: 1 Const 0 of type int [line: 24]
. . . Child: 1 Id: z of type int [line: 24]                                                                             . . . Child: 1 Id: z of type int [line: 24]
. . . Child: 2 If [line: 26]                                                                                            . . . Child: 2 If [line: 26]
. . . . Child: 0 Const true of type bool [line: 26]                                                                     . . . . Child: 0 Const true of type bool [line: 26]
. . . . Child: 1 While [line: 27]                                                                                       . . . . Child: 1 While [line: 27]
. . . . . Child: 0 Const true of type bool [line: 27]                                                                   . . . . . Child: 0 Const true of type bool [line: 27]
. . . . . Child: 1 If [line: 28]                                                                                        . . . . . Child: 1 If [line: 28]
. . . . . . Child: 0 Const true of type bool [line: 28]                                                                 . . . . . . Child: 0 Const true of type bool [line: 28]
. . . . . . Child: 1 Id: x of type int [line: 28]                                                                       . . . . . . Child: 1 Id: x of type int [line: 28]
. . . . . . Child: 2 Id: y of type int [line: 29]                                                                       . . . . . . Child: 2 Id: y of type int [line: 29]
. . . . Child: 2 Id: z of type int [line: 30]                                                                           . . . . Child: 2 Id: z of type int [line: 30]
Number of warnings: 0                                                                                             |     Number of warnings: 3
Number of errors: 4                                                                                               |     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P mixedControl2.c-                                                                                                ./c- -P mixedControl2.c-
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
=========== ============ ===========                                                                              <
Func: main returns type void [line: 2]                                                                                  Func: main returns type void [line: 2]
. Child: 1 Compound [line: 3]                                                                                           . Child: 1 Compound [line: 3]
. . Child: 1 If [line: 4]                                                                                               . . Child: 1 If [line: 4]
. . . Child: 0 Const 111 of type int [line: 4]                                                                          . . . Child: 0 Const 111 of type int [line: 4]
. . . Child: 1 While [line: 5]                                                                                          . . . Child: 1 While [line: 5]
. . . . Child: 0 Const 222 of type int [line: 5]                                                                        . . . . Child: 0 Const 222 of type int [line: 5]
. . . . Child: 1 If [line: 6]                                                                                           . . . . Child: 1 If [line: 6]
. . . . . Child: 0 Const 333 of type int [line: 6]                                                                      . . . . . Child: 0 Const 333 of type int [line: 6]
. . . . . Child: 1 While [line: 7]                                                                                      . . . . . Child: 1 While [line: 7]
. . . . . . Child: 0 Const 444 of type int [line: 7]                                                                    . . . . . . Child: 0 Const 444 of type int [line: 7]
. . . . . . Child: 1 Const 555 of type int [line: 7]                                                                    . . . . . . Child: 1 Const 555 of type int [line: 7]
. . . . . Child: 2 Const 666 of type int [line: 8]                                                                      . . . . . Child: 2 Const 666 of type int [line: 8]
. . . Child: 2 Const 777 of type int [line: 9]                                                                          . . . Child: 2 Const 777 of type int [line: 9]
. . Sibling: 1 If [line: 11]                                                                                            . . Sibling: 1 If [line: 11]
. . . Child: 0 Const 111 of type int [line: 11]                                                                         . . . Child: 0 Const 111 of type int [line: 11]
. . . Child: 1 While [line: 12]                                                                                         . . . Child: 1 While [line: 12]
. . . . Child: 0 Const 222 of type int [line: 12]                                                                       . . . . Child: 0 Const 222 of type int [line: 12]
. . . . Child: 1 Const 333 of type int [line: 12]                                                                       . . . . Child: 1 Const 333 of type int [line: 12]
. . . Child: 2 While [line: 14]                                                                                         . . . Child: 2 While [line: 14]
. . . . Child: 0 Const 444 of type int [line: 14]                                                                       . . . . Child: 0 Const 444 of type int [line: 14]
. . . . Child: 1 Const 555 of type int [line: 14]                                                                       . . . . Child: 1 Const 555 of type int [line: 14]
. . Sibling: 2 If [line: 16]                                                                                            . . Sibling: 2 If [line: 16]
. . . Child: 0 Const 111 of type int [line: 16]                                                                         . . . Child: 0 Const 111 of type int [line: 16]
. . . Child: 1 While [line: 17]                                                                                         . . . Child: 1 While [line: 17]
. . . . Child: 0 Const 222 of type int [line: 17]                                                                       . . . . Child: 0 Const 222 of type int [line: 17]
. . . . Child: 1 While [line: 18]                                                                                       . . . . Child: 1 While [line: 18]
. . . . . Child: 0 Const 444 of type int [line: 18]                                                                     . . . . . Child: 0 Const 444 of type int [line: 18]
. . . . . Child: 1 Const 555 of type int [line: 18]                                                                     . . . . . Child: 1 Const 555 of type int [line: 18]
. . . Child: 2 Const 666 of type int [line: 19]                                                                         . . . Child: 2 Const 666 of type int [line: 19]
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 0                                                                                                     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P mixedControl3.c-                                                                                                ./c- -P mixedControl3.c-
ERROR(7) : Symbol 'x' is already declared.                                                                        |     WARNING(4): The variable 'x' seems not to be used.
ERROR(9) : Symbol 'x' is already declared.                                                                        |     WARNING(7): The variable 'x' seems not to be used.
ERROR(14) : '*' requires operands of type int but lhs is of type (null).                                          |     WARNING(9): The variable 'x' seems not to be used.
ERROR(14) : Symbol 'x' is already declared.                                                                       |     WARNING(14): The variable 'x' seems not to be used.
ERROR(16) : Symbol 'x' is already declared.                                                                       |     WARNING(16): The variable 'x' seems not to be used.
ERROR(19) : Symbol 'x' is already declared.                                                                       |     WARNING(19): The variable 'x' seems not to be used.
ERROR(20) : Symbol 'x' is already declared.                                                                       |     WARNING(20): The variable 'x' seems not to be used.
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
x:                                                                                                                <
=========== ============ ===========                                                                              <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: to                                                                                                <
yes, we found ID: x                                                                                               <
Func: main returns type void [line: 2]                                                                                  Func: main returns type void [line: 2]
. Child: 1 Compound [line: 3]                                                                                           . Child: 1 Compound [line: 3]
. . Child: 0 Var: x of type int [line: 4]                                                                               . . Child: 0 Var: x of type int [line: 4]
. . Child: 1 If [line: 6]                                                                                               . . Child: 1 If [line: 6]
. . . Child: 0 Const 111 of type int [line: 6]                                                                          . . . Child: 0 Const 111 of type int [line: 6]
. . . Child: 1 For [line: 7]                                                                                            . . . Child: 1 For [line: 7]
. . . . Child: 0 Var: x of type int [line: 7]                                                                           . . . . Child: 0 Var: x of type int [line: 7]
. . . . Child: 1 Range [line: 7]                                                                                        . . . . Child: 1 Range [line: 7]
. . . . . Child: 0 Id: x of type int [line: 7]                                                                    |     . . . . . Child: 0 Id: x of undefined type [line: 7]
. . . . . Child: 1 Id: x of type int [line: 7]                                                                    |     . . . . . Child: 1 Id: x of undefined type [line: 7]
. . . . . Child: 2 Id: x of type int [line: 7]                                                                    |     . . . . . Child: 2 Id: x of undefined type [line: 7]
. . . . Child: 2 If [line: 8]                                                                                           . . . . Child: 2 If [line: 8]
. . . . . Child: 0 Const 333 of type int [line: 8]                                                                      . . . . . Child: 0 Const 333 of type int [line: 8]
. . . . . Child: 1 For [line: 9]                                                                                        . . . . . Child: 1 For [line: 9]
. . . . . . Child: 0 Var: x of type int [line: 9]                                                                       . . . . . . Child: 0 Var: x of type int [line: 9]
. . . . . . Child: 1 Range [line: 9]                                                                                    . . . . . . Child: 1 Range [line: 9]
. . . . . . . Child: 0 Const 1 of type int [line: 9]                                                                    . . . . . . . Child: 0 Const 1 of type int [line: 9]
. . . . . . . Child: 1 Id: x of type int [line: 9]                                                                |     . . . . . . . Child: 1 Id: x of undefined type [line: 9]
. . . . . . Child: 2 Const 555 of type int [line: 9]                                                                    . . . . . . Child: 2 Const 555 of type int [line: 9]
. . . . . Child: 2 Const 666 of type int [line: 10]                                                                     . . . . . Child: 2 Const 666 of type int [line: 10]
. . . Child: 2 Const 777 of type int [line: 11]                                                                         . . . Child: 2 Const 777 of type int [line: 11]
. . Sibling: 1 If [line: 13]                                                                                            . . Sibling: 1 If [line: 13]
. . . Child: 0 Const 111 of type int [line: 13]                                                                         . . . Child: 0 Const 111 of type int [line: 13]
. . . Child: 1 For [line: 14]                                                                                           . . . Child: 1 For [line: 14]
. . . . Child: 0 Var: x of type int [line: 14]                                                                          . . . . Child: 0 Var: x of type int [line: 14]
. . . . Child: 1 Range [line: 14]                                                                                       . . . . Child: 1 Range [line: 14]
. . . . . Child: 0 Const 1 of type int [line: 14]                                                                       . . . . . Child: 0 Const 1 of type int [line: 14]
. . . . . Child: 1 Const 2 of type int [line: 14]                                                                       . . . . . Child: 1 Const 2 of type int [line: 14]
. . . . . Child: 2 Op: * of type (null) [line: 14]                                                                |     . . . . . Child: 2 Op: * of undefined type [line: 14]
. . . . . . Child: 0 Id: x of type int [line: 14]                                                                 |     . . . . . . Child: 0 Id: x of undefined type [line: 14]
. . . . . . Child: 1 Id: x of type int [line: 14]                                                                 |     . . . . . . Child: 1 Id: x of undefined type [line: 14]
. . . . Child: 2 Const 333 of type int [line: 14]                                                                       . . . . Child: 2 Const 333 of type int [line: 14]
. . . Child: 2 For [line: 16]                                                                                           . . . Child: 2 For [line: 16]
. . . . Child: 0 Var: x of type int [line: 16]                                                                          . . . . Child: 0 Var: x of type int [line: 16]
. . . . Child: 1 Range [line: 16]                                                                                       . . . . Child: 1 Range [line: 16]
. . . . . Child: 0 Const 1 of type int [line: 16]                                                                       . . . . . Child: 0 Const 1 of type int [line: 16]
. . . . . Child: 1 Id: x of type int [line: 16]                                                                   |     . . . . . Child: 1 Id: x of undefined type [line: 16]
. . . . Child: 2 Const 555 of type int [line: 16]                                                                       . . . . Child: 2 Const 555 of type int [line: 16]
. . Sibling: 2 If [line: 18]                                                                                            . . Sibling: 2 If [line: 18]
. . . Child: 0 Const 111 of type int [line: 18]                                                                         . . . Child: 0 Const 111 of type int [line: 18]
. . . Child: 1 For [line: 19]                                                                                           . . . Child: 1 For [line: 19]
. . . . Child: 0 Var: x of type int [line: 19]                                                                          . . . . Child: 0 Var: x of type int [line: 19]
. . . . Child: 1 Range [line: 19]                                                                                       . . . . Child: 1 Range [line: 19]
. . . . . Child: 0 Const 1 of type int [line: 19]                                                                       . . . . . Child: 0 Const 1 of type int [line: 19]
. . . . . Child: 1 Const 10 of type int [line: 19]                                                                      . . . . . Child: 1 Const 10 of type int [line: 19]
. . . . Child: 2 For [line: 20]                                                                                         . . . . Child: 2 For [line: 20]
. . . . . Child: 0 Var: x of type int [line: 20]                                                                        . . . . . Child: 0 Var: x of type int [line: 20]
. . . . . Child: 1 Range [line: 20]                                                                                     . . . . . Child: 1 Range [line: 20]
. . . . . . Child: 0 Id: x of type int [line: 20]                                                                 |     . . . . . . Child: 0 Id: x of undefined type [line: 20]
. . . . . . Child: 1 Const 10 of type int [line: 20]                                                                    . . . . . . Child: 1 Const 10 of type int [line: 20]
. . . . . Child: 2 Const 555 of type int [line: 20]                                                                     . . . . . Child: 2 Const 555 of type int [line: 20]
. . . Child: 2 Const 666 of type int [line: 21]                                                                         . . . Child: 2 Const 666 of type int [line: 21]
Number of warnings: 0                                                                                             |     Number of warnings: 7
Number of errors: 7                                                                                               |     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P nest.c-                                                                                                         ./c- -P nest.c-
ERROR(13) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(18): Symbol 'output' is not declared.
ERROR(14) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(19): Symbol 'output' is not declared.
ERROR(15) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(20): Symbol 'output' is not declared.
ERROR(16) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(21): Symbol 'output' is not declared.
ERROR(18) : Symbol 'output' is not declared.                                                                      |     ERROR(22): Symbol 'output' is not declared.
ERROR(19) : Symbol 'output' is not declared.                                                                      |     ERROR(23): Symbol 'outnl' is not declared.
ERROR(20) : Symbol 'output' is not declared.                                                                      |     ERROR(43): Symbol 'output' is not declared.
ERROR(21) : Symbol 'output' is not declared.                                                                      |     ERROR(44): Symbol 'output' is not declared.
ERROR(22) : Symbol 'output' is not declared.                                                                      |     ERROR(45): Symbol 'output' is not declared.
ERROR(23) : Symbol 'outnl' is not declared.                                                                       |     ERROR(46): Symbol 'output' is not declared.
ERROR(24) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(47): Symbol 'output' is not declared.
ERROR(25) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(48): Symbol 'outnl' is not declared.
ERROR(26) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(58): Symbol 'output' is not declared.
ERROR(27) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(59): Symbol 'output' is not declared.
ERROR(28) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(60): Symbol 'output' is not declared.
ERROR(37) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(61): Symbol 'output' is not declared.
ERROR(38) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(62): Symbol 'output' is not declared.
ERROR(39) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(63): Symbol 'outnl' is not declared.
ERROR(40) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(70): Symbol 'output' is not declared.
ERROR(41) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(71): Symbol 'output' is not declared.
ERROR(43) : Symbol 'output' is not declared.                                                                      |     ERROR(72): Symbol 'output' is not declared.
ERROR(44) : Symbol 'output' is not declared.                                                                      |     ERROR(73): Symbol 'output' is not declared.
ERROR(45) : Symbol 'output' is not declared.                                                                      |     ERROR(74): Symbol 'output' is not declared.
ERROR(46) : Symbol 'output' is not declared.                                                                      |     ERROR(75): Symbol 'outnl' is not declared.
ERROR(47) : Symbol 'output' is not declared.                                                                      |     ERROR(77): Symbol 'output' is not declared.
ERROR(48) : Symbol 'outnl' is not declared.                                                                       |     ERROR(78): Symbol 'output' is not declared.
ERROR(54) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(79): Symbol 'output' is not declared.
ERROR(55) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(80): Symbol 'output' is not declared.
ERROR(56) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(81): Symbol 'output' is not declared.
ERROR(58) : Symbol 'output' is not declared.                                                                      |     ERROR(82): Symbol 'outnl' is not declared.
ERROR(59) : Symbol 'output' is not declared.                                                                      |     ERROR(89): Symbol 'output' is not declared.
ERROR(60) : Symbol 'output' is not declared.                                                                      |     ERROR(90): Symbol 'output' is not declared.
ERROR(61) : Symbol 'output' is not declared.                                                                      |     ERROR(91): Symbol 'output' is not declared.
ERROR(62) : Symbol 'output' is not declared.                                                                      |     ERROR(92): Symbol 'output' is not declared.
ERROR(63) : Symbol 'outnl' is not declared.                                                                       |     ERROR(93): Symbol 'output' is not declared.
ERROR(65) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(94): Symbol 'outnl' is not declared.
ERROR(66) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(97): Symbol 'output' is not declared.
ERROR(67) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(98): Symbol 'output' is not declared.
ERROR(68) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(99): Symbol 'output' is not declared.
ERROR(69) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(100): Symbol 'output' is not declared.
ERROR(70) : Symbol 'output' is not declared.                                                                      |     ERROR(101): Symbol 'output' is not declared.
ERROR(71) : Symbol 'output' is not declared.                                                                      |     ERROR(102): Symbol 'outnl' is not declared.
ERROR(72) : Symbol 'output' is not declared.                                                                      |     ERROR(106): Symbol 'output' is not declared.
ERROR(73) : Symbol 'output' is not declared.                                                                      |     ERROR(107): Symbol 'output' is not declared.
ERROR(74) : Symbol 'output' is not declared.                                                                      |     ERROR(108): Symbol 'output' is not declared.
ERROR(75) : Symbol 'outnl' is not declared.                                                                       |     ERROR(109): Symbol 'output' is not declared.
ERROR(77) : Symbol 'output' is not declared.                                                                      |     ERROR(110): Symbol 'output' is not declared.
ERROR(78) : Symbol 'output' is not declared.                                                                      |     ERROR(111): Symbol 'outnl' is not declared.
ERROR(79) : Symbol 'output' is not declared.                                                                      <
ERROR(80) : Symbol 'output' is not declared.                                                                      <
ERROR(81) : Symbol 'output' is not declared.                                                                      <
ERROR(82) : Symbol 'outnl' is not declared.                                                                       <
ERROR(84) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(85) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(86) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(87) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(88) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(89) : Symbol 'output' is not declared.                                                                      <
ERROR(90) : Symbol 'output' is not declared.                                                                      <
ERROR(91) : Symbol 'output' is not declared.                                                                      <
ERROR(92) : Symbol 'output' is not declared.                                                                      <
ERROR(93) : Symbol 'output' is not declared.                                                                      <
ERROR(94) : Symbol 'outnl' is not declared.                                                                       <
ERROR(97) : Symbol 'output' is not declared.                                                                      <
ERROR(98) : Symbol 'output' is not declared.                                                                      <
ERROR(99) : Symbol 'output' is not declared.                                                                      <
ERROR(100) : Symbol 'output' is not declared.                                                                     <
ERROR(101) : Symbol 'output' is not declared.                                                                     <
ERROR(102) : Symbol 'outnl' is not declared.                                                                      <
ERROR(106) : Symbol 'output' is not declared.                                                                     <
ERROR(107) : Symbol 'output' is not declared.                                                                     <
ERROR(108) : Symbol 'output' is not declared.                                                                     <
ERROR(109) : Symbol 'output' is not declared.                                                                     <
ERROR(110) : Symbol 'output' is not declared.                                                                     <
ERROR(111) : Symbol 'outnl' is not declared.                                                                      <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
agamemnon:                                                                                                        <
x:                                                                                                                <
y:                                                                                                                <
z:                                                                                                                <
Scope: agamemnon -----------------                                                                                <
a:                                                                                                                <
b:                                                                                                                <
main:                                                                                                             <
x:                                                                                                                <
Scope: main -----------------                                                                                     <
a:                                                                                                                <
b:                                                                                                                <
z:                                                                                                                <
=========== ============ ===========                                                                              <
Var: x of type int [line: 3]                                                                                      <
Sibling: 1 Var: y of type int [line: 4]                                                                           <
Sibling: 2 Var: z of type int [line: 5]                                                                           <
Sibling: 3 Func: agamemnon returns type void [line: 7]                                                            <
. Child: 1 Compound [line: 8]                                                                                     <
. . Child: 0 Var: a of type int [line: 9]                                                                         <
. . Sibling: 1 Var: b of type int [line: 10]                                                                      <
. . Sibling: 2 Var: x of type int [line: 11]                                                                      <
. . Child: 1 Assign: <- of type (null) [line: 13]                                                                 <
. . . Child: 0 Id: a of type int [line: 13]                                                                       <
. . . Child: 1 Const 666 of type int [line: 13]                                                                   <
. . Sibling: 1 Assign: <- of type (null) [line: 14]                                                               <
. . . Child: 0 Id: b of type int [line: 14]                                                                       <
. . . Child: 1 Const 666 of type int [line: 14]                                                                   <
. . Sibling: 2 Assign: <- of type (null) [line: 15]                                                               <
. . . Child: 0 Id: x of type int [line: 15]                                                                       <
. . . Child: 1 Const 666 of type int [line: 15]                                                                   <
. . Sibling: 3 Assign: <- of type (null) [line: 16]                                                               <
. . . Child: 0 Id: z of type int [line: 16]                                                                       <
. . . Child: 1 Const 666 of type int [line: 16]                                                                   <
. . Sibling: 4 Call: output of type (null) [line: 18]                                                             <
. . . Child: 0 Id: a of type (null) [line: 18]                                                                    <
. . Sibling: 5 Call: output of type (null) [line: 19]                                                             <
. . . Child: 0 Id: b of type (null) [line: 19]                                                                    <
. . Sibling: 6 Call: output of type (null) [line: 20]                                                             <
. . . Child: 0 Id: x of type (null) [line: 20]                                                                    <
. . Sibling: 7 Call: output of type (null) [line: 21]                                                             <
. . . Child: 0 Id: y of type (null) [line: 21]                                                                    <
. . Sibling: 8 Call: output of type (null) [line: 22]                                                             <
. . . Child: 0 Id: z of type (null) [line: 22]                                                                    <
. . Sibling: 9 Call: outnl of type (null) [line: 23]                                                              <
. . Sibling: 10 Assign: <- of type (null) [line: 24]                                                              <
. . . Child: 0 Id: a of type int [line: 24]                                                                       <
. . . Child: 1 Const 1 of type int [line: 24]                                                                     <
. . Sibling: 11 Assign: <- of type (null) [line: 25]                                                              <
. . . Child: 0 Id: b of type int [line: 25]                                                                       <
. . . Child: 1 Const 2 of type int [line: 25]                                                                     <
. . Sibling: 12 Assign: <- of type (null) [line: 26]                                                              <
. . . Child: 0 Id: x of type int [line: 26]                                                                       <
. . . Child: 1 Const 3 of type int [line: 26]                                                                     <
. . Sibling: 13 Assign: <- of type (null) [line: 27]                                                              <
. . . Child: 0 Id: y of type int [line: 27]                                                                       <
. . . Child: 1 Const 4 of type int [line: 27]                                                                     <
. . Sibling: 14 Assign: <- of type (null) [line: 28]                                                              <
. . . Child: 0 Id: z of type int [line: 28]                                                                       <
. . . Child: 1 Const 5 of type int [line: 28]                                                                     <
Sibling: 4 Func: main returns type void [line: 31]                                                                <
. Child: 1 Compound [line: 32]                                                                                    <
. . Child: 0 Var: a of type int [line: 33]                                                                        <
. . Sibling: 1 Var: b of type int [line: 34]                                                                      <
. . Sibling: 2 Var: z of type int [line: 35]                                                                      <
. . Child: 1 Assign: <- of type (null) [line: 37]                                                                 <
. . . Child: 0 Id: a of type int [line: 37]                                                                       <
. . . Child: 1 Const 6 of type int [line: 37]                                                                     <
. . Sibling: 1 Assign: <- of type (null) [line: 38]                                                               <
. . . Child: 0 Id: b of type int [line: 38]                                                                       <
. . . Child: 1 Const 7 of type int [line: 38]                                                                     <
. . Sibling: 2 Assign: <- of type (null) [line: 39]                                                               <
. . . Child: 0 Id: x of type int [line: 39]                                                                       <
. . . Child: 1 Const 8 of type int [line: 39]                                                                     <
. . Sibling: 3 Assign: <- of type (null) [line: 40]                                                               <
. . . Child: 0 Id: y of type int [line: 40]                                                                       <
. . . Child: 1 Const 9 of type int [line: 40]                                                                     <
. . Sibling: 4 Assign: <- of type (null) [line: 41]                                                               <
. . . Child: 0 Id: z of type int [line: 41]                                                                       <
. . . Child: 1 Const 10 of type int [line: 41]                                                                    <
. . Sibling: 5 Call: output of type (null) [line: 43]                                                             <
. . . Child: 0 Id: a of type (null) [line: 43]                                                                    <
. . Sibling: 6 Call: output of type (null) [line: 44]                                                             <
. . . Child: 0 Id: b of type (null) [line: 44]                                                                    <
. . Sibling: 7 Call: output of type (null) [line: 45]                                                             <
. . . Child: 0 Id: x of type (null) [line: 45]                                                                    <
. . Sibling: 8 Call: output of type (null) [line: 46]                                                             <
. . . Child: 0 Id: y of type (null) [line: 46]                                                                    <
. . Sibling: 9 Call: output of type (null) [line: 47]                                                             <
. . . Child: 0 Id: z of type (null) [line: 47]                                                                    <
. . Sibling: 10 Call: outnl of type (null) [line: 48]                                                             <
. . Sibling: 11 Compound [line: 49]                                                                               <
. . . Child: 0 Var: a of type int [line: 50]                                                                      <
. . . Sibling: 1 Var: b of type int [line: 51]                                                                    <
. . . Sibling: 2 Var: z of type int [line: 52]                                                                    <
. . . Child: 1 Assign: <- of type (null) [line: 54]                                                               <
. . . . Child: 0 Id: a of type int [line: 54]                                                                     <
. . . . Child: 1 Const 666 of type int [line: 54]                                                                 <
. . . Sibling: 1 Assign: <- of type (null) [line: 55]                                                             <
. . . . Child: 0 Id: b of type int [line: 55]                                                                     <
. . . . Child: 1 Const 666 of type int [line: 55]                                                                 <
. . . Sibling: 2 Assign: <- of type (null) [line: 56]                                                             <
. . . . Child: 0 Id: z of type int [line: 56]                                                                     <
. . . . Child: 1 Const 666 of type int [line: 56]                                                                 <
. . . Sibling: 3 Call: output of type (null) [line: 58]                                                           <
. . . . Child: 0 Id: a of type (null) [line: 58]                                                                  <
. . . Sibling: 4 Call: output of type (null) [line: 59]                                                           <
. . . . Child: 0 Id: b of type (null) [line: 59]                                                                  <
. . . Sibling: 5 Call: output of type (null) [line: 60]                                                           <
. . . . Child: 0 Id: x of type (null) [line: 60]                                                                  <
. . . Sibling: 6 Call: output of type (null) [line: 61]                                                           <
. . . . Child: 0 Id: y of type (null) [line: 61]                                                                  <
. . . Sibling: 7 Call: output of type (null) [line: 62]                                                           <
. . . . Child: 0 Id: z of type (null) [line: 62]                                                                  <
. . . Sibling: 8 Call: outnl of type (null) [line: 63]                                                            <
. . . Sibling: 9 Assign: <- of type (null) [line: 65]                                                             <
. . . . Child: 0 Id: a of type int [line: 65]                                                                     <
. . . . Child: 1 Const 11 of type int [line: 65]                                                                  <
. . . Sibling: 10 Assign: <- of type (null) [line: 66]                                                            <
. . . . Child: 0 Id: b of type int [line: 66]                                                                     <
. . . . Child: 1 Const 12 of type int [line: 66]                                                                  <
. . . Sibling: 11 Assign: <- of type (null) [line: 67]                                                            <
. . . . Child: 0 Id: x of type int [line: 67]                                                                     <
. . . . Child: 1 Const 13 of type int [line: 67]                                                                  <
. . . Sibling: 12 Assign: <- of type (null) [line: 68]                                                            <
. . . . Child: 0 Id: y of type int [line: 68]                                                                     <
. . . . Child: 1 Const 14 of type int [line: 68]                                                                  <
. . . Sibling: 13 Assign: <- of type (null) [line: 69]                                                            <
. . . . Child: 0 Id: z of type int [line: 69]                                                                     <
. . . . Child: 1 Const 15 of type int [line: 69]                                                                  <
. . . Sibling: 14 Call: output of type (null) [line: 70]                                                          <
. . . . Child: 0 Id: a of type (null) [line: 70]                                                                  <
. . . Sibling: 15 Call: output of type (null) [line: 71]                                                          <
. . . . Child: 0 Id: b of type (null) [line: 71]                                                                  <
. . . Sibling: 16 Call: output of type (null) [line: 72]                                                          <
. . . . Child: 0 Id: x of type (null) [line: 72]                                                                  <
. . . Sibling: 17 Call: output of type (null) [line: 73]                                                          <
. . . . Child: 0 Id: y of type (null) [line: 73]                                                                  <
. . . Sibling: 18 Call: output of type (null) [line: 74]                                                          <
. . . . Child: 0 Id: z of type (null) [line: 74]                                                                  <
. . . Sibling: 19 Call: outnl of type (null) [line: 75]                                                           <
. . . Sibling: 20 Compound [line: 76]                                                                             <
. . . . Child: 1 Call: output of type (null) [line: 77]                                                           <
. . . . . Child: 0 Id: a of type (null) [line: 77]                                                                <
. . . . Sibling: 1 Call: output of type (null) [line: 78]                                                         <
. . . . . Child: 0 Id: b of type (null) [line: 78]                                                                <
. . . . Sibling: 2 Call: output of type (null) [line: 79]                                                         <
. . . . . Child: 0 Id: x of type (null) [line: 79]                                                                <
. . . . Sibling: 3 Call: output of type (null) [line: 80]                                                         <
. . . . . Child: 0 Id: y of type (null) [line: 80]                                                                <
. . . . Sibling: 4 Call: output of type (null) [line: 81]                                                         <
. . . . . Child: 0 Id: z of type (null) [line: 81]                                                                <
. . . . Sibling: 5 Call: outnl of type (null) [line: 82]                                                          <
. . . . Sibling: 6 Assign: <- of type (null) [line: 84]                                                           <
. . . . . Child: 0 Id: a of type int [line: 84]                                                                   <
. . . . . Child: 1 Const 16 of type int [line: 84]                                                                <
. . . . Sibling: 7 Assign: <- of type (null) [line: 85]                                                           <
. . . . . Child: 0 Id: b of type int [line: 85]                                                                   <
. . . . . Child: 1 Const 17 of type int [line: 85]                                                                <
. . . . Sibling: 8 Assign: <- of type (null) [line: 86]                                                           <
. . . . . Child: 0 Id: x of type int [line: 86]                                                                   <
. . . . . Child: 1 Const 18 of type int [line: 86]                                                                <
. . . . Sibling: 9 Assign: <- of type (null) [line: 87]                                                           <
. . . . . Child: 0 Id: y of type int [line: 87]                                                                   <
. . . . . Child: 1 Const 19 of type int [line: 87]                                                                <
. . . . Sibling: 10 Assign: <- of type (null) [line: 88]                                                          <
. . . . . Child: 0 Id: z of type int [line: 88]                                                                   <
. . . . . Child: 1 Const 20 of type int [line: 88]                                                                <
. . . . Sibling: 11 Call: output of type (null) [line: 89]                                                        <
. . . . . Child: 0 Id: a of type (null) [line: 89]                                                                <
. . . . Sibling: 12 Call: output of type (null) [line: 90]                                                        <
. . . . . Child: 0 Id: b of type (null) [line: 90]                                                                <
. . . . Sibling: 13 Call: output of type (null) [line: 91]                                                        <
. . . . . Child: 0 Id: x of type (null) [line: 91]                                                                <
. . . . Sibling: 14 Call: output of type (null) [line: 92]                                                        <
. . . . . Child: 0 Id: y of type (null) [line: 92]                                                                <
. . . . Sibling: 15 Call: output of type (null) [line: 93]                                                        <
. . . . . Child: 0 Id: z of type (null) [line: 93]                                                                <
. . . . Sibling: 16 Call: outnl of type (null) [line: 94]                                                         <
. . . Sibling: 21 Call: output of type (null) [line: 97]                                                          <
. . . . Child: 0 Id: a of type (null) [line: 97]                                                                  <
. . . Sibling: 22 Call: output of type (null) [line: 98]                                                          <
. . . . Child: 0 Id: b of type (null) [line: 98]                                                                  <
. . . Sibling: 23 Call: output of type (null) [line: 99]                                                          <
. . . . Child: 0 Id: x of type (null) [line: 99]                                                                  <
. . . Sibling: 24 Call: output of type (null) [line: 100]                                                         <
. . . . Child: 0 Id: y of type (null) [line: 100]                                                                 <
. . . Sibling: 25 Call: output of type (null) [line: 101]                                                         <
. . . . Child: 0 Id: z of type (null) [line: 101]                                                                 <
. . . Sibling: 26 Call: outnl of type (null) [line: 102]                                                          <
. . . Sibling: 27 Call: agamemnon of type void [line: 104]                                                        <
. . . Sibling: 28 Call: output of type (null) [line: 106]                                                         <
. . . . Child: 0 Id: a of type (null) [line: 106]                                                                 <
. . . Sibling: 29 Call: output of type (null) [line: 107]                                                         <
. . . . Child: 0 Id: b of type (null) [line: 107]                                                                 <
. . . Sibling: 30 Call: output of type (null) [line: 108]                                                         <
. . . . Child: 0 Id: x of type (null) [line: 108]                                                                 <
. . . Sibling: 31 Call: output of type (null) [line: 109]                                                         <
. . . . Child: 0 Id: y of type (null) [line: 109]                                                                 <
. . . Sibling: 32 Call: output of type (null) [line: 110]                                                         <
. . . . Child: 0 Id: z of type (null) [line: 110]                                                                 <
. . . Sibling: 33 Call: outnl of type (null) [line: 111]                                                          <
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 75                                                                                              |     Number of errors: 48

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P ops.c-                                                                                                          ./c- -P ops.c-
ERROR(14) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(25): Symbol 'outputb' is not declared.
ERROR(14) : Cannot index nonarray 'y'.                                                                            |     ERROR(26): Symbol 'outputb' is not declared.
ERROR(15) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(27): Symbol 'outputb' is not declared.
ERROR(15) : Cannot index nonarray 'y'.                                                                            |     ERROR(28): Symbol 'outnl' is not declared.
ERROR(16) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(30): Symbol 'outputb' is not declared.
ERROR(16) : Cannot index nonarray 'y'.                                                                            |     ERROR(31): Symbol 'outputb' is not declared.
ERROR(18) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(32): Symbol 'outputb' is not declared.
ERROR(19) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(33): Symbol 'outnl' is not declared.
ERROR(20) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(35): Symbol 'outputb' is not declared.
ERROR(22) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  |     ERROR(36): Symbol 'outputb' is not declared.
ERROR(23) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  |     ERROR(37): Symbol 'outputb' is not declared.
ERROR(25) : Symbol 'outputb' is not declared.                                                                     |     ERROR(38): Symbol 'outnl' is not declared.
ERROR(26) : Symbol 'outputb' is not declared.                                                                     |     ERROR(40): Symbol 'outputb' is not declared.
ERROR(27) : Symbol 'outputb' is not declared.                                                                     |     ERROR(41): Symbol 'outputb' is not declared.
ERROR(28) : Symbol 'outnl' is not declared.                                                                       |     ERROR(42): Symbol 'outputb' is not declared.
ERROR(30) : Symbol 'outputb' is not declared.                                                                     |     ERROR(43): Symbol 'outnl' is not declared.
ERROR(31) : Symbol 'outputb' is not declared.                                                                     |     ERROR(45): Symbol 'outputb' is not declared.
ERROR(32) : Symbol 'outputb' is not declared.                                                                     |     ERROR(46): Symbol 'outputb' is not declared.
ERROR(33) : Symbol 'outnl' is not declared.                                                                       |     ERROR(47): Symbol 'outputb' is not declared.
ERROR(35) : Symbol 'outputb' is not declared.                                                                     |     ERROR(48): Symbol 'outnl' is not declared.
ERROR(36) : Symbol 'outputb' is not declared.                                                                     |     ERROR(50): Symbol 'outputb' is not declared.
ERROR(37) : Symbol 'outputb' is not declared.                                                                     |     ERROR(51): Symbol 'outputb' is not declared.
ERROR(38) : Symbol 'outnl' is not declared.                                                                       |     ERROR(52): Symbol 'outputb' is not declared.
ERROR(40) : Symbol 'outputb' is not declared.                                                                     |     ERROR(53): Symbol 'outputb' is not declared.
ERROR(41) : Symbol 'outputb' is not declared.                                                                     |     ERROR(54): Symbol 'outnl' is not declared.
ERROR(42) : Symbol 'outputb' is not declared.                                                                     |     ERROR(56): Symbol 'outputb' is not declared.
ERROR(43) : Symbol 'outnl' is not declared.                                                                       |     ERROR(57): Symbol 'outputb' is not declared.
ERROR(45) : Symbol 'outputb' is not declared.                                                                     |     ERROR(58): Symbol 'outputb' is not declared.
ERROR(46) : Symbol 'outputb' is not declared.                                                                     |     ERROR(59): Symbol 'outputb' is not declared.
ERROR(47) : Symbol 'outputb' is not declared.                                                                     |     ERROR(60): Symbol 'outnl' is not declared.
ERROR(48) : Symbol 'outnl' is not declared.                                                                       |     ERROR(62): Symbol 'outputb' is not declared.
ERROR(50) : Symbol 'outputb' is not declared.                                                                     |     ERROR(63): Symbol 'outputb' is not declared.
ERROR(51) : Symbol 'outputb' is not declared.                                                                     |     ERROR(64): Symbol 'outputb' is not declared.
ERROR(52) : Symbol 'outputb' is not declared.                                                                     |     ERROR(65): Symbol 'outputb' is not declared.
ERROR(53) : Symbol 'outputb' is not declared.                                                                     |     ERROR(66): Symbol 'outnl' is not declared.
ERROR(54) : Symbol 'outnl' is not declared.                                                                       |     ERROR(68): Symbol 'outputb' is not declared.
ERROR(56) : Symbol 'outputb' is not declared.                                                                     |     ERROR(69): Symbol 'outputb' is not declared.
ERROR(57) : Symbol 'outputb' is not declared.                                                                     |     ERROR(70): Symbol 'outputb' is not declared.
ERROR(58) : Symbol 'outputb' is not declared.                                                                     |     ERROR(71): Symbol 'outputb' is not declared.
ERROR(59) : Symbol 'outputb' is not declared.                                                                     |     ERROR(72): Symbol 'outnl' is not declared.
ERROR(60) : Symbol 'outnl' is not declared.                                                                       |     ERROR(74): Symbol 'output' is not declared.
ERROR(62) : Symbol 'outputb' is not declared.                                                                     |     ERROR(75): Symbol 'output' is not declared.
ERROR(63) : Symbol 'outputb' is not declared.                                                                     |     ERROR(76): Symbol 'outnl' is not declared.
ERROR(64) : Symbol 'outputb' is not declared.                                                                     |     ERROR(78): Symbol 'output' is not declared.
ERROR(65) : Symbol 'outputb' is not declared.                                                                     |     ERROR(79): Symbol 'output' is not declared.
ERROR(66) : Symbol 'outnl' is not declared.                                                                       |     ERROR(80): Symbol 'outnl' is not declared.
ERROR(68) : Symbol 'outputb' is not declared.                                                                     |     ERROR(83): Symbol 'output' is not declared.
ERROR(69) : Symbol 'outputb' is not declared.                                                                     |     ERROR(84): Symbol 'output' is not declared.
ERROR(70) : Symbol 'outputb' is not declared.                                                                     |     ERROR(85): Symbol 'output' is not declared.
ERROR(71) : Symbol 'outputb' is not declared.                                                                     |     ERROR(86): Symbol 'output' is not declared.
ERROR(72) : Symbol 'outnl' is not declared.                                                                       |     ERROR(87): Symbol 'output' is not declared.
ERROR(74) : Symbol 'output' is not declared.                                                                      |     ERROR(88): Symbol 'outnl' is not declared.
ERROR(75) : Symbol 'output' is not declared.                                                                      |     ERROR(90): Symbol 'output' is not declared.
ERROR(76) : Symbol 'outnl' is not declared.                                                                       |     ERROR(91): Symbol 'output' is not declared.
ERROR(78) : Symbol 'output' is not declared.                                                                      |     ERROR(92): Symbol 'output' is not declared.
ERROR(79) : Symbol 'output' is not declared.                                                                      |     ERROR(93): Symbol 'outnl' is not declared.
ERROR(80) : Symbol 'outnl' is not declared.                                                                       |     ERROR(95): Symbol 'output' is not declared.
ERROR(82) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(96): Symbol 'output' is not declared.
ERROR(83) : Symbol 'output' is not declared.                                                                      |     ERROR(97): Symbol 'output' is not declared.
ERROR(84) : Symbol 'output' is not declared.                                                                      |     ERROR(98): Symbol 'output' is not declared.
ERROR(85) : Symbol 'output' is not declared.                                                                      |     ERROR(99): Symbol 'outnl' is not declared.
ERROR(86) : Symbol 'output' is not declared.                                                                      |     ERROR(102): Symbol 'output' is not declared.
ERROR(87) : Symbol 'output' is not declared.                                                                      |     ERROR(103): Symbol 'output' is not declared.
ERROR(88) : Symbol 'outnl' is not declared.                                                                       |     ERROR(104): Symbol 'output' is not declared.
ERROR(90) : Symbol 'output' is not declared.                                                                      |     ERROR(105): Symbol 'output' is not declared.
ERROR(91) : Symbol 'output' is not declared.                                                                      |     ERROR(106): Symbol 'output' is not declared.
ERROR(92) : Symbol 'output' is not declared.                                                                      |     ERROR(107): Symbol 'output' is not declared.
ERROR(93) : Symbol 'outnl' is not declared.                                                                       |     ERROR(108): Symbol 'outnl' is not declared.
ERROR(95) : Symbol 'output' is not declared.                                                                      |     ERROR(110): Symbol 'output' is not declared.
ERROR(96) : Symbol 'output' is not declared.                                                                      |     ERROR(111): Symbol 'output' is not declared.
ERROR(97) : Symbol 'output' is not declared.                                                                      |     ERROR(113): Symbol 'output' is not declared.
ERROR(98) : Symbol 'output' is not declared.                                                                      |     ERROR(114): Symbol 'outnl' is not declared.
ERROR(99) : Symbol 'outnl' is not declared.                                                                       |     ERROR(118): Symbol 'output' is not declared.
ERROR(102) : Symbol 'output' is not declared.                                                                     |     ERROR(119): Symbol 'output' is not declared.
ERROR(103) : Symbol 'output' is not declared.                                                                     |     ERROR(120): Symbol 'output' is not declared.
ERROR(104) : Symbol 'output' is not declared.                                                                     |     ERROR(121): Symbol 'output' is not declared.
ERROR(105) : Symbol 'output' is not declared.                                                                     |     ERROR(122): Symbol 'outnl' is not declared.
ERROR(106) : Symbol 'output' is not declared.                                                                     |     ERROR(126): Symbol 'output' is not declared.
ERROR(107) : Symbol 'output' is not declared.                                                                     |     ERROR(127): Symbol 'output' is not declared.
ERROR(108) : Symbol 'outnl' is not declared.                                                                      |     ERROR(128): Symbol 'output' is not declared.
ERROR(110) : Symbol 'output' is not declared.                                                                     |     ERROR(129): Symbol 'output' is not declared.
ERROR(111) : Symbol 'output' is not declared.                                                                     |     ERROR(130): Symbol 'outnl' is not declared.
ERROR(112) : '*' requires operands of type int but lhs is of type (null).                                         |     ERROR(134): Symbol 'output' is not declared.
ERROR(112) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                  |     ERROR(135): Symbol 'output' is not declared.
ERROR(112) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                  |     ERROR(136): Symbol 'outnl' is not declared.
ERROR(113) : Symbol 'output' is not declared.                                                                     |     ERROR(138): Symbol 'output' is not declared.
ERROR(114) : Symbol 'outnl' is not declared.                                                                      |     ERROR(139): Symbol 'output' is not declared.
ERROR(116) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                  |     ERROR(140): Symbol 'output' is not declared.
ERROR(117) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                  |     ERROR(141): Symbol 'outnl' is not declared.
ERROR(118) : Symbol 'output' is not declared.                                                                     |     ERROR(143): Symbol 'outputb' is not declared.
ERROR(119) : Symbol 'output' is not declared.                                                                     |     ERROR(144): Symbol 'outputb' is not declared.
ERROR(120) : Symbol 'output' is not declared.                                                                     |     ERROR(145): Symbol 'outputb' is not declared.
ERROR(121) : Symbol 'output' is not declared.                                                                     |     ERROR(146): Symbol 'outnl' is not declared.
ERROR(122) : Symbol 'outnl' is not declared.                                                                      |     ERROR(148): Symbol 'outputb' is not declared.
ERROR(124) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                  |     ERROR(149): Symbol 'outputb' is not declared.
ERROR(125) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                  |     ERROR(150): Symbol 'outputb' is not declared.
ERROR(126) : Symbol 'output' is not declared.                                                                     |     ERROR(151): Symbol 'outputb' is not declared.
ERROR(127) : Symbol 'output' is not declared.                                                                     |     ERROR(152): Symbol 'outputb' is not declared.
ERROR(128) : Symbol 'output' is not declared.                                                                     |     ERROR(153): Symbol 'outputb' is not declared.
ERROR(129) : Symbol 'output' is not declared.                                                                     |     ERROR(154): Symbol 'outputb' is not declared.
ERROR(130) : Symbol 'outnl' is not declared.                                                                      |     ERROR(155): Symbol 'outputb' is not declared.
ERROR(132) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                  |     ERROR(156): Symbol 'outputb' is not declared.
ERROR(133) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                  |     ERROR(157): Symbol 'outputb' is not declared.
ERROR(134) : Symbol 'output' is not declared.                                                                     |     ERROR(158): Symbol 'outputb' is not declared.
ERROR(135) : Symbol 'output' is not declared.                                                                     |     ERROR(159): Symbol 'outputb' is not declared.
ERROR(136) : Symbol 'outnl' is not declared.                                                                      |     ERROR(160): Symbol 'outputb' is not declared.
ERROR(138) : Symbol 'output' is not declared.                                                                     |     ERROR(161): Symbol 'outnl' is not declared.
ERROR(139) : Symbol 'output' is not declared.                                                                     |     ERROR(163): Symbol 'outputb' is not declared.
ERROR(140) : Symbol 'output' is not declared.                                                                     |     ERROR(164): Symbol 'outputb' is not declared.
ERROR(141) : Symbol 'outnl' is not declared.                                                                      |     ERROR(165): Symbol 'outnl' is not declared.
ERROR(143) : Symbol 'outputb' is not declared.                                                                    <
ERROR(144) : Symbol 'outputb' is not declared.                                                                    <
ERROR(145) : Symbol 'outputb' is not declared.                                                                    <
ERROR(146) : Symbol 'outnl' is not declared.                                                                      <
ERROR(148) : Symbol 'outputb' is not declared.                                                                    <
ERROR(149) : Symbol 'outputb' is not declared.                                                                    <
ERROR(150) : Symbol 'outputb' is not declared.                                                                    <
ERROR(151) : Symbol 'outputb' is not declared.                                                                    <
ERROR(152) : Symbol 'outputb' is not declared.                                                                    <
ERROR(153) : Symbol 'outputb' is not declared.                                                                    <
ERROR(154) : Symbol 'outputb' is not declared.                                                                    <
ERROR(155) : Symbol 'outputb' is not declared.                                                                    <
ERROR(156) : Symbol 'outputb' is not declared.                                                                    <
ERROR(157) : Symbol 'outputb' is not declared.                                                                    <
ERROR(158) : Symbol 'outputb' is not declared.                                                                    <
ERROR(159) : Symbol 'outputb' is not declared.                                                                    <
ERROR(160) : Symbol 'outputb' is not declared.                                                                    <
ERROR(161) : Symbol 'outnl' is not declared.                                                                      <
ERROR(163) : Symbol 'outputb' is not declared.                                                                    <
ERROR(164) : Symbol 'outputb' is not declared.                                                                    <
ERROR(165) : Symbol 'outnl' is not declared.                                                                      <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
x:                                                                                                                <
y:                                                                                                                <
Scope: main -----------------                                                                                     <
a:                                                                                                                <
b:                                                                                                                <
c:                                                                                                                <
z:                                                                                                                <
=========== ============ ===========                                                                              <
Var: y of array of type int [line: 4]                                                                             <
Sibling: 1 Var: x of type bool [line: 5]                                                                          <
Sibling: 2 Func: main returns type void [line: 7]                                                                 <
. Child: 1 Compound [line: 8]                                                                                     <
. . Child: 0 Var: a of type int [line: 9]                                                                         <
. . Sibling: 1 Var: b of type int [line: 10]                                                                      <
. . Sibling: 2 Var: c of type int [line: 11]                                                                      <
. . Sibling: 3 Var: z of type bool [line: 12]                                                                     <
. . Child: 1 Assign: <- of type (null) [line: 14]                                                                 <
. . . Child: 0 Op: [ of type (null) [line: 14]                                                                    <
. . . . Child: 0 Id: y of type int [line: 14]                                                                     <
. . . . Child: 1 Const 0 of type int [line: 14]                                                                   <
. . . Child: 1 Const 50 of type int [line: 14]                                                                    <
. . Sibling: 1 Assign: <- of type (null) [line: 15]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 15]                                                                    <
. . . . Child: 0 Id: y of type int [line: 15]                                                                     <
. . . . Child: 1 Const 5 of type int [line: 15]                                                                   <
. . . Child: 1 Const 1 of type int [line: 15]                                                                     <
. . Sibling: 2 Assign: <- of type (null) [line: 16]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 16]                                                                    <
. . . . Child: 0 Id: y of type int [line: 16]                                                                     <
. . . . Child: 1 Const 8 of type int [line: 16]                                                                   <
. . . Child: 1 Const 2 of type int [line: 16]                                                                     <
. . Sibling: 3 Assign: <- of type (null) [line: 18]                                                               <
. . . Child: 0 Id: a of type int [line: 18]                                                                       <
. . . Child: 1 Const 50 of type int [line: 18]                                                                    <
. . Sibling: 4 Assign: <- of type (null) [line: 19]                                                               <
. . . Child: 0 Id: b of type int [line: 19]                                                                       <
. . . Child: 1 Const 1 of type int [line: 19]                                                                     <
. . Sibling: 5 Assign: <- of type (null) [line: 20]                                                               <
. . . Child: 0 Id: c of type int [line: 20]                                                                       <
. . . Child: 1 Const 8 of type int [line: 20]                                                                     <
. . Sibling: 6 Assign: <- of type (null) [line: 22]                                                               <
. . . Child: 0 Id: x of type bool [line: 22]                                                                      <
. . . Child: 1 Const false of type bool [line: 22]                                                                <
. . Sibling: 7 Assign: <- of type (null) [line: 23]                                                               <
. . . Child: 0 Id: z of type bool [line: 23]                                                                      <
. . . Child: 1 Const true of type bool [line: 23]                                                                 <
. . Sibling: 8 Call: outputb of type (null) [line: 25]                                                            <
. . . Child: 0 Op: <= of type (null) [line: 25]                                                                   <
. . . . Child: 0 Id: a of type (null) [line: 25]                                                                  <
. . . . Child: 1 Const 1 of type int [line: 25]                                                                   <
. . Sibling: 9 Call: outputb of type (null) [line: 26]                                                            <
. . . Child: 0 Op: <= of type (null) [line: 26]                                                                   <
. . . . Child: 0 Id: b of type (null) [line: 26]                                                                  <
. . . . Child: 1 Const 50 of type int [line: 26]                                                                  <
. . Sibling: 10 Call: outputb of type (null) [line: 27]                                                           <
. . . Child: 0 Op: <= of type (null) [line: 27]                                                                   <
. . . . Child: 0 Const 50 of type int [line: 27]                                                                  <
. . . . Child: 1 Const 50 of type int [line: 27]                                                                  <
. . Sibling: 11 Call: outnl of type (null) [line: 28]                                                             <
. . Sibling: 12 Call: outputb of type (null) [line: 30]                                                           <
. . . Child: 0 Op: < of type (null) [line: 30]                                                                    <
. . . . Child: 0 Const 50 of type int [line: 30]                                                                  <
. . . . Child: 1 Const 1 of type int [line: 30]                                                                   <
. . Sibling: 13 Call: outputb of type (null) [line: 31]                                                           <
. . . Child: 0 Op: < of type (null) [line: 31]                                                                    <
. . . . Child: 0 Id: b of type (null) [line: 31]                                                                  <
. . . . Child: 1 Id: a of type (null) [line: 31]                                                                  <
. . Sibling: 14 Call: outputb of type (null) [line: 32]                                                           <
. . . Child: 0 Op: < of type (null) [line: 32]                                                                    <
. . . . Child: 0 Id: a of type (null) [line: 32]                                                                  <
. . . . Child: 1 Id: a of type (null) [line: 32]                                                                  <
. . Sibling: 15 Call: outnl of type (null) [line: 33]                                                             <
. . Sibling: 16 Call: outputb of type (null) [line: 35]                                                           <
. . . Child: 0 Op: > of type (null) [line: 35]                                                                    <
. . . . Child: 0 Const 50 of type int [line: 35]                                                                  <
. . . . Child: 1 Const 1 of type int [line: 35]                                                                   <
. . Sibling: 17 Call: outputb of type (null) [line: 36]                                                           <
. . . Child: 0 Op: > of type (null) [line: 36]                                                                    <
. . . . Child: 0 Const 1 of type int [line: 36]                                                                   <
. . . . Child: 1 Const 50 of type int [line: 36]                                                                  <
. . Sibling: 18 Call: outputb of type (null) [line: 37]                                                           <
. . . Child: 0 Op: > of type (null) [line: 37]                                                                    <
. . . . Child: 0 Const 50 of type int [line: 37]                                                                  <
. . . . Child: 1 Const 50 of type int [line: 37]                                                                  <
. . Sibling: 19 Call: outnl of type (null) [line: 38]                                                             <
. . Sibling: 20 Call: outputb of type (null) [line: 40]                                                           <
. . . Child: 0 Op: >= of type (null) [line: 40]                                                                   <
. . . . Child: 0 Const 50 of type int [line: 40]                                                                  <
. . . . Child: 1 Const 1 of type int [line: 40]                                                                   <
. . Sibling: 21 Call: outputb of type (null) [line: 41]                                                           <
. . . Child: 0 Op: >= of type (null) [line: 41]                                                                   <
. . . . Child: 0 Const 1 of type int [line: 41]                                                                   <
. . . . Child: 1 Const 50 of type int [line: 41]                                                                  <
. . Sibling: 22 Call: outputb of type (null) [line: 42]                                                           <
. . . Child: 0 Op: >= of type (null) [line: 42]                                                                   <
. . . . Child: 0 Const 50 of type int [line: 42]                                                                  <
. . . . Child: 1 Const 50 of type int [line: 42]                                                                  <
. . Sibling: 23 Call: outnl of type (null) [line: 43]                                                             <
. . Sibling: 24 Call: outputb of type (null) [line: 45]                                                           <
. . . Child: 0 Op: = of type (null) [line: 45]                                                                    <
. . . . Child: 0 Op: [ of type (null) [line: 45]                                                                  <
. . . . . Child: 0 Id: y of type (null) [line: 45]                                                                <
. . . . . Child: 1 Const 0 of type int [line: 45]                                                                 <
. . . . Child: 1 Id: b of type (null) [line: 45]                                                                  <
. . Sibling: 25 Call: outputb of type (null) [line: 46]                                                           <
. . . Child: 0 Op: = of type (null) [line: 46]                                                                    <
. . . . Child: 0 Id: a of type (null) [line: 46]                                                                  <
. . . . Child: 1 Id: b of type (null) [line: 46]                                                                  <
. . Sibling: 26 Call: outputb of type (null) [line: 47]                                                           <
. . . Child: 0 Op: = of type (null) [line: 47]                                                                    <
. . . . Child: 0 Id: b of type (null) [line: 47]                                                                  <
. . . . Child: 1 Id: b of type (null) [line: 47]                                                                  <
. . Sibling: 27 Call: outnl of type (null) [line: 48]                                                             <
. . Sibling: 28 Call: outputb of type (null) [line: 50]                                                           <
. . . Child: 0 Op: != of type (null) [line: 50]                                                                   <
. . . . Child: 0 Op: [ of type (null) [line: 50]                                                                  <
. . . . . Child: 0 Id: y of type (null) [line: 50]                                                                <
. . . . . Child: 1 Const 0 of type int [line: 50]                                                                 <
. . . . Child: 1 Id: a of type (null) [line: 50]                                                                  <
. . Sibling: 29 Call: outputb of type (null) [line: 51]                                                           <
. . . Child: 0 Op: != of type (null) [line: 51]                                                                   <
. . . . Child: 0 Op: [ of type (null) [line: 51]                                                                  <
. . . . . Child: 0 Id: y of type (null) [line: 51]                                                                <
. . . . . Child: 1 Const 0 of type int [line: 51]                                                                 <
. . . . Child: 1 Id: b of type (null) [line: 51]                                                                  <
. . Sibling: 30 Call: outputb of type (null) [line: 52]                                                           <
. . . Child: 0 Op: != of type (null) [line: 52]                                                                   <
. . . . Child: 0 Id: a of type (null) [line: 52]                                                                  <
. . . . Child: 1 Id: b of type (null) [line: 52]                                                                  <
. . Sibling: 31 Call: outputb of type (null) [line: 53]                                                           <
. . . Child: 0 Op: != of type (null) [line: 53]                                                                   <
. . . . Child: 0 Id: b of type (null) [line: 53]                                                                  <
. . . . Child: 1 Id: b of type (null) [line: 53]                                                                  <
. . Sibling: 32 Call: outnl of type (null) [line: 54]                                                             <
. . Sibling: 33 Call: outputb of type (null) [line: 56]                                                           <
. . . Child: 0 Op: and of type (null) [line: 56]                                                                  <
. . . . Child: 0 Const true of type bool [line: 56]                                                               <
. . . . Child: 1 Const true of type bool [line: 56]                                                               <
. . Sibling: 34 Call: outputb of type (null) [line: 57]                                                           <
. . . Child: 0 Op: and of type (null) [line: 57]                                                                  <
. . . . Child: 0 Const true of type bool [line: 57]                                                               <
. . . . Child: 1 Const false of type bool [line: 57]                                                              <
. . Sibling: 35 Call: outputb of type (null) [line: 58]                                                           <
. . . Child: 0 Op: and of type (null) [line: 58]                                                                  <
. . . . Child: 0 Const false of type bool [line: 58]                                                              <
. . . . Child: 1 Const true of type bool [line: 58]                                                               <
. . Sibling: 36 Call: outputb of type (null) [line: 59]                                                           <
. . . Child: 0 Op: and of type (null) [line: 59]                                                                  <
. . . . Child: 0 Const false of type bool [line: 59]                                                              <
. . . . Child: 1 Const false of type bool [line: 59]                                                              <
. . Sibling: 37 Call: outnl of type (null) [line: 60]                                                             <
. . Sibling: 38 Call: outputb of type (null) [line: 62]                                                           <
. . . Child: 0 Op: or of type (null) [line: 62]                                                                   <
. . . . Child: 0 Const true of type bool [line: 62]                                                               <
. . . . Child: 1 Const true of type bool [line: 62]                                                               <
. . Sibling: 39 Call: outputb of type (null) [line: 63]                                                           <
. . . Child: 0 Op: or of type (null) [line: 63]                                                                   <
. . . . Child: 0 Id: z of type (null) [line: 63]                                                                  <
. . . . Child: 1 Const false of type bool [line: 63]                                                              <
. . Sibling: 40 Call: outputb of type (null) [line: 64]                                                           <
. . . Child: 0 Op: or of type (null) [line: 64]                                                                   <
. . . . Child: 0 Const false of type bool [line: 64]                                                              <
. . . . Child: 1 Const true of type bool [line: 64]                                                               <
. . Sibling: 41 Call: outputb of type (null) [line: 65]                                                           <
. . . Child: 0 Op: or of type (null) [line: 65]                                                                   <
. . . . Child: 0 Const false of type bool [line: 65]                                                              <
. . . . Child: 1 Const false of type bool [line: 65]                                                              <
. . Sibling: 42 Call: outnl of type (null) [line: 66]                                                             <
. . Sibling: 43 Call: outputb of type (null) [line: 68]                                                           <
. . . Child: 0 Op: not of type (null) [line: 68]                                                                  <
. . . . Child: 0 Const true of type bool [line: 68]                                                               <
. . Sibling: 44 Call: outputb of type (null) [line: 69]                                                           <
. . . Child: 0 Op: not of type (null) [line: 69]                                                                  <
. . . . Child: 0 Const false of type bool [line: 69]                                                              <
. . Sibling: 45 Call: outputb of type (null) [line: 70]                                                           <
. . . Child: 0 Op: not of type (null) [line: 70]                                                                  <
. . . . Child: 0 Id: x of type (null) [line: 70]                                                                  <
. . Sibling: 46 Call: outputb of type (null) [line: 71]                                                           <
. . . Child: 0 Op: not of type (null) [line: 71]                                                                  <
. . . . Child: 0 Op: not of type (null) [line: 71]                                                                <
. . . . . Child: 0 Op: not of type (null) [line: 71]                                                              <
. . . . . . Child: 0 Id: x of type (null) [line: 71]                                                              <
. . Sibling: 47 Call: outnl of type (null) [line: 72]                                                             <
. . Sibling: 48 Call: output of type (null) [line: 74]                                                            <
. . . Child: 0 Op: + of type (null) [line: 74]                                                                    <
. . . . Child: 0 Const 5 of type int [line: 74]                                                                   <
. . . . Child: 1 Const 50 of type int [line: 74]                                                                  <
. . Sibling: 49 Call: output of type (null) [line: 75]                                                            <
. . . Child: 0 Op: + of type (null) [line: 75]                                                                    <
. . . . Child: 0 Op: [ of type (null) [line: 75]                                                                  <
. . . . . Child: 0 Id: y of type (null) [line: 75]                                                                <
. . . . . Child: 1 Id: c of type (null) [line: 75]                                                                <
. . . . Child: 1 Const 50 of type int [line: 75]                                                                  <
. . Sibling: 50 Call: outnl of type (null) [line: 76]                                                             <
. . Sibling: 51 Call: output of type (null) [line: 78]                                                            <
. . . Child: 0 Op: - of type (null) [line: 78]                                                                    <
. . . . Child: 0 Const 5 of type int [line: 78]                                                                   <
. . . . Child: 1 Const 50 of type int [line: 78]                                                                  <
. . Sibling: 52 Call: output of type (null) [line: 79]                                                            <
. . . Child: 0 Op: - of type (null) [line: 79]                                                                    <
. . . . Child: 0 Op: - of type (null) [line: 79]                                                                  <
. . . . . Child: 0 Const 30 of type int [line: 79]                                                                <
. . . . . Child: 1 Const 5 of type int [line: 79]                                                                 <
. . . . Child: 1 Const 50 of type int [line: 79]                                                                  <
. . Sibling: 53 Call: outnl of type (null) [line: 80]                                                             <
. . Sibling: 54 Assign: <- of type (null) [line: 82]                                                              <
. . . Child: 0 Id: a of type int [line: 82]                                                                       <
. . . Child: 1 Const 50 of type int [line: 82]                                                                    <
. . Sibling: 55 Call: output of type (null) [line: 83]                                                            <
. . . Child: 0 Op: chsign of type (null) [line: 83]                                                               <
. . . . Child: 0 Id: a of type (null) [line: 83]                                                                  <
. . Sibling: 56 Call: output of type (null) [line: 84]                                                            <
. . . Child: 0 Op: chsign of type (null) [line: 84]                                                               <
. . . . Child: 0 Op: chsign of type (null) [line: 84]                                                             <
. . . . . Child: 0 Id: a of type (null) [line: 84]                                                                <
. . Sibling: 57 Call: output of type (null) [line: 85]                                                            <
. . . Child: 0 Op: chsign of type (null) [line: 85]                                                               <
. . . . Child: 0 Id: a of type (null) [line: 85]                                                                  <
. . Sibling: 58 Call: output of type (null) [line: 86]                                                            <
. . . Child: 0 Op: chsign of type (null) [line: 86]                                                               <
. . . . Child: 0 Const 0 of type int [line: 86]                                                                   <
. . Sibling: 59 Call: output of type (null) [line: 87]                                                            <
. . . Child: 0 Op: chsign of type (null) [line: 87]                                                               <
. . . . Child: 0 Const 1 of type int [line: 87]                                                                   <
. . Sibling: 60 Call: outnl of type (null) [line: 88]                                                             <
. . Sibling: 61 Call: output of type (null) [line: 90]                                                            <
. . . Child: 0 Op: * of type (null) [line: 90]                                                                    <
. . . . Child: 0 Op: * of type (null) [line: 90]                                                                  <
. . . . . Child: 0 Op: * of type (null) [line: 90]                                                                <
. . . . . . Child: 0 Op: * of type (null) [line: 90]                                                              <
. . . . . . . Child: 0 Const 2 of type int [line: 90]                                                             <
. . . . . . . Child: 1 Const 3 of type int [line: 90]                                                             <
. . . . . . Child: 1 Const 5 of type int [line: 90]                                                               <
. . . . . Child: 1 Const 7 of type int [line: 90]                                                                 <
. . . . Child: 1 Const 11 of type int [line: 90]                                                                  <
. . Sibling: 62 Call: output of type (null) [line: 91]                                                            <
. . . Child: 0 Op: * of type (null) [line: 91]                                                                    <
. . . . Child: 0 Const 50 of type int [line: 91]                                                                  <
. . . . Child: 1 Op: [ of type (null) [line: 91]                                                                  <
. . . . . Child: 0 Id: y of type (null) [line: 91]                                                                <
. . . . . Child: 1 Const 8 of type int [line: 91]                                                                 <
. . Sibling: 63 Call: output of type (null) [line: 92]                                                            <
. . . Child: 0 Op: * of type (null) [line: 92]                                                                    <
. . . . Child: 0 Op: [ of type (null) [line: 92]                                                                  <
. . . . . Child: 0 Id: y of type (null) [line: 92]                                                                <
. . . . . Child: 1 Const 8 of type int [line: 92]                                                                 <
. . . . Child: 1 Const 50 of type int [line: 92]                                                                  <
. . Sibling: 64 Call: outnl of type (null) [line: 93]                                                             <
. . Sibling: 65 Call: output of type (null) [line: 95]                                                            <
. . . Child: 0 Op: / of type (null) [line: 95]                                                                    <
. . . . Child: 0 Const 50 of type int [line: 95]                                                                  <
. . . . Child: 1 Op: [ of type (null) [line: 95]                                                                  <
. . . . . Child: 0 Id: y of type (null) [line: 95]                                                                <
. . . . . Child: 1 Const 8 of type int [line: 95]                                                                 <
. . Sibling: 66 Call: output of type (null) [line: 96]                                                            <
. . . Child: 0 Op: / of type (null) [line: 96]                                                                    <
. . . . Child: 0 Op: [ of type (null) [line: 96]                                                                  <
. . . . . Child: 0 Id: y of type (null) [line: 96]                                                                <
. . . . . Child: 1 Const 8 of type int [line: 96]                                                                 <
. . . . Child: 1 Const 50 of type int [line: 96]                                                                  <
. . Sibling: 67 Call: output of type (null) [line: 97]                                                            <
. . . Child: 0 Op: / of type (null) [line: 97]                                                                    <
. . . . Child: 0 Op: [ of type (null) [line: 97]                                                                  <
. . . . . Child: 0 Id: y of type (null) [line: 97]                                                                <
. . . . . Child: 1 Const 8 of type int [line: 97]                                                                 <
. . . . Child: 1 Id: b of type (null) [line: 97]                                                                  <
. . Sibling: 68 Call: output of type (null) [line: 98]                                                            <
. . . Child: 0 Op: / of type (null) [line: 98]                                                                    <
. . . . Child: 0 Op: / of type (null) [line: 98]                                                                  <
. . . . . Child: 0 Const 210 of type int [line: 98]                                                               <
. . . . . Child: 1 Const 7 of type int [line: 98]                                                                 <
. . . . Child: 1 Const 3 of type int [line: 98]                                                                   <
. . Sibling: 69 Call: outnl of type (null) [line: 99]                                                             <
. . Sibling: 70 Call: output of type (null) [line: 102]                                                           <
. . . Child: 0 Op: % of type (null) [line: 102]                                                                   <
. . . . Child: 0 Const 211 of type int [line: 102]                                                                <
. . . . Child: 1 Const 7 of type int [line: 102]                                                                  <
. . Sibling: 71 Call: output of type (null) [line: 103]                                                           <
. . . Child: 0 Op: % of type (null) [line: 103]                                                                   <
. . . . Child: 0 Const 211 of type int [line: 103]                                                                <
. . . . Child: 1 Const 6 of type int [line: 103]                                                                  <
. . Sibling: 72 Call: output of type (null) [line: 104]                                                           <
. . . Child: 0 Op: % of type (null) [line: 104]                                                                   <
. . . . Child: 0 Const 211 of type int [line: 104]                                                                <
. . . . Child: 1 Const 5 of type int [line: 104]                                                                  <
. . Sibling: 73 Call: output of type (null) [line: 105]                                                           <
. . . Child: 0 Op: % of type (null) [line: 105]                                                                   <
. . . . Child: 0 Const 211 of type int [line: 105]                                                                <
. . . . Child: 1 Const 4 of type int [line: 105]                                                                  <
. . Sibling: 74 Call: output of type (null) [line: 106]                                                           <
. . . Child: 0 Op: - of type (null) [line: 106]                                                                   <
. . . . Child: 0 Const 211 of type int [line: 106]                                                                <
. . . . Child: 1 Op: * of type (null) [line: 106]                                                                 <
. . . . . Child: 0 Op: / of type (null) [line: 106]                                                               <
. . . . . . Child: 0 Const 211 of type int [line: 106]                                                            <
. . . . . . Child: 1 Const 4 of type int [line: 106]                                                              <
. . . . . Child: 1 Const 4 of type int [line: 106]                                                                <
. . Sibling: 75 Call: output of type (null) [line: 107]                                                           <
. . . Child: 0 Op: % of type (null) [line: 107]                                                                   <
. . . . Child: 0 Op: % of type (null) [line: 107]                                                                 <
. . . . . Child: 0 Const 211 of type int [line: 107]                                                              <
. . . . . Child: 1 Const 100 of type int [line: 107]                                                              <
. . . . Child: 1 Const 3 of type int [line: 107]                                                                  <
. . Sibling: 76 Call: outnl of type (null) [line: 108]                                                            <
. . Sibling: 77 Call: output of type (null) [line: 110]                                                           <
. . . Child: 0 Assign: <- of type (null) [line: 110]                                                              <
. . . . Child: 0 Id: a of type (null) [line: 110]                                                                 <
. . . . Child: 1 Assign: <- of type (null) [line: 110]                                                            <
. . . . . Child: 0 Id: b of type (null) [line: 110]                                                               <
. . . . . Child: 1 Assign: <- of type (null) [line: 110]                                                          <
. . . . . . Child: 0 Id: c of type (null) [line: 110]                                                             <
. . . . . . Child: 1 Const 43 of type int [line: 110]                                                             <
. . Sibling: 78 Call: output of type (null) [line: 111]                                                           <
. . . Child: 0 Id: a of type (null) [line: 111]                                                                   <
. . Sibling: 79 Assign: <- of type (null) [line: 112]                                                             <
. . . Child: 0 Id: a of type int [line: 112]                                                                      <
. . . Child: 1 Op: * of type (null) [line: 112]                                                                   <
. . . . Child: 0 Assign: <- of type (null) [line: 112]                                                            <
. . . . . Child: 0 Id: b of type int [line: 112]                                                                  <
. . . . . Child: 1 Const 3 of type int [line: 112]                                                                <
. . . . Child: 1 Assign: <- of type (null) [line: 112]                                                            <
. . . . . Child: 0 Id: c of type int [line: 112]                                                                  <
. . . . . Child: 1 Const 4 of type int [line: 112]                                                                <
. . Sibling: 80 Call: output of type (null) [line: 113]                                                           <
. . . Child: 0 Id: a of type (null) [line: 113]                                                                   <
. . Sibling: 81 Call: outnl of type (null) [line: 114]                                                            <
. . Sibling: 82 Assign: <- of type (null) [line: 116]                                                             <
. . . Child: 0 Id: a of type int [line: 116]                                                                      <
. . . Child: 1 Const 44 of type int [line: 116]                                                                   <
. . Sibling: 83 Assign: <- of type (null) [line: 117]                                                             <
. . . Child: 0 Id: b of type int [line: 117]                                                                      <
. . . Child: 1 Const 2 of type int [line: 117]                                                                    <
. . Sibling: 84 Call: output of type (null) [line: 118]                                                           <
. . . Child: 0 Assign: += of type (null) [line: 118]                                                              <
. . . . Child: 0 Id: a of type (null) [line: 118]                                                                 <
. . . . Child: 1 Id: b of type (null) [line: 118]                                                                 <
. . Sibling: 85 Call: output of type (null) [line: 119]                                                           <
. . . Child: 0 Assign: -= of type (null) [line: 119]                                                              <
. . . . Child: 0 Id: a of type (null) [line: 119]                                                                 <
. . . . Child: 1 Id: b of type (null) [line: 119]                                                                 <
. . Sibling: 86 Call: output of type (null) [line: 120]                                                           <
. . . Child: 0 Assign: -= of type (null) [line: 120]                                                              <
. . . . Child: 0 Id: a of type (null) [line: 120]                                                                 <
. . . . Child: 1 Id: a of type (null) [line: 120]                                                                 <
. . Sibling: 87 Call: output of type (null) [line: 121]                                                           <
. . . Child: 0 Assign: += of type (null) [line: 121]                                                              <
. . . . Child: 0 Id: a of type (null) [line: 121]                                                                 <
. . . . Child: 1 Assign: += of type (null) [line: 121]                                                            <
. . . . . Child: 0 Id: b of type (null) [line: 121]                                                               <
. . . . . Child: 1 Const 10 of type int [line: 121]                                                               <
. . Sibling: 88 Call: outnl of type (null) [line: 122]                                                            <
. . Sibling: 89 Assign: <- of type (null) [line: 124]                                                             <
. . . Child: 0 Id: a of type int [line: 124]                                                                      <
. . . Child: 1 Const 44 of type int [line: 124]                                                                   <
. . Sibling: 90 Assign: <- of type (null) [line: 125]                                                             <
. . . Child: 0 Id: b of type int [line: 125]                                                                      <
. . . Child: 1 Const 2 of type int [line: 125]                                                                    <
. . Sibling: 91 Call: output of type (null) [line: 126]                                                           <
. . . Child: 0 Assign: *= of type (null) [line: 126]                                                              <
. . . . Child: 0 Id: a of type (null) [line: 126]                                                                 <
. . . . Child: 1 Id: b of type (null) [line: 126]                                                                 <
. . Sibling: 92 Call: output of type (null) [line: 127]                                                           <
. . . Child: 0 Assign: /= of type (null) [line: 127]                                                              <
. . . . Child: 0 Id: a of type (null) [line: 127]                                                                 <
. . . . Child: 1 Id: b of type (null) [line: 127]                                                                 <
. . Sibling: 93 Call: output of type (null) [line: 128]                                                           <
. . . Child: 0 Assign: /= of type (null) [line: 128]                                                              <
. . . . Child: 0 Id: a of type (null) [line: 128]                                                                 <
. . . . Child: 1 Assign: /= of type (null) [line: 128]                                                            <
. . . . . Child: 0 Id: a of type (null) [line: 128]                                                               <
. . . . . Child: 1 Const 2 of type int [line: 128]                                                                <
. . Sibling: 94 Call: output of type (null) [line: 129]                                                           <
. . . Child: 0 Assign: *= of type (null) [line: 129]                                                              <
. . . . Child: 0 Id: a of type (null) [line: 129]                                                                 <
. . . . Child: 1 Assign: *= of type (null) [line: 129]                                                            <
. . . . . Child: 0 Id: b of type (null) [line: 129]                                                               <
. . . . . Child: 1 Const 10 of type int [line: 129]                                                               <
. . Sibling: 95 Call: outnl of type (null) [line: 130]                                                            <
. . Sibling: 96 Assign: <- of type (null) [line: 132]                                                             <
. . . Child: 0 Id: a of type int [line: 132]                                                                      <
. . . Child: 1 Const 44 of type int [line: 132]                                                                   <
. . Sibling: 97 Assign: <- of type (null) [line: 133]                                                             <
. . . Child: 0 Id: b of type int [line: 133]                                                                      <
. . . Child: 1 Const 2 of type int [line: 133]                                                                    <
. . Sibling: 98 Call: output of type (null) [line: 134]                                                           <
. . . Child: 0 Assign: ++ of type (null) [line: 134]                                                              <
. . . . Child: 0 Id: a of type (null) [line: 134]                                                                 <
. . Sibling: 99 Call: output of type (null) [line: 135]                                                           <
. . . Child: 0 Assign: -- of type (null) [line: 135]                                                              <
. . . . Child: 0 Id: b of type (null) [line: 135]                                                                 <
. . Sibling: 100 Call: outnl of type (null) [line: 136]                                                           <
. . Sibling: 101 Call: output of type (null) [line: 138]                                                          <
. . . Child: 0 Op: - of type (null) [line: 138]                                                                   <
. . . . Child: 0 Op: - of type (null) [line: 138]                                                                 <
. . . . . Child: 0 Const 3 of type int [line: 138]                                                                <
. . . . . Child: 1 Const 4 of type int [line: 138]                                                                <
. . . . Child: 1 Const 5 of type int [line: 138]                                                                  <
. . Sibling: 102 Call: output of type (null) [line: 139]                                                          <
. . . Child: 0 Op: / of type (null) [line: 139]                                                                   <
. . . . Child: 0 Op: / of type (null) [line: 139]                                                                 <
. . . . . Child: 0 Const 211 of type int [line: 139]                                                              <
. . . . . Child: 1 Const 17 of type int [line: 139]                                                               <
. . . . Child: 1 Const 5 of type int [line: 139]                                                                  <
. . Sibling: 103 Call: output of type (null) [line: 140]                                                          <
. . . Child: 0 Op: / of type (null) [line: 140]                                                                   <
. . . . Child: 0 Const 211 of type int [line: 140]                                                                <
. . . . Child: 1 Op: / of type (null) [line: 140]                                                                 <
. . . . . Child: 0 Const 17 of type int [line: 140]                                                               <
. . . . . Child: 1 Const 5 of type int [line: 140]                                                                <
. . Sibling: 104 Call: outnl of type (null) [line: 141]                                                           <
. . Sibling: 105 Call: outputb of type (null) [line: 143]                                                         <
. . . Child: 0 Op: and of type (null) [line: 143]                                                                 <
. . . . Child: 0 Op: or of type (null) [line: 143]                                                                <
. . . . . Child: 0 Const true of type bool [line: 143]                                                            <
. . . . . Child: 1 Const false of type bool [line: 143]                                                           <
. . . . Child: 1 Const false of type bool [line: 143]                                                             <
. . Sibling: 106 Call: outputb of type (null) [line: 144]                                                         <
. . . Child: 0 Op: or of type (null) [line: 144]                                                                  <
. . . . Child: 0 Const true of type bool [line: 144]                                                              <
. . . . Child: 1 Op: and of type (null) [line: 144]                                                               <
. . . . . Child: 0 Const false of type bool [line: 144]                                                           <
. . . . . Child: 1 Const false of type bool [line: 144]                                                           <
. . Sibling: 107 Call: outputb of type (null) [line: 145]                                                         <
. . . Child: 0 Op: or of type (null) [line: 145]                                                                  <
. . . . Child: 0 Const true of type bool [line: 145]                                                              <
. . . . Child: 1 Op: and of type (null) [line: 145]                                                               <
. . . . . Child: 0 Const false of type bool [line: 145]                                                           <
. . . . . Child: 1 Const false of type bool [line: 145]                                                           <
. . Sibling: 108 Call: outnl of type (null) [line: 146]                                                           <
. . Sibling: 109 Call: outputb of type (null) [line: 148]                                                         <
. . . Child: 0 Op: < of type (null) [line: 148]                                                                   <
. . . . Child: 0 Op: ? of type (null) [line: 148]                                                                 <
. . . . . Child: 0 Const 3 of type int [line: 148]                                                                <
. . . . Child: 1 Const 3 of type int [line: 148]                                                                  <
. . Sibling: 110 Call: outputb of type (null) [line: 149]                                                         <
. . . Child: 0 Op: < of type (null) [line: 149]                                                                   <
. . . . Child: 0 Op: ? of type (null) [line: 149]                                                                 <
. . . . . Child: 0 Const 3 of type int [line: 149]                                                                <
. . . . Child: 1 Const 3 of type int [line: 149]                                                                  <
. . Sibling: 111 Call: outputb of type (null) [line: 150]                                                         <
. . . Child: 0 Op: < of type (null) [line: 150]                                                                   <
. . . . Child: 0 Op: ? of type (null) [line: 150]                                                                 <
. . . . . Child: 0 Const 3 of type int [line: 150]                                                                <
. . . . Child: 1 Const 3 of type int [line: 150]                                                                  <
. . Sibling: 112 Call: outputb of type (null) [line: 151]                                                         <
. . . Child: 0 Op: < of type (null) [line: 151]                                                                   <
. . . . Child: 0 Op: ? of type (null) [line: 151]                                                                 <
. . . . . Child: 0 Const 3 of type int [line: 151]                                                                <
. . . . Child: 1 Const 3 of type int [line: 151]                                                                  <
. . Sibling: 113 Call: outputb of type (null) [line: 152]                                                         <
. . . Child: 0 Op: < of type (null) [line: 152]                                                                   <
. . . . Child: 0 Op: ? of type (null) [line: 152]                                                                 <
. . . . . Child: 0 Const 3 of type int [line: 152]                                                                <
. . . . Child: 1 Const 3 of type int [line: 152]                                                                  <
. . Sibling: 114 Call: outputb of type (null) [line: 153]                                                         <
. . . Child: 0 Op: < of type (null) [line: 153]                                                                   <
. . . . Child: 0 Op: ? of type (null) [line: 153]                                                                 <
. . . . . Child: 0 Const 3 of type int [line: 153]                                                                <
. . . . Child: 1 Const 3 of type int [line: 153]                                                                  <
. . Sibling: 115 Call: outputb of type (null) [line: 154]                                                         <
. . . Child: 0 Op: < of type (null) [line: 154]                                                                   <
. . . . Child: 0 Op: ? of type (null) [line: 154]                                                                 <
. . . . . Child: 0 Const 3 of type int [line: 154]                                                                <
. . . . Child: 1 Const 3 of type int [line: 154]                                                                  <
. . Sibling: 116 Call: outputb of type (null) [line: 155]                                                         <
. . . Child: 0 Op: < of type (null) [line: 155]                                                                   <
. . . . Child: 0 Op: ? of type (null) [line: 155]                                                                 <
. . . . . Child: 0 Const 3 of type int [line: 155]                                                                <
. . . . Child: 1 Const 3 of type int [line: 155]                                                                  <
. . Sibling: 117 Call: outputb of type (null) [line: 156]                                                         <
. . . Child: 0 Op: < of type (null) [line: 156]                                                                   <
. . . . Child: 0 Op: ? of type (null) [line: 156]                                                                 <
. . . . . Child: 0 Const 3 of type int [line: 156]                                                                <
. . . . Child: 1 Const 3 of type int [line: 156]                                                                  <
. . Sibling: 118 Call: outputb of type (null) [line: 157]                                                         <
. . . Child: 0 Op: < of type (null) [line: 157]                                                                   <
. . . . Child: 0 Op: ? of type (null) [line: 157]                                                                 <
. . . . . Child: 0 Const 3 of type int [line: 157]                                                                <
. . . . Child: 1 Const 3 of type int [line: 157]                                                                  <
. . Sibling: 119 Call: outputb of type (null) [line: 158]                                                         <
. . . Child: 0 Op: < of type (null) [line: 158]                                                                   <
. . . . Child: 0 Op: ? of type (null) [line: 158]                                                                 <
. . . . . Child: 0 Const 3 of type int [line: 158]                                                                <
. . . . Child: 1 Const 3 of type int [line: 158]                                                                  <
. . Sibling: 120 Call: outputb of type (null) [line: 159]                                                         <
. . . Child: 0 Op: < of type (null) [line: 159]                                                                   <
. . . . Child: 0 Op: ? of type (null) [line: 159]                                                                 <
. . . . . Child: 0 Const 3 of type int [line: 159]                                                                <
. . . . Child: 1 Const 3 of type int [line: 159]                                                                  <
. . Sibling: 121 Call: outputb of type (null) [line: 160]                                                         <
. . . Child: 0 Op: = of type (null) [line: 160]                                                                   <
. . . . Child: 0 Op: ? of type (null) [line: 160]                                                                 <
. . . . . Child: 0 Const 1 of type int [line: 160]                                                                <
. . . . Child: 1 Const 0 of type int [line: 160]                                                                  <
. . Sibling: 122 Call: outnl of type (null) [line: 161]                                                           <
. . Sibling: 123 Call: outputb of type (null) [line: 163]                                                         <
. . . Child: 0 Op: > of type (null) [line: 163]                                                                   <
. . . . Child: 0 Op: ? of type (null) [line: 163]                                                                 <
. . . . . Child: 0 Const 10000 of type int [line: 163]                                                            <
. . . . Child: 1 Const 0 of type int [line: 163]                                                                  <
. . Sibling: 124 Call: outputb of type (null) [line: 164]                                                         <
. . . Child: 0 Op: > of type (null) [line: 164]                                                                   <
. . . . Child: 0 Op: ? of type (null) [line: 164]                                                                 <
. . . . . Child: 0 Const 10000 of type int [line: 164]                                                            <
. . . . Child: 1 Const 0 of type int [line: 164]                                                                  <
. . Sibling: 125 Call: outnl of type (null) [line: 165]                                                           <
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 128                                                                                             |     Number of errors: 110

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P optype.c-                                                                                                       ./c- -P optype.c-
ERROR(17) : Symbol 'x' is not declared.                                                                           |     WARNING(7): Variable 'a' may be uninitialized when used here.
ERROR(18) : Symbol 'x' is not declared.                                                                           |     ERROR(8): '<' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(19) : Symbol 'x' is not declared.                                                                           |     WARNING(8): Variable 'b' may be uninitialized when used here.
=========== Symbol Table ===========                                                                              |     ERROR(9): '<' requires operands of the same type but lhs is type int and rhs is type char.
Scope: Global -----------------                                                                                   |     WARNING(9): Variable 'c' may be uninitialized when used here.
main:                                                                                                             |     ERROR(10): '<' requires operands of the same type but lhs is type bool and rhs is type int.
Scope: main -----------------                                                                                     |     ERROR(12): '<' requires operands of the same type but lhs is type bool and rhs is type char.
a:                                                                                                                |     ERROR(13): '<' requires operands of the same type but lhs is type char and rhs is type int.
b:                                                                                                                |     ERROR(14): '<' requires operands of the same type but lhs is type char and rhs is type bool.
c:                                                                                                                |     ERROR(17): Symbol 'x' is not declared.
=========== ============ ===========                                                                              |     ERROR(18): Symbol 'x' is not declared.
ID: a ParentID: <                                                                                                 |     ERROR(19): Symbol 'x' is not declared.
yes, we found ID: a                                                                                               |     Number of warnings: 3
ID: a ParentID: <                                                                                                 |     Number of errors: 9
yes, we found ID: a                                                                                               <
ID: a ParentID: <                                                                                                 <
yes, we found ID: a                                                                                               <
ID: a ParentID: <                                                                                                 <
yes, we found ID: a                                                                                               <
ID: a ParentID: <                                                                                                 <
yes, we found ID: a                                                                                               <
ID: a ParentID: <                                                                                                 <
yes, we found ID: a                                                                                               <
1 1 7                                                                                                             <
0 0 8                                                                                                             <
0 0 9                                                                                                             <
0 0 10                                                                                                            <
0 0 11                                                                                                            <
0 0 12                                                                                                            <
0 0 13                                                                                                            <
0 0 14                                                                                                            <
0 0 15                                                                                                            <
0 0 17                                                                                                            <
0 0 18                                                                                                            <
0 0 19                                                                                                            <
Func: main returns type void [line: 1]                                                                            <
. Child: 1 Compound [line: 2]                                                                                     <
. . Child: 0 Var: a of type int [line: 3]                                                                         <
. . Sibling: 1 Var: b of type bool [line: 4]                                                                      <
. . Sibling: 2 Var: c of type char [line: 5]                                                                      <
. . Child: 1 Op: < of type bool [line: 7]                                                                         <
. . . Child: 0 Id: a of type int [line: 7]                                                                        <
. . . Child: 1 Id: a of type int [line: 7]                                                                        <
. . Sibling: 1 Op: < of type (null) [line: 8]                                                                     <
. . . Child: 0 Id: a of type int [line: 8]                                                                        <
. . . Child: 1 Id: b of type bool [line: 8]                                                                       <
. . Sibling: 2 Op: < of type (null) [line: 9]                                                                     <
. . . Child: 0 Id: a of type int [line: 9]                                                                        <
. . . Child: 1 Id: c of type char [line: 9]                                                                       <
. . Sibling: 3 Op: < of type (null) [line: 10]                                                                    <
. . . Child: 0 Id: b of type bool [line: 10]                                                                      <
. . . Child: 1 Id: a of type int [line: 10]                                                                       <
. . Sibling: 4 Op: < of type (null) [line: 11]                                                                    <
. . . Child: 0 Id: b of type bool [line: 11]                                                                      <
. . . Child: 1 Id: b of type bool [line: 11]                                                                      <
. . Sibling: 5 Op: < of type (null) [line: 12]                                                                    <
. . . Child: 0 Id: b of type bool [line: 12]                                                                      <
. . . Child: 1 Id: c of type char [line: 12]                                                                      <
. . Sibling: 6 Op: < of type (null) [line: 13]                                                                    <
. . . Child: 0 Id: c of type char [line: 13]                                                                      <
. . . Child: 1 Id: a of type int [line: 13]                                                                       <
. . Sibling: 7 Op: < of type (null) [line: 14]                                                                    <
. . . Child: 0 Id: c of type char [line: 14]                                                                      <
. . . Child: 1 Id: b of type bool [line: 14]                                                                      <
. . Sibling: 8 Op: < of type (null) [line: 15]                                                                    <
. . . Child: 0 Id: c of type char [line: 15]                                                                      <
. . . Child: 1 Id: c of type char [line: 15]                                                                      <
. . Sibling: 9 Op: < of type (null) [line: 17]                                                                    <
. . . Child: 0 Id: x of type (null) [line: 17]                                                                    <
. . . Child: 1 Id: a of type int [line: 17]                                                                       <
. . Sibling: 10 Op: < of type (null) [line: 18]                                                                   <
. . . Child: 0 Id: x of type (null) [line: 18]                                                                    <
. . . Child: 1 Id: b of type bool [line: 18]                                                                      <
. . Sibling: 11 Op: < of type (null) [line: 19]                                                                   <
. . . Child: 0 Id: x of type (null) [line: 19]                                                                    <
. . . Child: 1 Id: c of type char [line: 19]                                                                      <
Number of warnings: 0                                                                                             <
Number of errors: 3                                                                                               <

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P overlap.c-                                                                                                      ./c- -P overlap.c-
=========== Symbol Table ===========                                                                              |     ERROR(LINKER): A function named 'main()' must be defined.
Scope: Global -----------------                                                                                   |     WARNING(4): The variable 'p' seems not to be used.
g:                                                                                                                |     WARNING(6): The variable 'a' seems not to be used.
main: @G                                                                                                          |     WARNING(8): The variable 'b' seems not to be used.
Scope: main -----------------                                                                                     |     WARNING(11): The variable 'c' seems not to be used.
h:                                                                                                                |     WARNING(15): The variable 'b' seems not to be used.
p:                                                                                                                |     WARNING(18): The variable 'c' seems not to be used.
=========== ============ ===========                                                                              |     Number of warnings: 6
Var: g of type int [line: 2]                                                                                      |     Number of errors: 1
Sibling: 1 Func: main returns type void [line: 4]                                                                 <
. Child: 0 Parm: p of type int [line: 4]                                                                          <
. Child: 1 Compound [line: 5]                                                                                     <
. . Child: 0 Var: a of type int [line: 6]                                                                         <
. . Child: 1 Compound [line: 7]                                                                                   <
. . . Child: 0 Var: b of type int [line: 8]                                                                       <
. . Sibling: 1 Compound [line: 10]                                                                                <
. . . Child: 0 Var: c of type int [line: 11]                                                                      <
. . Sibling: 2 Compound [line: 13]                                                                                <
. . . Child: 1 Compound [line: 14]                                                                                <
. . . . Child: 0 Var: b of type int [line: 15]                                                                    <
. . . Sibling: 1 Compound [line: 17]                                                                              <
. . . . Child: 0 Var: c of type int [line: 18]                                                                    <
Sibling: 2 Var: h of type int [line: 23]                                                                          <
Number of warnings: 0                                                                                             <
Number of errors: 0                                                                                               <

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P overlapArray.c-                                                                                                 ./c- -P overlapArray.c-
=========== Symbol Table ===========                                                                              |     ERROR(LINKER): A function named 'main()' must be defined.
Scope: Global -----------------                                                                                   |     WARNING(2): The variable 'p' seems not to be used.
main:                                                                                                             |     WARNING(4): The variable 'a' seems not to be used.
Scope: main -----------------                                                                                     |     WARNING(6): The variable 'b' seems not to be used.
p:                                                                                                                |     WARNING(9): The variable 'c' seems not to be used.
=========== ============ ===========                                                                              |     WARNING(13): The variable 'b' seems not to be used.
Func: main returns type void [line: 2]                                                                            |     WARNING(16): The variable 'c' seems not to be used.
. Child: 0 Parm: p of array of type int [line: 2]                                                                 |     Number of warnings: 6
. Child: 1 Compound [line: 3]                                                                                     |     Number of errors: 1
. . Child: 0 Var: a of array of type int [line: 4]                                                                <
. . Child: 1 Compound [line: 5]                                                                                   <
. . . Child: 0 Var: b of array of type int [line: 6]                                                              <
. . Sibling: 1 Compound [line: 8]                                                                                 <
. . . Child: 0 Var: c of array of type int [line: 9]                                                              <
. . Sibling: 2 Compound [line: 11]                                                                                <
. . . Child: 1 Compound [line: 12]                                                                                <
. . . . Child: 0 Var: b of array of type int [line: 13]                                                           <
. . . Sibling: 1 Compound [line: 15]                                                                              <
. . . . Child: 0 Var: c of array of type int [line: 16]                                                           <
Number of warnings: 0                                                                                             <
Number of errors: 0                                                                                               <

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P overlapStatic.c-                                                                                                ./c- -P overlapStatic.c-
=========== Symbol Table ===========                                                                              |     ERROR(LINKER): A function named 'main()' must be defined.
Scope: Global -----------------                                                                                   |     WARNING(4): The variable 'p' seems not to be used.
g:                                                                                                                |     WARNING(6): The variable 'a' seems not to be used.
main: @W)                                                                                                         |     WARNING(8): The variable 'b' seems not to be used.
Scope: main -----------------                                                                                     |     WARNING(11): The variable 'c' seems not to be used.
h:                                                                                                                |     WARNING(15): The variable 'b' seems not to be used.
p:                                                                                                                |     WARNING(18): The variable 'c' seems not to be used.
=========== ============ ===========                                                                              |     Number of warnings: 6
Var: g of type int [line: 2]                                                                                      |     Number of errors: 1
Sibling: 1 Func: main returns type void [line: 4]                                                                 <
. Child: 0 Parm: p of type int [line: 4]                                                                          <
. Child: 1 Compound [line: 5]                                                                                     <
. . Child: 0 Var: a of static type int [line: 6]                                                                  <
. . Child: 1 Compound [line: 7]                                                                                   <
. . . Child: 0 Var: b of static type int [line: 8]                                                                <
. . Sibling: 1 Compound [line: 10]                                                                                <
. . . Child: 0 Var: c of static type int [line: 11]                                                               <
. . Sibling: 2 Compound [line: 13]                                                                                <
. . . Child: 1 Compound [line: 14]                                                                                <
. . . . Child: 0 Var: b of static type int [line: 15]                                                             <
. . . Sibling: 1 Compound [line: 17]                                                                              <
. . . . Child: 0 Var: c of static type int [line: 18]                                                             <
Sibling: 2 Var: h of type int [line: 23]                                                                          <
Number of warnings: 0                                                                                             <
Number of errors: 0                                                                                               <

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P part2.c-                                                                                                        ./c- -P part2.c-
                                                                                                                  >     WARNING(4): Variable 'z' may be uninitialized when used here.
                                                                                                                  >     ERROR(5): Cannot return an array.
                                                                                                                  >     ERROR(20): Symbol 'x' is already declared at line 18.
                                                                                                                  >     ERROR(26): Symbol 'dog' is already declared at line 18.
                                                                                                                  >     WARNING(28): The variable 'z' seems not to be used.
                                                                                                                  >     ERROR(35): '+' requires operands of type int but lhs is of type char.
                                                                                                                  >     WARNING(35): The variable 'd' seems not to be used.
                                                                                                                  >     ERROR(42): Symbol 'zebu' is not declared.
                                                                                                                  >     ERROR(47): '+' requires operands of type int but lhs is of type char.
                                                                                                                  >     ERROR(47): Unary 'chsign' requires an operand of type int but was given type bool.
                                                                                                                  >     WARNING(49): Variable 'z' may be uninitialized when used here.
                                                                                                                  >     Number of warnings: 4
                                                                                                                  >     Number of errors: 7

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P randomRoll.c-                                                                                                   ./c- -P randomRoll.c-
ERROR(7) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                     |     ERROR(11): Symbol 'outputb' is not declared.
ERROR(8) : '+=' requires operands of type int but lhs is of type (null).                                          |     ERROR(13): Symbol 'outputb' is not declared.
ERROR(9) : Unary '++' requires an operand of type int but was given type (null).                                  |     ERROR(14): Symbol 'outnl' is not declared.
ERROR(11) : Symbol 'outputb' is not declared.                                                                     |     ERROR(16): Symbol 'outputb' is not declared.
ERROR(13) : Symbol 'outputb' is not declared.                                                                     |     ERROR(17): Symbol 'outnl' is not declared.
ERROR(14) : Symbol 'outnl' is not declared.                                                                       <
ERROR(16) : Symbol 'outputb' is not declared.                                                                     <
ERROR(17) : Symbol 'outnl' is not declared.                                                                       <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
i:                                                                                                                <
sum:                                                                                                              <
=========== ============ ===========                                                                              <
ID: i ParentID: <-                                                                                                <
yes, we found ID: i                                                                                               <
ID: i ParentID: <-                                                                                                <
yes, we found ID: i                                                                                               <
ID: i ParentID: <-                                                                                                <
yes, we found ID: i                                                                                               <
ID: sum ParentID: <-                                                                                              <
yes, we found ID: sum                                                                                             <
ID: sum ParentID: <-                                                                                              <
yes, we found ID: sum                                                                                             <
ID: sum ParentID: <-                                                                                              <
yes, we found ID: sum                                                                                             <
Func: main returns type void [line: 2]                                                                            <
. Child: 1 Compound [line: 3]                                                                                     <
. . Child: 0 Var: i of type int [line: 4]                                                                         <
. . Sibling: 1 Var: sum of type int [line: 4]                                                                     <
. . Child: 1 Assign: <- of type int [line: 6]                                                                     <
. . . Child: 0 Id: i of type int [line: 6]                                                                        <
. . . Child: 1 Assign: <- of type int [line: 6]                                                                   <
. . . . Child: 0 Id: sum of type int [line: 6]                                                                    <
. . . . Child: 1 Const 0 of type int [line: 6]                                                                    <
. . Sibling: 1 While [line: 7]                                                                                    <
. . . Child: 0 Op: < of type (null) [line: 7]                                                                     <
. . . . Child: 0 Id: i of type int [line: 7]                                                                      <
. . . . Child: 1 Const 1000 of type int [line: 7]                                                                 <
. . . Child: 1 Compound [line: 7]                                                                                 <
. . . . Child: 1 Assign: += of type (null) [line: 8]                                                              <
. . . . . Child: 0 Id: sum of type int [line: 8]                                                                  <
. . . . . Child: 1 Op: ? of type (null) [line: 8]                                                                 <
. . . . . . Child: 0 Const 6 of type int [line: 8]                                                                <
. . . . Sibling: 1 Assign: ++ of type (null) [line: 9]                                                            <
. . . . . Child: 0 Id: i of type int [line: 9]                                                                    <
. . Sibling: 2 Call: outputb of type (null) [line: 11]                                                            <
. . . Child: 0 Const true of type bool [line: 11]                                                                 <
. . Sibling: 3 Call: outputb of type (null) [line: 13]                                                            <
. . . Child: 0 Op: and of type (null) [line: 13]                                                                  <
. . . . Child: 0 Op: < of type (null) [line: 13]                                                                  <
. . . . . Child: 0 Const 2300 of type int [line: 13]                                                              <
. . . . . Child: 1 Id: sum of type (null) [line: 13]                                                              <
. . . . Child: 1 Op: < of type (null) [line: 13]                                                                  <
. . . . . Child: 0 Id: sum of type (null) [line: 13]                                                              <
. . . . . Child: 1 Const 2700 of type int [line: 13]                                                              <
. . Sibling: 4 Call: outnl of type (null) [line: 14]                                                              <
. . Sibling: 5 Call: outputb of type (null) [line: 16]                                                            <
. . . Child: 0 Op: < of type (null) [line: 16]                                                                    <
. . . . Child: 0 Op: ? of type (null) [line: 16]                                                                  <
. . . . . Child: 0 Const 3 of type int [line: 16]                                                                 <
. . . . Child: 1 Const 3 of type int [line: 16]                                                                   <
. . Sibling: 6 Call: outnl of type (null) [line: 17]                                                              <
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 8                                                                                               |     Number of errors: 5

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P return.c-                                                                                                       ./c- -P return.c-
ERROR(13) : Symbol 'outputc' is not declared.                                                                     |     ERROR(13): Symbol 'outputc' is not declared.
ERROR(37) : Symbol 'outnl' is not declared.                                                                       |     ERROR(37): Symbol 'outnl' is not declared.
ERROR(39) : Symbol 'output' is not declared.                                                                      |     ERROR(39): Symbol 'output' is not declared.
ERROR(40) : Symbol 'output' is not declared.                                                                      |     ERROR(40): Symbol 'output' is not declared.
ERROR(41) : Symbol 'outnl' is not declared.                                                                       |     ERROR(41): Symbol 'outnl' is not declared.
ERROR(43) : Symbol 'outputc' is not declared.                                                                     |     ERROR(43): Symbol 'outputc' is not declared.
ERROR(44) : Symbol 'outputb' is not declared.                                                                     |     ERROR(44): Symbol 'outputb' is not declared.
ERROR(45) : Symbol 'outnl' is not declared.                                                                       |     ERROR(45): Symbol 'outnl' is not declared.
ERROR(47) : Symbol 'outputb' is not declared.                                                                     |     ERROR(47): Symbol 'outputb' is not declared.
ERROR(48) : Symbol 'outputb' is not declared.                                                                     |     ERROR(48): Symbol 'outputb' is not declared.
ERROR(49) : Symbol 'outnl' is not declared.                                                                       |     ERROR(49): Symbol 'outnl' is not declared.
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
bender:                                                                                                           <
Scope: bender -----------------                                                                                   <
fry:                                                                                                              <
Scope: fry -----------------                                                                                      <
leela:                                                                                                            <
Scope: leela -----------------                                                                                    <
zoidberg:                                                                                                         <
Scope: zoidberg -----------------                                                                                 <
zapp:                                                                                                             <
Scope: zapp -----------------                                                                                     <
amy:                                                                                                              <
Scope: amy -----------------                                                                                      <
hermes:                                                                                                           <
Scope: hermes -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
=========== ============ ===========                                                                              <
Func: bender returns type int [line: 2]                                                                           <
. Child: 1 Compound [line: 3]                                                                                     <
Sibling: 1 Func: fry returns type int [line: 6]                                                                   <
. Child: 1 Compound [line: 7]                                                                                     <
. . Child: 1 Return [line: 8]                                                                                     <
. . . Child: 0 Const 114 of type int [line: 8]                                                                    <
Sibling: 2 Func: leela returns type void [line: 11]                                                               <
. Child: 1 Compound [line: 12]                                                                                    <
. . Child: 1 Call: outputc of type (null) [line: 13]                                                              <
. . . Child: 0 Const 'L' of type char [line: 13]                                                                  <
Sibling: 3 Func: zoidberg returns type char [line: 16]                                                            <
. Child: 1 Compound [line: 17]                                                                                    <
. . Child: 1 Return [line: 18]                                                                                    <
. . . Child: 0 Const 'z' of type char [line: 18]                                                                  <
Sibling: 4 Func: zapp returns type char [line: 21]                                                                <
. Child: 1 Compound [line: 22]                                                                                    <
Sibling: 5 Func: amy returns type bool [line: 25]                                                                 <
. Child: 1 Compound [line: 26]                                                                                    <
. . Child: 1 Return [line: 27]                                                                                    <
. . . Child: 0 Const true of type bool [line: 27]                                                                 <
Sibling: 6 Func: hermes returns type bool [line: 30]                                                              <
. Child: 1 Compound [line: 31]                                                                                    <
Sibling: 7 Func: main returns type int [line: 34]                                                                 <
. Child: 1 Compound [line: 35]                                                                                    <
. . Child: 1 Call: leela of type void [line: 36]                                                                  <
. . Sibling: 1 Call: outnl of type (null) [line: 37]                                                              <
. . Sibling: 2 Call: output of type (null) [line: 39]                                                             <
. . . Child: 0 Call: bender of type (null) [line: 39]                                                             <
. . Sibling: 3 Call: output of type (null) [line: 40]                                                             <
. . . Child: 0 Call: fry of type (null) [line: 40]                                                                <
. . Sibling: 4 Call: outnl of type (null) [line: 41]                                                              <
. . Sibling: 5 Call: outputc of type (null) [line: 43]                                                            <
. . . Child: 0 Call: zoidberg of type (null) [line: 43]                                                           <
. . Sibling: 6 Call: outputb of type (null) [line: 44]                                                            <
. . . Child: 0 Op: = of type (null) [line: 44]                                                                    <
. . . . Child: 0 Call: zapp of type (null) [line: 44]                                                             <
. . . . Child: 1 Const ' ' of type char [line: 44]                                                                <
. . Sibling: 7 Call: outnl of type (null) [line: 45]                                                              <
. . Sibling: 8 Call: outputb of type (null) [line: 47]                                                            <
. . . Child: 0 Call: amy of type (null) [line: 47]                                                                <
. . Sibling: 9 Call: outputb of type (null) [line: 48]                                                            <
. . . Child: 0 Call: hermes of type (null) [line: 48]                                                             <
. . Sibling: 10 Call: outnl of type (null) [line: 49]                                                             <
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 11                                                                                                    Number of errors: 11

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P scope.c-                                                                                                        ./c- -P scope.c-
ERROR(7) : Symbol 'bat' is not declared.                                                                          |     ERROR(LINKER): A function named 'main()' must be defined.
ERROR(8) : 'or' requires operands of type bool but lhs is of type (null).                                         |     ERROR(7): Symbol 'bat' is not declared.
ERROR(14) : Symbol 'b' is not declared.                                                                           |     ERROR(8): 'or' requires operands of type bool but lhs is of type int.
ERROR(25) : Symbol 'b' is not declared.                                                                           |     ERROR(8): 'or' requires operands of type bool but rhs is of type int.
ERROR(26) : Symbol 'c' is not declared.                                                                           |     WARNING(8): Variable 'a' may be uninitialized when used here.
ERROR(30) : Symbol 'b' is not declared.                                                                           |     ERROR(14): Symbol 'b' is not declared.
ERROR(31) : Symbol 'c' is not declared.                                                                           |     WARNING(15): Variable 'c' may be uninitialized when used here.
ERROR(41) : Symbol 'x' is not declared.                                                                           |     WARNING(19): The variable 'IWouldNotEatItWithAGoat' seems not to be used.
ERROR(45) : Symbol 'p' is not declared.                                                                           |     ERROR(25): Symbol 'b' is not declared.
ERROR(46) : '+' requires operands of type int but lhs is of type (null).                                          |     ERROR(26): Symbol 'c' is not declared.
ERROR(46) : Symbol 'q' is not declared.                                                                           |     ERROR(30): Symbol 'b' is not declared.
ERROR(46) : Symbol 'r' is not declared.                                                                           |     ERROR(31): Symbol 'c' is not declared.
ERROR(48) : Symbol 'cow' is not declared.                                                                         |     WARNING(40): The variable 'bat' seems not to be used.
ERROR(48) : Symbol 'u' is not declared.                                                                           |     ERROR(41): Symbol 'x' is not declared.
ERROR(49) : Symbol 'abraxsis' is not declared.                                                                    |     WARNING(44): Variable 'z' may be uninitialized when used here.
ERROR(50) : Symbol 'a' is not declared.                                                                           |     ERROR(45): Symbol 'p' is not declared.
ERROR(55) : Symbol 'g' is already declared.                                                                       |     ERROR(46): Symbol 'q' is not declared.
ERROR(57) : Symbol 'g' is already declared.                                                                       |     ERROR(46): Symbol 'r' is not declared.
ERROR(59) : Symbol 'x' is not declared.                                                                           |     ERROR(47): Symbol 's' is not declared.
ERROR(62) : Symbol 'g' is already declared.                                                                       |     ERROR(47): Symbol 't' is not declared.
ERROR(63) : Symbol 'ant' is already declared.                                                                     |     ERROR(48): Symbol 'cow' is not declared.
=========== Symbol Table ===========                                                                              |     ERROR(48): Symbol 'u' is not declared.
Scope: Global -----------------                                                                                   |     ERROR(48): Symbol 'v' is not declared.
ant: ·                                                                                                             |     ERROR(49): Symbol 'abraxsis' is not declared.
g:                                                                                                                |     ERROR(50): Symbol 'a' is not declared.
Scope: ant -----------------                                                                                      |     ERROR(55): Symbol 'g' is already declared at line 2.
bat: °â                                                                                                             |     ERROR(57): Symbol 'g' is already declared at line 2.
x:                                                                                                                |     ERROR(59): Symbol 'x' is not declared.
Scope: bat -----------------                                                                                      |     ERROR(62): Symbol 'g' is already declared at line 2.
g:                                                                                                                |     ERROR(63): Symbol 'ant' is already declared at line 3.
y:                                                                                                                |     Number of warnings: 5
Scope: g -----------------                                                                                        |     Number of errors: 25
g:                                                                                                                <
Scope: g -----------------                                                                                        <
ant:                                                                                                              <
Scope: ant -----------------                                                                                      <
=========== ============ ===========                                                                              <
Var: g of type int [line: 2]                                                                                      <
Sibling: 1 Func: ant returns type int [line: 3]                                                                   <
. Child: 0 Parm: x of type int [line: 3]                                                                          <
. Child: 1 Compound [line: 4]                                                                                     <
. . Child: 0 Var: a of type int [line: 5]                                                                         <
. . Child: 1 Call: bat of type (null) [line: 7]                                                                   <
. . . Child: 0 Const 3 of type int [line: 7]                                                                      <
. . Sibling: 1 Op: or of type (null) [line: 8]                                                                    <
. . . Child: 0 Id: a of type int [line: 8]                                                                        <
. . . Child: 1 Id: a of type int [line: 8]                                                                        <
. . Sibling: 2 Id: x of type int [line: 9]                                                                        <
. . Sibling: 3 Id: g of type int [line: 10]                                                                       <
. . Sibling: 4 Compound [line: 11]                                                                                <
. . . Child: 0 Var: c of type int [line: 12]                                                                      <
. . . Child: 1 Id: a of type int [line: 13]                                                                       <
. . . Sibling: 1 Id: b of type (null) [line: 14]                                                                  <
. . . Sibling: 2 Id: c of type int [line: 15]                                                                     <
. . . Sibling: 3 Id: g of type int [line: 16]                                                                     <
. . . Sibling: 4 Id: x of type int [line: 17]                                                                     <
. . . Sibling: 5 Compound [line: 18]                                                                              <
. . . . Child: 0 Var: IWouldNotEatItWithAGoat of type int [line: 19]                                              <
. . . . Child: 1 Id: c of type int [line: 20]                                                                     <
. . . . Sibling: 1 Id: a of type int [line: 21]                                                                   <
. . Sibling: 5 Id: a of type int [line: 24]                                                                       <
. . Sibling: 6 Id: b of type (null) [line: 25]                                                                    <
. . Sibling: 7 Id: c of type (null) [line: 26]                                                                    <
. . Sibling: 8 Id: x of type int [line: 27]                                                                       <
. . Sibling: 9 Compound [line: 28]                                                                                <
. . . Child: 1 Id: a of type int [line: 29]                                                                       <
. . . Sibling: 1 Id: b of type (null) [line: 30]                                                                  <
. . . Sibling: 2 Id: c of type (null) [line: 31]                                                                  <
. . . Sibling: 3 Id: x of type int [line: 32]                                                                     <
. . Sibling: 10 Id: x of type int [line: 34]                                                                      <
Sibling: 2 Func: bat returns type int [line: 37]                                                                  <
. Child: 0 Parm: y of type int [line: 37]                                                                         <
. Child: 1 Compound [line: 38]                                                                                    <
. . Child: 0 Var: z of type int [line: 39]                                                                        <
. . Sibling: 1 Var: bat of type int [line: 40]                                                                    <
. . Child: 1 Id: x of type (null) [line: 41]                                                                      <
. . Sibling: 1 Call: ant of type int [line: 42]                                                                   <
. . . Child: 0 Id: y of type (null) [line: 42]                                                                    <
. . Sibling: 2 Call: ant of type int [line: 43]                                                                   <
. . . Child: 0 Id: g of type (null) [line: 43]                                                                    <
. . Sibling: 3 Call: ant of type int [line: 44]                                                                   <
. . . Child: 0 Id: z of type (null) [line: 44]                                                                    <
. . Sibling: 4 Id: p of type (null) [line: 45]                                                                    <
. . Sibling: 5 Op: + of type (null) [line: 46]                                                                    <
. . . Child: 0 Id: q of type (null) [line: 46]                                                                    <
. . . Child: 1 Id: r of type (null) [line: 46]                                                                    <
. . Sibling: 6 Call: ant of type int [line: 47]                                                                   <
. . . Child: 0 Id: s of type (null) [line: 47]                                                                    <
. . . Sibling: 1 Id: t of type (null) [line: 47]                                                                  <
. . Sibling: 7 Assign: <- of type (null) [line: 48]                                                               <
. . . Child: 0 Id: u of type (null) [line: 48]                                                                    <
. . . Child: 1 Call: cow of type (null) [line: 48]                                                                <
. . . . Child: 0 Id: v of type (null) [line: 48]                                                                  <
. . Sibling: 8 Id: abraxsis of type (null) [line: 49]                                                             <
. . Sibling: 9 Id: a of type (null) [line: 50]                                                                    <
. . Sibling: 10 Id: z of type int [line: 51]                                                                      <
. . Sibling: 11 Id: g of type int [line: 52]                                                                      <
Sibling: 3 Var: g of type int [line: 55]                                                                          <
Sibling: 4 Func: g returns type int [line: 57]                                                                    <
. Child: 1 Compound [line: 58]                                                                                    <
. . Child: 1 Return [line: 59]                                                                                    <
. . . Child: 0 Id: x of type (null) [line: 59]                                                                    <
Sibling: 5 Func: g returns type void [line: 62]                                                                   <
. Child: 1 Compound [line: 62]                                                                                    <
Sibling: 6 Func: ant returns type void [line: 63]                                                                 <
. Child: 1 Compound [line: 63]                                                                                    <
Number of warnings: 0                                                                                             <
Number of errors: 21                                                                                              <

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P static.c-                                                                                                       ./c- -P static.c-
ERROR(6) : Symbol 'output' is not declared.                                                                       |     ERROR(6): Symbol 'output' is not declared.
ERROR(7) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                    |     ERROR(8): Symbol 'output' is not declared.
ERROR(8) : Symbol 'output' is not declared.                                                                       <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
x:                                                                                                                <
=========== ============ ===========                                                                              <
ID: x ParentID: output                                                                                            <
yes, we found ID: x                                                                                               <
ID: x ParentID: output                                                                                            <
yes, we found ID: x                                                                                               <
ID: x ParentID: output                                                                                            <
yes, we found ID: x                                                                                               <
Func: main returns type void [line: 2]                                                                            <
. Child: 1 Compound [line: 3]                                                                                     <
. . Child: 0 Init: : of type int [line: 4]                                                                        <
. . . Child: 0 Var: x of type (null) [line: 4]                                                                    <
. . . Child: 1 Const 111 of type int [line: 4]                                                                    <
. . Child: 1 Call: output of type (null) [line: 6]                                                                <
. . . Child: 0 Id: x of type (null) [line: 6]                                                                     <
. . Sibling: 1 Assign: <- of type (null) [line: 7]                                                                <
. . . Child: 0 Id: x of type (null) [line: 7]                                                                     <
. . . Child: 1 Const 222 of type int [line: 7]                                                                    <
. . Sibling: 2 Call: output of type (null) [line: 8]                                                              <
. . . Child: 0 Id: x of type (null) [line: 8]                                                                     <
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 3                                                                                               |     Number of errors: 2

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P strange.c-                                                                                                      ./c- -P strange.c-
                                                                                                                  >     ERROR(LINKER): A function named 'main()' must be defined.
                                                                                                                  >     ERROR(2): Symbol 'main' is already declared at line 1.
                                                                                                                  >     ERROR(3): Symbol 'main' is already declared at line 1.
                                                                                                                  >     ERROR(9): 'main' is a simple variable and cannot be called.
                                                                                                                  >     ERROR(18): 'main' is a simple variable and cannot be called.
                                                                                                                  >     Number of warnings: 0
                                                                                                                  >     Number of errors: 5

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P types.c-                                                                                                        ./c- -P types.c-
                                                                                                                  >     ERROR(8): Symbol 'c' is already declared at line 8.
                                                                                                                  >     WARNING(8): The variable 'c' seems not to be used.
                                                                                                                  >     ERROR(9): Symbol 'i' is already declared at line 4.
                                                                                                                  >     WARNING(10): The variable 'pumpkin' seems not to be used.
                                                                                                                  >     WARNING(12): Variable 'i' may be uninitialized when used here.
                                                                                                                  >     ERROR(13): '+' requires operands of type int but rhs is of type bool.
                                                                                                                  >     WARNING(13): Variable 'b' may be uninitialized when used here.
                                                                                                                  >     ERROR(14): '+' requires operands of type int but lhs is of type bool.
                                                                                                                  >     ERROR(15): '+' requires operands of type int but lhs is of type bool.
                                                                                                                  >     ERROR(15): '+' requires operands of type int but rhs is of type bool.
                                                                                                                  >     ERROR(17): 'and' requires operands of type bool but lhs is of type int.
                                                                                                                  >     ERROR(17): 'and' requires operands of type bool but rhs is of type int.
                                                                                                                  >     ERROR(18): 'and' requires operands of type bool but lhs is of type int.
                                                                                                                  >     ERROR(19): 'and' requires operands of type bool but rhs is of type int.
                                                                                                                  >     ERROR(23): '<-' requires operands of the same type but lhs is type int and rhs is type bool.
                                                                                                                  >     ERROR(24): '<-' requires operands of the same type but lhs is type bool and rhs is type int.
                                                                                                                  >     ERROR(28): '=' requires operands of the same type but lhs is type int and rhs is type bool.
                                                                                                                  >     ERROR(29): '=' requires operands of the same type but lhs is type bool and rhs is type int.
                                                                                                                  >     ERROR(33): '!=' requires operands of the same type but lhs is type int and rhs is type bool.
                                                                                                                  >     ERROR(34): '!=' requires operands of the same type but lhs is type bool and rhs is type int.
                                                                                                                  >     ERROR(37): The operation '+' does not work with arrays.
                                                                                                                  >     WARNING(37): Variable 'ia' may be uninitialized when used here.
                                                                                                                  >     ERROR(38): '+' requires operands of type int but rhs is of type bool.
                                                                                                                  >     ERROR(38): The operation '+' does not work with arrays.
                                                                                                                  >     WARNING(38): Variable 'ba' may be uninitialized when used here.
                                                                                                                  >     ERROR(39): '+' requires operands of type int but lhs is of type bool.
                                                                                                                  >     ERROR(39): The operation '+' does not work with arrays.
                                                                                                                  >     ERROR(40): '+' requires operands of type int but lhs is of type bool.
                                                                                                                  >     ERROR(40): '+' requires operands of type int but rhs is of type bool.
                                                                                                                  >     ERROR(40): The operation '+' does not work with arrays.
                                                                                                                  >     ERROR(42): 'and' requires operands of type bool but lhs is of type int.
                                                                                                                  >     ERROR(42): 'and' requires operands of type bool but rhs is of type int.
                                                                                                                  >     ERROR(42): The operation 'and' does not work with arrays.
                                                                                                                  >     ERROR(43): 'and' requires operands of type bool but lhs is of type int.
                                                                                                                  >     ERROR(43): The operation 'and' does not work with arrays.
                                                                                                                  >     ERROR(44): 'and' requires operands of type bool but rhs is of type int.
                                                                                                                  >     ERROR(44): The operation 'and' does not work with arrays.
                                                                                                                  >     ERROR(45): The operation 'and' does not work with arrays.
                                                                                                                  >     ERROR(48): '<-' requires operands of the same type but lhs is type int and rhs is type bool.
                                                                                                                  >     ERROR(49): '<-' requires operands of the same type but lhs is type bool and rhs is type int.
                                                                                                                  >     ERROR(53): '=' requires operands of the same type but lhs is type int and rhs is type bool.
                                                                                                                  >     ERROR(54): '=' requires operands of the same type but lhs is type bool and rhs is type int.
                                                                                                                  >     ERROR(57): '+' requires operands of type int but lhs is of type bool.
                                                                                                                  >     ERROR(58): '+' requires operands of type int but rhs is of type bool.
                                                                                                                  >     ERROR(59): '+' requires operands of type int but rhs is of type bool.
                                                                                                                  >     ERROR(61): 'or' requires operands of type bool but lhs is of type int.
                                                                                                                  >     ERROR(62): 'or' requires operands of type bool but rhs is of type int.
                                                                                                                  >     ERROR(63): 'or' requires operands of type bool but rhs is of type int.
                                                                                                                  >     ERROR(66): Unary 'not' requires an operand of type bool but was given type int.
                                                                                                                  >     ERROR(67): The operation 'not' does not work with arrays.
                                                                                                                  >     ERROR(68): The operation 'not' does not work with arrays.
                                                                                                                  >     ERROR(68): Unary 'not' requires an operand of type bool but was given type int.
                                                                                                                  >     ERROR(70): Unary 'chsign' requires an operand of type int but was given type bool.
                                                                                                                  >     ERROR(72): The operation 'chsign' does not work with arrays.
                                                                                                                  >     ERROR(72): Unary 'chsign' requires an operand of type int but was given type bool.
                                                                                                                  >     ERROR(73): The operation 'chsign' does not work with arrays.
                                                                                                                  >     ERROR(76): '>' requires operands of the same type but lhs is type bool and rhs is type int.
                                                                                                                  >     ERROR(77): '>' requires operands of the same type but lhs is type int and rhs is type bool.
                                                                                                                  >     ERROR(78): '>' requires operands of the same type but lhs is type bool and rhs is type int.
                                                                                                                  >     ERROR(79): '>' requires operands of the same type but lhs is type bool and rhs is type int.
                                                                                                                  >     ERROR(79): '>' requires operands of the same type but lhs is type int and rhs is type bool.
                                                                                                                  >     ERROR(103): 'b' is a simple variable and cannot be called.
                                                                                                                  >     ERROR(104): Cannot index nonarray 'b'.
                                                                                                                  >     ERROR(105): Cannot index nonarray 'x'.
                                                                                                                  >     ERROR(105): Symbol 'x' is not declared.
                                                                                                                  >     ERROR(106): Cannot index nonarray 'main'.
                                                                                                                  >     ERROR(106): Cannot use function 'main' as a variable.
                                                                                                                  >     ERROR(107): Cannot index nonarray 'main'.
                                                                                                                  >     ERROR(107): Cannot use function 'main' as a variable.
                                                                                                                  >     ERROR(108): Array 'ba' should be indexed by type int but got type bool.
                                                                                                                  >     ERROR(108): Array index is the unindexed array 'ba'.
                                                                                                                  >     ERROR(109): Array 'ba' should be indexed by type int but got type char.
                                                                                                                  >     ERROR(110): Cannot use function 'main' as a variable.
                                                                                                                  >     ERROR(111): The operation '+' does not work with arrays.
                                                                                                                  >     ERROR(112): Symbol 'a' is not declared.
                                                                                                                  >     ERROR(113): The operation 'sizeof' only works with arrays.
                                                                                                                  >     ERROR(114): Unary 'chsign' requires an operand of type int but was given type bool.
                                                                                                                  >     ERROR(116): Cannot return an array.
                                                                                                                  >     Number of warnings: 6
                                                                                                                  >     Number of errors: 72

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P types3.c-                                                                                                       ./c- -P types3.c-
                                                                                                                  >     ERROR(LINKER): A function named 'main()' must be defined.
                                                                                                                  >     ERROR(5): Symbol 'lund' is already declared at line 3.
                                                                                                                  >     WARNING(5): The variable 'a' seems not to be used.
                                                                                                                  >     ERROR(9): Symbol 'a' is already declared at line 9.
                                                                                                                  >     ERROR(11): Symbol 'a' is already declared at line 9.
                                                                                                                  >     ERROR(12): 'a' is a simple variable and cannot be called.
                                                                                                                  >     ERROR(13): Cannot use function 'fred' as a variable.
                                                                                                                  >     ERROR(16): Symbol 'fred' is already declared at line 9.
                                                                                                                  >     WARNING(18): The variable 'linda' seems not to be used.
                                                                                                                  >     ERROR(20): Symbol 'linda' is already declared at line 18.
                                                                                                                  >     WARNING(24): The variable 'eowyn' seems not to be used.
                                                                                                                  >     ERROR(26): Cannot use function 'arwen' as a variable.
                                                                                                                  >     Number of warnings: 3
                                                                                                                  >     Number of errors: 9

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P undeclared.c-                                                                                                   ./c- -P undeclared.c-
ERROR(3) : Symbol 'i' is not declared.                                                                            |     ERROR(LINKER): A function named 'main()' must be defined.
ERROR(3) : Symbol 'z' is not declared.                                                                            |     WARNING(1): The variable 'x' seems not to be used.
ERROR(4) : Symbol 'i' is not declared.                                                                            |     ERROR(3): Symbol 'i' is not declared.
ERROR(4) : Symbol 'z' is not declared.                                                                            |     ERROR(3): Symbol 'z' is not declared.
ERROR(5) : '+' requires operands of type int but lhs is of type (null).                                           |     ERROR(4): Symbol 'i' is not declared.
ERROR(5) : Symbol 'i' is not declared.                                                                            |     ERROR(4): Symbol 'z' is not declared.
ERROR(5) : Symbol 'i' is not declared.                                                                            |     ERROR(5): Symbol 'i' is not declared.
ERROR(6) : Symbol 'j' is not declared.                                                                            |     ERROR(5): Symbol 'i' is not declared.
ERROR(6) : Unary '++' requires an operand of type int but was given type (null).                                  |     ERROR(6): Symbol 'j' is not declared.
ERROR(7) : Symbol 'l' is not declared.                                                                            |     ERROR(7): Symbol 'l' is not declared.
ERROR(8) : Symbol 'm' is not declared.                                                                            |     ERROR(8): Symbol 'm' is not declared.
ERROR(8) : Unary 'chsign' requires an operand of type int but was given type (null).                              |     ERROR(9): Symbol 'k' is not declared.
=========== Symbol Table ===========                                                                              |     Number of warnings: 1
Scope: Global -----------------                                                                                   |     Number of errors: 11
main: °¿                                                                                                            <
Scope: main -----------------                                                                                     <
x:                                                                                                                <
=========== ============ ===========                                                                              <
ID: z ParentID: <-                                                                                                <
we did not find ID                                                                                                <
ID: z ParentID: <-                                                                                                <
we did not find ID                                                                                                <
ID: z ParentID: <-                                                                                                <
we did not find ID                                                                                                <
ID: i ParentID: <-                                                                                                <
we did not find ID                                                                                                <
ID: i ParentID: <-                                                                                                <
we did not find ID                                                                                                <
ID: i ParentID: <-                                                                                                <
we did not find ID                                                                                                <
Func: main returns type void [line: 1]                                                                            <
. Child: 0 Parm: x of type int [line: 1]                                                                          <
. Child: 1 Compound [line: 2]                                                                                     <
. . Child: 1 Assign: <- of type (null) [line: 3]                                                                  <
. . . Child: 0 Id: z of type (null) [line: 3]                                                                     <
. . . Child: 1 Id: i of type (null) [line: 3]                                                                     <
. . Sibling: 1 Assign: <- of type (null) [line: 4]                                                                <
. . . Child: 0 Id: z of type (null) [line: 4]                                                                     <
. . . Child: 1 Id: i of type (null) [line: 4]                                                                     <
. . Sibling: 2 Assign: <- of type (null) [line: 5]                                                                <
. . . Child: 0 Id: i of type (null) [line: 5]                                                                     <
. . . Child: 1 Op: + of type (null) [line: 5]                                                                     <
. . . . Child: 0 Id: i of type (null) [line: 5]                                                                   <
. . . . Child: 1 Const 3 of type int [line: 5]                                                                    <
. . Sibling: 3 Assign: ++ of type (null) [line: 6]                                                                <
. . . Child: 0 Id: j of type (null) [line: 6]                                                                     <
. . Sibling: 4 Id: l of type (null) [line: 7]                                                                     <
. . Sibling: 5 Op: chsign of type (null) [line: 8]                                                                <
. . . Child: 0 Id: m of type (null) [line: 8]                                                                     <
. . Sibling: 6 Call: main of type void [line: 9]                                                                  <
. . . Child: 0 Id: k of type (null) [line: 9]                                                                     <
Number of warnings: 0                                                                                             <
Number of errors: 12                                                                                              <

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P uninit.c-                                                                                                       ./c- -P uninit.c-
ERROR(3) : Symbol 'z' is already declared.                                                                        |     ERROR(LINKER): A function named 'main()' must be defined.
ERROR(3) : Symbol 'z' is already declared.                                                                        |     WARNING(1): The variable 'x' seems not to be used.
ERROR(7) : '+' requires operands of type int but lhs is of type (null).                                           |     ERROR(3): Symbol 'z' is already declared at line 3.
ERROR(8) : '+' requires operands of type int but rhs is of type (null).                                           |     ERROR(3): Symbol 'z' is already declared at line 3.
ERROR(9) : Unary '++' requires an operand of type int but was given type (null).                                  |     WARNING(5): Variable 'i' may be uninitialized when used here.
ERROR(12) : Unary 'chsign' requires an operand of type int but was given type (null).                             |     WARNING(7): Variable 'g' may be uninitialized when used here.
ERROR(13) : Symbol 'dog' is not declared.                                                                         |     WARNING(8): Variable 'h' may be uninitialized when used here.
ERROR(14) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     WARNING(9): Variable 'j' may be uninitialized when used here.
ERROR(15) : '+' requires operands of type int but lhs is of type (null).                                          |     WARNING(10): Variable 'k' may be uninitialized when used here.
ERROR(15) : '+' requires operands of type int but lhs is of type (null).                                          |     WARNING(11): Variable 'l' may be uninitialized when used here.
ERROR(15) : '+' requires operands of type int but lhs is of type (null).                                          |     WARNING(12): Variable 'm' may be uninitialized when used here.
ERROR(15) : '+' requires operands of type int but lhs is of type (null).                                          |     ERROR(13): Symbol 'dog' is not declared.
ERROR(15) : '+' requires operands of type int but lhs is of type (null).                                          |     ERROR(14): Cannot use function 'main' as a variable.
ERROR(15) : '+' requires operands of type int but lhs is of type (null).                                          |     Number of warnings: 8
ERROR(15) : '+' requires operands of type int but lhs is of type (null).                                          |     Number of errors: 5
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main: °uV                                                                                                          <
Scope: main -----------------                                                                                     <
x:                                                                                                                <
=========== ============ ===========                                                                              <
ID: z ParentID: <-                                                                                                <
we did not find ID                                                                                                <
ID: z ParentID: <-                                                                                                <
we did not find ID                                                                                                <
ID: z ParentID: <-                                                                                                <
we did not find ID                                                                                                <
ID: i ParentID: <-                                                                                                <
we did not find ID                                                                                                <
ID: i ParentID: <-                                                                                                <
we did not find ID                                                                                                <
ID: i ParentID: <-                                                                                                <
we did not find ID                                                                                                <
Func: main returns type void [line: 1]                                                                            <
. Child: 0 Parm: x of type int [line: 1]                                                                          <
. Child: 1 Compound [line: 2]                                                                                     <
. . Child: 0 Var: z of type int [line: 3]                                                                         <
. . Sibling: 1 Var: g of type int [line: 3]                                                                       <
. . Sibling: 2 Var: h of type int [line: 3]                                                                       <
. . Sibling: 3 Var: i of type int [line: 3]                                                                       <
. . Sibling: 4 Var: j of type int [line: 3]                                                                       <
. . Sibling: 5 Var: k of type int [line: 3]                                                                       <
. . Sibling: 6 Var: l of type int [line: 3]                                                                       <
. . Sibling: 7 Var: m of type int [line: 3]                                                                       <
. . Sibling: 8 Var: z of type int [line: 3]                                                                       <
. . Sibling: 9 Var: z of type int [line: 3]                                                                       <
. . Child: 1 Assign: <- of type (null) [line: 5]                                                                  <
. . . Child: 0 Id: z of type int [line: 5]                                                                        <
. . . Child: 1 Id: i of type int [line: 5]                                                                        <
. . Sibling: 1 Assign: <- of type (null) [line: 6]                                                                <
. . . Child: 0 Id: z of type int [line: 6]                                                                        <
. . . Child: 1 Id: i of type int [line: 6]                                                                        <
. . Sibling: 2 Assign: <- of type (null) [line: 7]                                                                <
. . . Child: 0 Id: i of type int [line: 7]                                                                        <
. . . Child: 1 Op: + of type (null) [line: 7]                                                                     <
. . . . Child: 0 Id: g of type int [line: 7]                                                                      <
. . . . Child: 1 Const 3 of type int [line: 7]                                                                    <
. . Sibling: 3 Assign: <- of type (null) [line: 8]                                                                <
. . . Child: 0 Id: i of type int [line: 8]                                                                        <
. . . Child: 1 Op: + of type (null) [line: 8]                                                                     <
. . . . Child: 0 Const 4 of type int [line: 8]                                                                    <
. . . . Child: 1 Id: h of type int [line: 8]                                                                      <
. . Sibling: 4 Assign: ++ of type (null) [line: 9]                                                                <
. . . Child: 0 Id: j of type int [line: 9]                                                                        <
. . Sibling: 5 Call: main of type void [line: 10]                                                                 <
. . . Child: 0 Id: k of type (null) [line: 10]                                                                    <
. . Sibling: 6 Id: l of type int [line: 11]                                                                       <
. . Sibling: 7 Op: chsign of type (null) [line: 12]                                                               <
. . . Child: 0 Id: m of type int [line: 12]                                                                       <
. . Sibling: 8 Call: dog of type (null) [line: 13]                                                                <
. . Sibling: 9 Assign: <- of type (null) [line: 14]                                                               <
. . . Child: 0 Id: main of type void [line: 14]                                                                   <
. . . Child: 1 Const 3 of type int [line: 14]                                                                     <
. . Sibling: 10 Op: + of type (null) [line: 15]                                                                   <
. . . Child: 0 Op: + of type (null) [line: 15]                                                                    <
. . . . Child: 0 Op: + of type (null) [line: 15]                                                                  <
. . . . . Child: 0 Op: + of type (null) [line: 15]                                                                <
. . . . . . Child: 0 Op: + of type (null) [line: 15]                                                              <
. . . . . . . Child: 0 Op: + of type (null) [line: 15]                                                            <
. . . . . . . . Child: 0 Op: + of type (null) [line: 15]                                                          <
. . . . . . . . . Child: 0 Id: g of type int [line: 15]                                                           <
. . . . . . . . . Child: 1 Id: h of type int [line: 15]                                                           <
. . . . . . . . Child: 1 Id: i of type int [line: 15]                                                             <
. . . . . . . Child: 1 Id: j of type int [line: 15]                                                               <
. . . . . . Child: 1 Id: k of type int [line: 15]                                                                 <
. . . . . Child: 1 Id: l of type int [line: 15]                                                                   <
. . . . Child: 1 Id: m of type int [line: 15]                                                                     <
. . . Child: 1 Id: z of type int [line: 15]                                                                       <
Number of warnings: 0                                                                                             <
Number of errors: 15                                                                                              <

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P uninit2.c-                                                                                                      ./c- -P uninit2.c-
ERROR(8) : Cannot index nonarray 'aa'.                                                                            |     WARNING(6): Variable 'b' may be uninitialized when used here.
ERROR(9) : Cannot index nonarray 'bb'.                                                                            |     WARNING(8): Variable 'aa' may be uninitialized when used here.
ERROR(9) : Cannot index nonarray 'cc'.                                                                            |     WARNING(9): Variable 'bb' may be uninitialized when used here.
ERROR(10) : Cannot index nonarray 'cc'.                                                                           |     WARNING(9): Variable 'cc' may be uninitialized when used here.
ERROR(11) : '+' requires operands of type int but lhs is of type (null).                                          |     WARNING(12): Variable 'dd' may be uninitialized when used here.
ERROR(11) : Cannot index nonarray 'cc'.                                                                           <
ERROR(12) : Cannot index nonarray 'cc'.                                                                           <
ERROR(12) : Cannot index nonarray 'dd'.                                                                           <
ERROR(13) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(13) : Cannot index nonarray 'cc'.                                                                           <
ERROR(13) : Cannot index nonarray 'ee'.                                                                           <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
a:                                                                                                                <
aa:                                                                                                               <
b:                                                                                                                <
bb:                                                                                                               <
c:                                                                                                                <
cc:                                                                                                               <
d:                                                                                                                <
dd:                                                                                                               <
ee:                                                                                                               <
=========== ============ ===========                                                                              <
ID: a ParentID: <-                                                                                                <
yes, we found ID: a                                                                                               <
ID: a ParentID: <-                                                                                                <
yes, we found ID: a                                                                                               <
ID: a ParentID: <-                                                                                                <
yes, we found ID: a                                                                                               <
ID: b ParentID: <-                                                                                                <
yes, we found ID: b                                                                                               <
ID: b ParentID: <-                                                                                                <
yes, we found ID: b                                                                                               <
ID: b ParentID: <-                                                                                                <
yes, we found ID: b                                                                                               <
Func: main returns type void [line: 1]                                                                                  Func: main returns type void [line: 1]
. Child: 1 Compound [line: 2]                                                                                           . Child: 1 Compound [line: 2]
. . Child: 0 Var: a of type int [line: 3]                                                                               . . Child: 0 Var: a of type int [line: 3]
. . Sibling: 1 Var: b of type int [line: 3]                                                                             . . Sibling: 1 Var: b of type int [line: 3]
. . Sibling: 2 Var: c of type int [line: 3]                                                                             . . Sibling: 2 Var: c of type int [line: 3]
. . Sibling: 3 Var: d of type int [line: 3]                                                                             . . Sibling: 3 Var: d of type int [line: 3]
. . Sibling: 4 Var: aa of array of type int [line: 4]                                                             |     . . Sibling: 4 Var: aa is array of type int [line: 4]
. . Sibling: 5 Var: bb of array of type int [line: 4]                                                             |     . . Sibling: 5 Var: bb is array of type int [line: 4]
. . Sibling: 6 Var: cc of array of type int [line: 4]                                                             |     . . Sibling: 6 Var: cc is array of type int [line: 4]
. . Sibling: 7 Var: dd of array of type int [line: 4]                                                             |     . . Sibling: 7 Var: dd is array of type int [line: 4]
. . Sibling: 8 Var: ee of array of type int [line: 4]                                                             |     . . Sibling: 8 Var: ee is array of type int [line: 4]
. . Child: 1 Assign: <- of type int [line: 6]                                                                           . . Child: 1 Assign: <- of type int [line: 6]
. . . Child: 0 Id: a of type int [line: 6]                                                                              . . . Child: 0 Id: a of type int [line: 6]
. . . Child: 1 Id: b of type int [line: 6]                                                                              . . . Child: 1 Id: b of type int [line: 6]
. . Sibling: 1 Assign: <- of type (null) [line: 7]                                                                |     . . Sibling: 1 Assign: <- of type int [line: 7]
. . . Child: 0 Id: a of type int [line: 7]                                                                              . . . Child: 0 Id: a of type int [line: 7]
. . . Child: 1 Id: b of type int [line: 7]                                                                              . . . Child: 1 Id: b of type int [line: 7]
. . Sibling: 2 Assign: <- of type (null) [line: 8]                                                                |     . . Sibling: 2 Assign: <- of type int [line: 8]
. . . Child: 0 Id: a of type int [line: 8]                                                                              . . . Child: 0 Id: a of type int [line: 8]
. . . Child: 1 Op: [ of type (null) [line: 8]                                                                     |     . . . Child: 1 Op: [ of type int [line: 8]
. . . . Child: 0 Id: aa of type int [line: 8]                                                                           . . . . Child: 0 Id: aa of type int [line: 8]
. . . . Child: 1 Const 3 of type int [line: 8]                                                                          . . . . Child: 1 Const 3 of type int [line: 8]
. . Sibling: 3 Assign: <- of type (null) [line: 9]                                                                |     . . Sibling: 3 Assign: <- of type int [line: 9]
. . . Child: 0 Id: a of type int [line: 9]                                                                              . . . Child: 0 Id: a of type int [line: 9]
. . . Child: 1 Op: [ of type (null) [line: 9]                                                                     |     . . . Child: 1 Op: [ of type int [line: 9]
. . . . Child: 0 Id: bb of type int [line: 9]                                                                           . . . . Child: 0 Id: bb of type int [line: 9]
. . . . Child: 1 Op: [ of type (null) [line: 9]                                                                   |     . . . . Child: 1 Op: [ of type int [line: 9]
. . . . . Child: 0 Id: cc of type int [line: 9]                                                                         . . . . . Child: 0 Id: cc of type int [line: 9]
. . . . . Child: 1 Const 3 of type int [line: 9]                                                                        . . . . . Child: 1 Const 3 of type int [line: 9]
. . Sibling: 4 Assign: <- of type (null) [line: 10]                                                               |     . . Sibling: 4 Assign: <- of type int [line: 10]
. . . Child: 0 Op: [ of type (null) [line: 10]                                                                    |     . . . Child: 0 Op: [ of type int [line: 10]
. . . . Child: 0 Id: cc of type int [line: 10]                                                                          . . . . Child: 0 Id: cc of type int [line: 10]
. . . . Child: 1 Id: c of type int [line: 10]                                                                           . . . . Child: 1 Id: c of type int [line: 10]
. . . Child: 1 Id: a of type int [line: 10]                                                                             . . . Child: 1 Id: a of type int [line: 10]
. . Sibling: 5 Assign: <- of type (null) [line: 11]                                                               |     . . Sibling: 5 Assign: <- of type int [line: 11]
. . . Child: 0 Op: [ of type (null) [line: 11]                                                                    |     . . . Child: 0 Op: [ of type int [line: 11]
. . . . Child: 0 Id: cc of type int [line: 11]                                                                          . . . . Child: 0 Id: cc of type int [line: 11]
. . . . Child: 1 Op: + of type (null) [line: 11]                                                                  |     . . . . Child: 1 Op: + of type int [line: 11]
. . . . . Child: 0 Id: c of type int [line: 11]                                                                         . . . . . Child: 0 Id: c of type int [line: 11]
. . . . . Child: 1 Id: d of type int [line: 11]                                                                         . . . . . Child: 1 Id: d of type int [line: 11]
. . . Child: 1 Id: a of type int [line: 11]                                                                             . . . Child: 1 Id: a of type int [line: 11]
. . Sibling: 6 Op: [ of type (null) [line: 12]                                                                    |     . . Sibling: 6 Op: [ of type int [line: 12]
. . . Child: 0 Id: cc of type int [line: 12]                                                                            . . . Child: 0 Id: cc of type int [line: 12]
. . . Child: 1 Op: [ of type (null) [line: 12]                                                                    |     . . . Child: 1 Op: [ of type int [line: 12]
. . . . Child: 0 Id: dd of type int [line: 12]                                                                          . . . . Child: 0 Id: dd of type int [line: 12]
. . . . Child: 1 Const 3 of type int [line: 12]                                                                         . . . . Child: 1 Const 3 of type int [line: 12]
. . Sibling: 7 Assign: <- of type (null) [line: 13]                                                               |     . . Sibling: 7 Assign: <- of type int [line: 13]
. . . Child: 0 Op: [ of type (null) [line: 13]                                                                    |     . . . Child: 0 Op: [ of type int [line: 13]
. . . . Child: 0 Id: cc of type int [line: 13]                                                                          . . . . Child: 0 Id: cc of type int [line: 13]
. . . . Child: 1 Op: [ of type (null) [line: 13]                                                                  |     . . . . Child: 1 Op: [ of type int [line: 13]
. . . . . Child: 0 Id: ee of type int [line: 13]                                                                        . . . . . Child: 0 Id: ee of type int [line: 13]
. . . . . Child: 1 Const 3 of type int [line: 13]                                                                       . . . . . Child: 1 Const 3 of type int [line: 13]
. . . Child: 1 Const 284 of type int [line: 13]                                                                         . . . Child: 1 Const 284 of type int [line: 13]
Number of warnings: 0                                                                                             |     Number of warnings: 5
Number of errors: 2                                                                                               |     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P var.c-                                                                                                          ./c- -P var.c-
ERROR(9) : Cannot index nonarray 'gy'.                                                                            |     ERROR(LINKER): A function named 'main()' must be defined.
ERROR(10) : The operation 'sizeof' only works with arrays.                                                        |     WARNING(12): Variable 'x' may be uninitialized when used here.
ERROR(13) : Cannot index nonarray 'y'.                                                                            |     WARNING(13): Variable 'y' may be uninitialized when used here.
ERROR(14) : The operation 'sizeof' only works with arrays.                                                        |     Number of warnings: 2
ERROR(17) : Cannot index nonarray 'py'.                                                                           |     Number of errors: 1
ERROR(18) : The operation 'sizeof' only works with arrays.                                                        <
ERROR(21) : Cannot index nonarray 'sy'.                                                                           <
ERROR(22) : The operation 'sizeof' only works with arrays.                                                        <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
gx:                                                                                                               <
gy:                                                                                                               <
main: pÉ'                                                                                                          <
Scope: main -----------------                                                                                     <
px:                                                                                                               <
py:                                                                                                               <
=========== ============ ===========                                                                              <
Var: gx of type int [line: 2]                                                                                     <
Sibling: 1 Var: gy of array of type int [line: 2]                                                                 <
Sibling: 2 Func: main returns type void [line: 3]                                                                 <
. Child: 0 Parm: px of type int [line: 3]                                                                         <
. Sibling: 1 Parm: py of array of type int [line: 3]                                                              <
. Child: 1 Compound [line: 4]                                                                                     <
. . Child: 0 Var: x of type int [line: 5]                                                                         <
. . Sibling: 1 Var: y of array of type int [line: 5]                                                              <
. . Sibling: 2 Var: sx of static type int [line: 6]                                                               <
. . Sibling: 3 Var: sy of array of type int [line: 6]                                                             <
. . Child: 1 Id: gx of type int [line: 8]                                                                         <
. . Sibling: 1 Op: [ of type (null) [line: 9]                                                                     <
. . . Child: 0 Id: gy of type int [line: 9]                                                                       <
. . . Child: 1 Const 9 of type int [line: 9]                                                                      <
. . Sibling: 2 Op: sizeof of type (null) [line: 10]                                                               <
. . . Child: 0 Id: gy of type int [line: 10]                                                                      <
. . Sibling: 3 Id: x of type int [line: 12]                                                                       <
. . Sibling: 4 Op: [ of type (null) [line: 13]                                                                    <
. . . Child: 0 Id: y of type int [line: 13]                                                                       <
. . . Child: 1 Const 9 of type int [line: 13]                                                                     <
. . Sibling: 5 Op: sizeof of type (null) [line: 14]                                                               <
. . . Child: 0 Id: y of type int [line: 14]                                                                       <
. . Sibling: 6 Id: px of type int [line: 16]                                                                      <
. . Sibling: 7 Op: [ of type (null) [line: 17]                                                                    <
. . . Child: 0 Id: py of type int [line: 17]                                                                      <
. . . Child: 1 Const 9 of type int [line: 17]                                                                     <
. . Sibling: 8 Op: sizeof of type (null) [line: 18]                                                               <
. . . Child: 0 Id: py of type int [line: 18]                                                                      <
. . Sibling: 9 Id: sx of type int [line: 20]                                                                      <
. . Sibling: 10 Op: [ of type (null) [line: 21]                                                                   <
. . . Child: 0 Id: sy of type int [line: 21]                                                                      <
. . . Child: 1 Const 9 of type int [line: 21]                                                                     <
. . Sibling: 11 Op: sizeof of type (null) [line: 22]                                                              <
. . . Child: 0 Id: sy of type int [line: 22]                                                                      <
Number of warnings: 0                                                                                             <
Number of errors: 4                                                                                               <

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P varAssign.c-                                                                                                    ./c- -P varAssign.c-
ERROR(7) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                    |     ERROR(13): Symbol 'output' is not declared.
ERROR(8) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                    |     ERROR(15): Symbol 'output' is not declared.
ERROR(9) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                    |     ERROR(17): Symbol 'output' is not declared.
ERROR(12) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(18): Symbol 'outnl' is not declared.
ERROR(12) : Cannot index nonarray 'gy'.                                                                           |     ERROR(22): Symbol 'output' is not declared.
ERROR(13) : Symbol 'output' is not declared.                                                                      |     ERROR(24): Symbol 'output' is not declared.
ERROR(15) : Symbol 'output' is not declared.                                                                      |     ERROR(26): Symbol 'output' is not declared.
ERROR(16) : Cannot index nonarray 'gy'.                                                                           |     ERROR(27): Symbol 'outnl' is not declared.
ERROR(16) : Cannot index nonarray 'gy'.                                                                           |     ERROR(31): Symbol 'output' is not declared.
ERROR(17) : Symbol 'output' is not declared.                                                                      |     ERROR(34): Symbol 'output' is not declared.
ERROR(18) : Symbol 'outnl' is not declared.                                                                       |     ERROR(37): Symbol 'output' is not declared.
ERROR(21) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(38): Symbol 'outnl' is not declared.
ERROR(21) : Cannot index nonarray 'y'.                                                                            |     ERROR(42): Symbol 'output' is not declared.
ERROR(22) : Symbol 'output' is not declared.                                                                      |     ERROR(44): Symbol 'output' is not declared.
ERROR(24) : Symbol 'output' is not declared.                                                                      |     ERROR(46): Symbol 'output' is not declared.
ERROR(25) : Cannot index nonarray 'y'.                                                                            |     ERROR(47): Symbol 'outnl' is not declared.
ERROR(25) : The operation 'sizeof' only works with arrays.                                                        |     ERROR(58): Symbol 'output' is not declared.
ERROR(26) : Symbol 'output' is not declared.                                                                      |     ERROR(59): Symbol 'output' is not declared.
ERROR(27) : Symbol 'outnl' is not declared.                                                                       |     ERROR(60): Symbol 'outnl' is not declared.
ERROR(31) : Symbol 'output' is not declared.                                                                      |     ERROR(65): Symbol 'output' is not declared.
ERROR(32) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(66): Symbol 'output' is not declared.
ERROR(33) : Cannot index nonarray 'py'.                                                                           |     ERROR(67): Symbol 'outnl' is not declared.
ERROR(33) : Cannot index nonarray 'py'.                                                                           <
ERROR(34) : Symbol 'output' is not declared.                                                                      <
ERROR(35) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(35) : Cannot index nonarray 'py'.                                                                           <
ERROR(36) : Cannot index nonarray 'py'.                                                                           <
ERROR(36) : The operation 'sizeof' only works with arrays.                                                        <
ERROR(37) : Symbol 'output' is not declared.                                                                      <
ERROR(38) : Symbol 'outnl' is not declared.                                                                       <
ERROR(41) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(41) : Cannot index nonarray 'sy'.                                                                           <
ERROR(42) : Symbol 'output' is not declared.                                                                      <
ERROR(44) : Symbol 'output' is not declared.                                                                      <
ERROR(45) : Cannot index nonarray 'sy'.                                                                           <
ERROR(45) : The operation 'sizeof' only works with arrays.                                                        <
ERROR(46) : Symbol 'output' is not declared.                                                                      <
ERROR(47) : Symbol 'outnl' is not declared.                                                                       <
ERROR(56) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(57) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(57) : Cannot index nonarray 'zy'.                                                                           <
ERROR(58) : Symbol 'output' is not declared.                                                                      <
ERROR(59) : Symbol 'output' is not declared.                                                                      <
ERROR(60) : Symbol 'outnl' is not declared.                                                                       <
ERROR(65) : Symbol 'output' is not declared.                                                                      <
ERROR(66) : Symbol 'output' is not declared.                                                                      <
ERROR(67) : Symbol 'outnl' is not declared.                                                                       <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
esperanza: p¤                                                                                                      <
gx:                                                                                                               <
gy:                                                                                                               <
Scope: esperanza -----------------                                                                                <
main:                                                                                                             <
px:                                                                                                               <
py:                                                                                                               <
Scope: main -----------------                                                                                     <
zx:                                                                                                               <
zy:                                                                                                               <
=========== ============ ===========                                                                              <
Var: gx of type int [line: 2]                                                                                     <
Sibling: 1 Var: gy of array of type int [line: 2]                                                                 <
Sibling: 2 Func: esperanza returns type void [line: 3]                                                            <
. Child: 0 Parm: px of type int [line: 3]                                                                         <
. Sibling: 1 Parm: py of array of type int [line: 3]                                                              <
. Child: 1 Compound [line: 4]                                                                                     <
. . Child: 0 Var: x of type int [line: 5]                                                                         <
. . Sibling: 1 Var: y of array of type int [line: 5]                                                              <
. . Sibling: 2 Var: sx of static type int [line: 6]                                                               <
. . Sibling: 3 Var: sy of array of type int [line: 6]                                                             <
. . Child: 1 Assign: <- of type (null) [line: 7]                                                                  <
. . . Child: 0 Id: gx of type int [line: 7]                                                                       <
. . . Child: 1 Const 444 of type int [line: 7]                                                                    <
. . Sibling: 1 Assign: <- of type (null) [line: 8]                                                                <
. . . Child: 0 Id: x of type int [line: 8]                                                                        <
. . . Child: 1 Const 555 of type int [line: 8]                                                                    <
. . Sibling: 2 Assign: <- of type (null) [line: 9]                                                                <
. . . Child: 0 Id: sx of type int [line: 9]                                                                       <
. . . Child: 1 Const 666 of type int [line: 9]                                                                    <
. . Sibling: 3 Assign: <- of type (null) [line: 12]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 12]                                                                    <
. . . . Child: 0 Id: gy of type int [line: 12]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 12]                                                                   <
. . . Child: 1 Const 222 of type int [line: 12]                                                                   <
. . Sibling: 4 Call: output of type (null) [line: 13]                                                             <
. . . Child: 0 Op: [ of type (null) [line: 13]                                                                    <
. . . . Child: 0 Id: gy of type (null) [line: 13]                                                                 <
. . . . Child: 1 Const 9 of type int [line: 13]                                                                   <
. . Sibling: 5 Assign: <- of type (null) [line: 14]                                                               <
. . . Child: 0 Id: gx of type int [line: 14]                                                                      <
. . . Child: 1 Id: gx of type int [line: 14]                                                                      <
. . Sibling: 6 Call: output of type (null) [line: 15]                                                             <
. . . Child: 0 Id: gx of type (null) [line: 15]                                                                   <
. . Sibling: 7 Assign: <- of type (null) [line: 16]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 16]                                                                    <
. . . . Child: 0 Id: gy of type int [line: 16]                                                                    <
. . . . Child: 1 Const 8 of type int [line: 16]                                                                   <
. . . Child: 1 Op: [ of type (null) [line: 16]                                                                    <
. . . . Child: 0 Id: gy of type int [line: 16]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 16]                                                                   <
. . Sibling: 8 Call: output of type (null) [line: 17]                                                             <
. . . Child: 0 Op: [ of type (null) [line: 17]                                                                    <
. . . . Child: 0 Id: gy of type (null) [line: 17]                                                                 <
. . . . Child: 1 Const 8 of type int [line: 17]                                                                   <
. . Sibling: 9 Call: outnl of type (null) [line: 18]                                                              <
. . Sibling: 10 Assign: <- of type (null) [line: 21]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 21]                                                                    <
. . . . Child: 0 Id: y of type int [line: 21]                                                                     <
. . . . Child: 1 Const 9 of type int [line: 21]                                                                   <
. . . Child: 1 Const 333 of type int [line: 21]                                                                   <
. . Sibling: 11 Call: output of type (null) [line: 22]                                                            <
. . . Child: 0 Op: [ of type (null) [line: 22]                                                                    <
. . . . Child: 0 Id: y of type (null) [line: 22]                                                                  <
. . . . Child: 1 Const 9 of type int [line: 22]                                                                   <
. . Sibling: 12 Assign: <- of type (null) [line: 23]                                                              <
. . . Child: 0 Id: x of type int [line: 23]                                                                       <
. . . Child: 1 Id: x of type int [line: 23]                                                                       <
. . Sibling: 13 Call: output of type (null) [line: 24]                                                            <
. . . Child: 0 Id: x of type (null) [line: 24]                                                                    <
. . Sibling: 14 Assign: <- of type (null) [line: 25]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 25]                                                                    <
. . . . Child: 0 Id: y of type int [line: 25]                                                                     <
. . . . Child: 1 Const 7 of type int [line: 25]                                                                   <
. . . Child: 1 Op: sizeof of type (null) [line: 25]                                                               <
. . . . Child: 0 Id: y of type int [line: 25]                                                                     <
. . Sibling: 15 Call: output of type (null) [line: 26]                                                            <
. . . Child: 0 Op: [ of type (null) [line: 26]                                                                    <
. . . . Child: 0 Id: y of type (null) [line: 26]                                                                  <
. . . . Child: 1 Const 7 of type int [line: 26]                                                                   <
. . Sibling: 16 Call: outnl of type (null) [line: 27]                                                             <
. . Sibling: 17 Assign: <- of type (null) [line: 30]                                                              <
. . . Child: 0 Id: px of type int [line: 30]                                                                      <
. . . Child: 1 Id: px of type int [line: 30]                                                                      <
. . Sibling: 18 Call: output of type (null) [line: 31]                                                            <
. . . Child: 0 Id: px of type (null) [line: 31]                                                                   <
. . Sibling: 19 Assign: <- of type (null) [line: 32]                                                              <
. . . Child: 0 Id: px of type int [line: 32]                                                                      <
. . . Child: 1 Const 101 of type int [line: 32]                                                                   <
. . Sibling: 20 Assign: <- of type (null) [line: 33]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 33]                                                                    <
. . . . Child: 0 Id: py of type int [line: 33]                                                                    <
. . . . Child: 1 Const 8 of type int [line: 33]                                                                   <
. . . Child: 1 Op: [ of type (null) [line: 33]                                                                    <
. . . . Child: 0 Id: py of type int [line: 33]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 33]                                                                   <
. . Sibling: 21 Call: output of type (null) [line: 34]                                                            <
. . . Child: 0 Op: [ of type (null) [line: 34]                                                                    <
. . . . Child: 0 Id: py of type (null) [line: 34]                                                                 <
. . . . Child: 1 Const 8 of type int [line: 34]                                                                   <
. . Sibling: 22 Assign: <- of type (null) [line: 35]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 35]                                                                    <
. . . . Child: 0 Id: py of type int [line: 35]                                                                    <
. . . . Child: 1 Const 8 of type int [line: 35]                                                                   <
. . . Child: 1 Const 102 of type int [line: 35]                                                                   <
. . Sibling: 23 Assign: <- of type (null) [line: 36]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 36]                                                                    <
. . . . Child: 0 Id: py of type int [line: 36]                                                                    <
. . . . Child: 1 Const 7 of type int [line: 36]                                                                   <
. . . Child: 1 Op: sizeof of type (null) [line: 36]                                                               <
. . . . Child: 0 Id: py of type int [line: 36]                                                                    <
. . Sibling: 24 Call: output of type (null) [line: 37]                                                            <
. . . Child: 0 Op: [ of type (null) [line: 37]                                                                    <
. . . . Child: 0 Id: py of type (null) [line: 37]                                                                 <
. . . . Child: 1 Const 7 of type int [line: 37]                                                                   <
. . Sibling: 25 Call: outnl of type (null) [line: 38]                                                             <
. . Sibling: 26 Assign: <- of type (null) [line: 41]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 41]                                                                    <
. . . . Child: 0 Id: sy of type int [line: 41]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 41]                                                                   <
. . . Child: 1 Const 444 of type int [line: 41]                                                                   <
. . Sibling: 27 Call: output of type (null) [line: 42]                                                            <
. . . Child: 0 Op: [ of type (null) [line: 42]                                                                    <
. . . . Child: 0 Id: sy of type (null) [line: 42]                                                                 <
. . . . Child: 1 Const 9 of type int [line: 42]                                                                   <
. . Sibling: 28 Assign: <- of type (null) [line: 43]                                                              <
. . . Child: 0 Id: sx of type int [line: 43]                                                                      <
. . . Child: 1 Id: sx of type int [line: 43]                                                                      <
. . Sibling: 29 Call: output of type (null) [line: 44]                                                            <
. . . Child: 0 Id: sx of type (null) [line: 44]                                                                   <
. . Sibling: 30 Assign: <- of type (null) [line: 45]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 45]                                                                    <
. . . . Child: 0 Id: sy of type int [line: 45]                                                                    <
. . . . Child: 1 Const 7 of type int [line: 45]                                                                   <
. . . Child: 1 Op: sizeof of type (null) [line: 45]                                                               <
. . . . Child: 0 Id: sy of type int [line: 45]                                                                    <
. . Sibling: 31 Call: output of type (null) [line: 46]                                                            <
. . . Child: 0 Op: [ of type (null) [line: 46]                                                                    <
. . . . Child: 0 Id: sy of type (null) [line: 46]                                                                 <
. . . . Child: 1 Const 7 of type int [line: 46]                                                                   <
. . Sibling: 32 Call: outnl of type (null) [line: 47]                                                             <
Sibling: 3 Func: main returns type void [line: 51]                                                                <
. Child: 1 Compound [line: 52]                                                                                    <
. . Child: 0 Var: zx of type int [line: 53]                                                                       <
. . Sibling: 1 Var: zy of array of type int [line: 53]                                                            <
. . Child: 1 Assign: <- of type (null) [line: 56]                                                                 <
. . . Child: 0 Id: zx of type int [line: 56]                                                                      <
. . . Child: 1 Const 999 of type int [line: 56]                                                                   <
. . Sibling: 1 Assign: <- of type (null) [line: 57]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 57]                                                                    <
. . . . Child: 0 Id: zy of type int [line: 57]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 57]                                                                   <
. . . Child: 1 Const 111 of type int [line: 57]                                                                   <
. . Sibling: 2 Call: output of type (null) [line: 58]                                                             <
. . . Child: 0 Id: zx of type (null) [line: 58]                                                                   <
. . Sibling: 3 Call: output of type (null) [line: 59]                                                             <
. . . Child: 0 Op: [ of type (null) [line: 59]                                                                    <
. . . . Child: 0 Id: zy of type (null) [line: 59]                                                                 <
. . . . Child: 1 Const 9 of type int [line: 59]                                                                   <
. . Sibling: 4 Call: outnl of type (null) [line: 60]                                                              <
. . Sibling: 5 Call: esperanza of type void [line: 62]                                                            <
. . . Child: 0 Id: zx of type (null) [line: 62]                                                                   <
. . . Sibling: 1 Id: zy of type (null) [line: 62]                                                                 <
. . Sibling: 6 Call: output of type (null) [line: 65]                                                             <
. . . Child: 0 Id: zx of type (null) [line: 65]                                                                   <
. . Sibling: 7 Call: output of type (null) [line: 66]                                                             <
. . . Child: 0 Op: [ of type (null) [line: 66]                                                                    <
. . . . Child: 0 Id: zy of type (null) [line: 66]                                                                 <
. . . . Child: 1 Const 9 of type int [line: 66]                                                                   <
. . Sibling: 8 Call: outnl of type (null) [line: 67]                                                              <
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 35                                                                                              |     Number of errors: 22

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P varPair.c-                                                                                                      ./c- -P varPair.c-
ERROR(8) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                    |     ERROR(10): Symbol 'output' is not declared.
ERROR(10) : Symbol 'output' is not declared.                                                                      |     ERROR(13): Symbol 'output' is not declared.
ERROR(11) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(14): Symbol 'outnl' is not declared.
ERROR(11) : Cannot index nonarray 'gy'.                                                                           |     ERROR(18): Symbol 'output' is not declared.
ERROR(12) : Cannot index nonarray 'gy'.                                                                           |     ERROR(21): Symbol 'output' is not declared.
ERROR(12) : Cannot index nonarray 'gy'.                                                                           |     ERROR(22): Symbol 'outnl' is not declared.
ERROR(13) : Symbol 'output' is not declared.                                                                      |     ERROR(26): Symbol 'output' is not declared.
ERROR(14) : Symbol 'outnl' is not declared.                                                                       |     ERROR(29): Symbol 'output' is not declared.
ERROR(16) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(30): Symbol 'outnl' is not declared.
ERROR(18) : Symbol 'output' is not declared.                                                                      |     ERROR(34): Symbol 'output' is not declared.
ERROR(19) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(37): Symbol 'output' is not declared.
ERROR(19) : Cannot index nonarray 'y'.                                                                            |     ERROR(38): Symbol 'outnl' is not declared.
ERROR(20) : Cannot index nonarray 'y'.                                                                            <
ERROR(20) : Cannot index nonarray 'y'.                                                                            <
ERROR(21) : Symbol 'output' is not declared.                                                                      <
ERROR(22) : Symbol 'outnl' is not declared.                                                                       <
ERROR(24) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(26) : Symbol 'output' is not declared.                                                                      <
ERROR(27) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(27) : Cannot index nonarray 'py'.                                                                           <
ERROR(28) : Cannot index nonarray 'py'.                                                                           <
ERROR(28) : Cannot index nonarray 'py'.                                                                           <
ERROR(29) : Symbol 'output' is not declared.                                                                      <
ERROR(30) : Symbol 'outnl' is not declared.                                                                       <
ERROR(32) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(34) : Symbol 'output' is not declared.                                                                      <
ERROR(35) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(35) : Cannot index nonarray 'sy'.                                                                           <
ERROR(36) : Cannot index nonarray 'sy'.                                                                           <
ERROR(36) : Cannot index nonarray 'sy'.                                                                           <
ERROR(37) : Symbol 'output' is not declared.                                                                      <
ERROR(38) : Symbol 'outnl' is not declared.                                                                       <
ERROR(44) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(44) : Cannot index nonarray 'ly'.                                                                           <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
fred: pIR                                                                                                         <
gx:                                                                                                               <
gy:                                                                                                               <
Scope: fred -----------------                                                                                     <
main:                                                                                                             <
px:                                                                                                               <
py:                                                                                                               <
Scope: main -----------------                                                                                     <
lx:                                                                                                               <
ly:                                                                                                               <
=========== ============ ===========                                                                              <
Var: gx of type int [line: 2]                                                                                     <
Sibling: 1 Var: gy of array of type int [line: 2]                                                                 <
Sibling: 2 Func: fred returns type void [line: 3]                                                                 <
. Child: 0 Parm: px of type int [line: 3]                                                                         <
. Sibling: 1 Parm: py of array of type int [line: 3]                                                              <
. Child: 1 Compound [line: 4]                                                                                     <
. . Child: 0 Var: x of type int [line: 5]                                                                         <
. . Sibling: 1 Var: y of array of type int [line: 5]                                                              <
. . Sibling: 2 Var: sx of static type int [line: 6]                                                               <
. . Sibling: 3 Var: sy of array of type int [line: 6]                                                             <
. . Child: 1 Assign: <- of type (null) [line: 8]                                                                  <
. . . Child: 0 Id: gx of type int [line: 8]                                                                       <
. . . Child: 1 Const 111 of type int [line: 8]                                                                    <
. . Sibling: 1 Assign: <- of type (null) [line: 9]                                                                <
. . . Child: 0 Id: gx of type int [line: 9]                                                                       <
. . . Child: 1 Id: gx of type int [line: 9]                                                                       <
. . Sibling: 2 Call: output of type (null) [line: 10]                                                             <
. . . Child: 0 Id: gx of type (null) [line: 10]                                                                   <
. . Sibling: 3 Assign: <- of type (null) [line: 11]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 11]                                                                    <
. . . . Child: 0 Id: gy of type int [line: 11]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 11]                                                                   <
. . . Child: 1 Const 222 of type int [line: 11]                                                                   <
. . Sibling: 4 Assign: <- of type (null) [line: 12]                                                               <
. . . Child: 0 Op: [ of type (null) [line: 12]                                                                    <
. . . . Child: 0 Id: gy of type int [line: 12]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 12]                                                                   <
. . . Child: 1 Op: [ of type (null) [line: 12]                                                                    <
. . . . Child: 0 Id: gy of type int [line: 12]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 12]                                                                   <
. . Sibling: 5 Call: output of type (null) [line: 13]                                                             <
. . . Child: 0 Op: [ of type (null) [line: 13]                                                                    <
. . . . Child: 0 Id: gy of type (null) [line: 13]                                                                 <
. . . . Child: 1 Const 9 of type int [line: 13]                                                                   <
. . Sibling: 6 Call: outnl of type (null) [line: 14]                                                              <
. . Sibling: 7 Assign: <- of type (null) [line: 16]                                                               <
. . . Child: 0 Id: x of type int [line: 16]                                                                       <
. . . Child: 1 Const 333 of type int [line: 16]                                                                   <
. . Sibling: 8 Assign: <- of type (null) [line: 17]                                                               <
. . . Child: 0 Id: x of type int [line: 17]                                                                       <
. . . Child: 1 Id: x of type int [line: 17]                                                                       <
. . Sibling: 9 Call: output of type (null) [line: 18]                                                             <
. . . Child: 0 Id: x of type (null) [line: 18]                                                                    <
. . Sibling: 10 Assign: <- of type (null) [line: 19]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 19]                                                                    <
. . . . Child: 0 Id: y of type int [line: 19]                                                                     <
. . . . Child: 1 Const 9 of type int [line: 19]                                                                   <
. . . Child: 1 Const 444 of type int [line: 19]                                                                   <
. . Sibling: 11 Assign: <- of type (null) [line: 20]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 20]                                                                    <
. . . . Child: 0 Id: y of type int [line: 20]                                                                     <
. . . . Child: 1 Const 9 of type int [line: 20]                                                                   <
. . . Child: 1 Op: [ of type (null) [line: 20]                                                                    <
. . . . Child: 0 Id: y of type int [line: 20]                                                                     <
. . . . Child: 1 Const 9 of type int [line: 20]                                                                   <
. . Sibling: 12 Call: output of type (null) [line: 21]                                                            <
. . . Child: 0 Op: [ of type (null) [line: 21]                                                                    <
. . . . Child: 0 Id: y of type (null) [line: 21]                                                                  <
. . . . Child: 1 Const 9 of type int [line: 21]                                                                   <
. . Sibling: 13 Call: outnl of type (null) [line: 22]                                                             <
. . Sibling: 14 Assign: <- of type (null) [line: 24]                                                              <
. . . Child: 0 Id: px of type int [line: 24]                                                                      <
. . . Child: 1 Const 555 of type int [line: 24]                                                                   <
. . Sibling: 15 Assign: <- of type (null) [line: 25]                                                              <
. . . Child: 0 Id: px of type int [line: 25]                                                                      <
. . . Child: 1 Id: px of type int [line: 25]                                                                      <
. . Sibling: 16 Call: output of type (null) [line: 26]                                                            <
. . . Child: 0 Id: px of type (null) [line: 26]                                                                   <
. . Sibling: 17 Assign: <- of type (null) [line: 27]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 27]                                                                    <
. . . . Child: 0 Id: py of type int [line: 27]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 27]                                                                   <
. . . Child: 1 Const 666 of type int [line: 27]                                                                   <
. . Sibling: 18 Assign: <- of type (null) [line: 28]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 28]                                                                    <
. . . . Child: 0 Id: py of type int [line: 28]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 28]                                                                   <
. . . Child: 1 Op: [ of type (null) [line: 28]                                                                    <
. . . . Child: 0 Id: py of type int [line: 28]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 28]                                                                   <
. . Sibling: 19 Call: output of type (null) [line: 29]                                                            <
. . . Child: 0 Op: [ of type (null) [line: 29]                                                                    <
. . . . Child: 0 Id: py of type (null) [line: 29]                                                                 <
. . . . Child: 1 Const 9 of type int [line: 29]                                                                   <
. . Sibling: 20 Call: outnl of type (null) [line: 30]                                                             <
. . Sibling: 21 Assign: <- of type (null) [line: 32]                                                              <
. . . Child: 0 Id: sx of type int [line: 32]                                                                      <
. . . Child: 1 Const 777 of type int [line: 32]                                                                   <
. . Sibling: 22 Assign: <- of type (null) [line: 33]                                                              <
. . . Child: 0 Id: sx of type int [line: 33]                                                                      <
. . . Child: 1 Id: sx of type int [line: 33]                                                                      <
. . Sibling: 23 Call: output of type (null) [line: 34]                                                            <
. . . Child: 0 Id: sx of type (null) [line: 34]                                                                   <
. . Sibling: 24 Assign: <- of type (null) [line: 35]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 35]                                                                    <
. . . . Child: 0 Id: sy of type int [line: 35]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 35]                                                                   <
. . . Child: 1 Const 888 of type int [line: 35]                                                                   <
. . Sibling: 25 Assign: <- of type (null) [line: 36]                                                              <
. . . Child: 0 Op: [ of type (null) [line: 36]                                                                    <
. . . . Child: 0 Id: sy of type int [line: 36]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 36]                                                                   <
. . . Child: 1 Op: [ of type (null) [line: 36]                                                                    <
. . . . Child: 0 Id: sy of type int [line: 36]                                                                    <
. . . . Child: 1 Const 9 of type int [line: 36]                                                                   <
. . Sibling: 26 Call: output of type (null) [line: 37]                                                            <
. . . Child: 0 Op: [ of type (null) [line: 37]                                                                    <
. . . . Child: 0 Id: sy of type (null) [line: 37]                                                                 <
. . . . Child: 1 Const 9 of type int [line: 37]                                                                   <
. . Sibling: 27 Call: outnl of type (null) [line: 38]                                                             <
Sibling: 3 Func: main returns type void [line: 41]                                                                <
. Child: 1 Compound [line: 41]                                                                                    <
. . Child: 0 Var: lx of type int [line: 42]                                                                       <
. . Sibling: 1 Var: ly of array of type int [line: 42]                                                            <
. . Child: 1 Assign: <- of type (null) [line: 44]                                                                 <
. . . Child: 0 Id: lx of type int [line: 44]                                                                      <
. . . Child: 1 Assign: <- of type (null) [line: 44]                                                               <
. . . . Child: 0 Op: [ of type (null) [line: 44]                                                                  <
. . . . . Child: 0 Id: ly of type int [line: 44]                                                                  <
. . . . . Child: 1 Const 0 of type int [line: 44]                                                                 <
. . . . Child: 1 Const 111 of type int [line: 44]                                                                 <
. . Sibling: 1 Call: fred of type void [line: 45]                                                                 <
. . . Child: 0 Id: gx of type (null) [line: 45]                                                                   <
. . . Sibling: 1 Id: gy of type (null) [line: 45]                                                                 <
. . Sibling: 2 Call: fred of type void [line: 46]                                                                 <
. . . Child: 0 Id: lx of type (null) [line: 46]                                                                   <
. . . Sibling: 1 Id: ly of type (null) [line: 46]                                                                 <
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 21                                                                                              |     Number of errors: 12

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P while.c-                                                                                                        ./c- -P while.c-
ERROR(7) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                     <
ERROR(7) : Unary '++' requires an operand of type int but was given type (null).                                  <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
x:                                                                                                                <
=========== ============ ===========                                                                              <
ID: x ParentID: <-                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: <-                                                                                                <
yes, we found ID: x                                                                                               <
ID: x ParentID: <-                                                                                                <
yes, we found ID: x                                                                                               <
Func: main returns type void [line: 2]                                                                                  Func: main returns type void [line: 2]
. Child: 1 Compound [line: 3]                                                                                           . Child: 1 Compound [line: 3]
. . Child: 0 Var: x of type int [line: 4]                                                                               . . Child: 0 Var: x of type int [line: 4]
. . Child: 1 Assign: <- of type int [line: 5]                                                                           . . Child: 1 Assign: <- of type int [line: 5]
. . . Child: 0 Id: x of type int [line: 5]                                                                              . . . Child: 0 Id: x of type int [line: 5]
. . . Child: 1 Const 0 of type int [line: 5]                                                                            . . . Child: 1 Const 0 of type int [line: 5]
. . Sibling: 1 While [line: 7]                                                                                          . . Sibling: 1 While [line: 7]
. . . Child: 0 Op: > of type (null) [line: 7]                                                                     |     . . . Child: 0 Op: > of type bool [line: 7]
. . . . Child: 0 Id: x of type int [line: 7]                                                                            . . . . Child: 0 Id: x of type int [line: 7]
. . . . Child: 1 Const 10 of type int [line: 7]                                                                         . . . . Child: 1 Const 10 of type int [line: 7]
. . . Child: 1 Assign: ++ of type (null) [line: 7]                                                                |     . . . Child: 1 Assign: ++ of type int [line: 7]
. . . . Child: 0 Id: x of type int [line: 7]                                                                            . . . . Child: 0 Id: x of type int [line: 7]
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 2                                                                                               |     Number of errors: 0

==============                                                                                                          ==============
==============                                                                                                          ==============
./c- -P whileif.c-                                                                                                      ./c- -P whileif.c-
ERROR(10) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   |     ERROR(13): '<-' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(11) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(13) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(14) : '<-' requires operands of the same type but lhs is type (null) and rhs is type bool.                  <
ERROR(15) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(16) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(18) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(18) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(19) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(19) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(19) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(20) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(20) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(20) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(21) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(21) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(21) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(21) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(22) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(22) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(22) : '<-' requires operands of the same type but lhs is type (null) and rhs is type int.                   <
ERROR(22) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(22) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(23) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(23) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(24) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(24) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(25) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(25) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(26) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(26) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(26) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(27) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(27) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(27) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(28) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(28) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(29) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(29) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(30) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(30) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(30) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(31) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(31) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(31) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(31) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(32) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(32) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(32) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(32) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(33) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(33) : '<' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(33) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(33) : '>' requires operands of the same type but lhs is type (null) and rhs is type int.                    <
ERROR(53) : '*' requires operands of type int but lhs is of type (null).                                          <
=========== Symbol Table ===========                                                                              <
Scope: Global -----------------                                                                                   <
main:                                                                                                             <
Scope: main -----------------                                                                                     <
a:                                                                                                                <
b:                                                                                                                <
c:                                                                                                                <
d:                                                                                                                <
e:                                                                                                                <
x:                                                                                                                <
y:                                                                                                                <
z:                                                                                                                <
=========== ============ ===========                                                                              <
ID: b ParentID: <-                                                                                                <
yes, we found ID: b                                                                                               <
ID: b ParentID: <-                                                                                                <
yes, we found ID: b                                                                                               <
ID: b ParentID: <-                                                                                                <
yes, we found ID: b                                                                                               <
Func: main returns type int [line: 2]                                                                             <
. Child: 1 Compound [line: 3]                                                                                     <
. . Child: 0 Var: x of type int [line: 4]                                                                         <
. . Sibling: 1 Var: y of type int [line: 5]                                                                       <
. . Sibling: 2 Var: z of type int [line: 6]                                                                       <
. . Sibling: 3 Var: a of type bool [line: 7]                                                                      <
. . Sibling: 4 Var: b of type bool [line: 7]                                                                      <
. . Sibling: 5 Var: c of type bool [line: 7]                                                                      <
. . Sibling: 6 Var: d of type bool [line: 7]                                                                      <
. . Sibling: 7 Var: e of type bool [line: 7]                                                                      <
. . Child: 1 Assign: <- of type bool [line: 9]                                                                    <
. . . Child: 0 Id: b of type bool [line: 9]                                                                       <
. . . Child: 1 Const false of type bool [line: 9]                                                                 <
. . Sibling: 1 While [line: 10]                                                                                   <
. . . Child: 0 Id: b of type bool [line: 10]                                                                      <
. . . Child: 1 Assign: <- of type (null) [line: 10]                                                               <
. . . . Child: 0 Id: x of type int [line: 10]                                                                     <
. . . . Child: 1 Const 88 of type int [line: 10]                                                                  <
. . Sibling: 2 If [line: 11]                                                                                      <
. . . Child: 0 Op: > of type (null) [line: 11]                                                                    <
. . . . Child: 0 Id: x of type int [line: 11]                                                                     <
. . . . Child: 1 Const 2 of type int [line: 11]                                                                   <
. . Sibling: 3 Assign: <- of type (null) [line: 13]                                                               <
. . . Child: 0 Id: a of type bool [line: 13]                                                                      <
. . . Child: 1 Assign: <- of type (null) [line: 13]                                                               <
. . . . Child: 0 Id: b of type bool [line: 13]                                                                    <
. . . . Child: 1 Assign: <- of type (null) [line: 13]                                                             <
. . . . . Child: 0 Id: c of type bool [line: 13]                                                                  <
. . . . . Child: 1 Assign: <- of type (null) [line: 13]                                                           <
. . . . . . Child: 0 Id: d of type bool [line: 13]                                                                <
. . . . . . Child: 1 Const 3 of type int [line: 13]                                                               <
. . Sibling: 4 If [line: 14]                                                                                      <
. . . Child: 0 Const false of type bool [line: 14]                                                                <
. . . Child: 1 Assign: <- of type (null) [line: 14]                                                               <
. . . . Child: 0 Id: e of type bool [line: 14]                                                                    <
. . . . Child: 1 Const true of type bool [line: 14]                                                               <
. . Sibling: 5 Assign: <- of type (null) [line: 15]                                                               <
. . . Child: 0 Id: x of type int [line: 15]                                                                       <
. . . Child: 1 Const 1184 of type int [line: 15]                                                                  <
. . Sibling: 6 Assign: <- of type (null) [line: 16]                                                               <
. . . Child: 0 Id: y of type int [line: 16]                                                                       <
. . . Child: 1 Const 1210 of type int [line: 16]                                                                  <
. . Sibling: 7 If [line: 18]                                                                                      <
. . . Child: 0 Op: > of type (null) [line: 18]                                                                    <
. . . . Child: 0 Id: x of type int [line: 18]                                                                     <
. . . . Child: 1 Const 1 of type int [line: 18]                                                                   <
. . . Child: 1 Assign: <- of type (null) [line: 18]                                                               <
. . . . Child: 0 Id: z of type int [line: 18]                                                                     <
. . . . Child: 1 Const 1 of type int [line: 18]                                                                   <
. . Sibling: 8 If [line: 19]                                                                                      <
. . . Child: 0 Op: > of type (null) [line: 19]                                                                    <
. . . . Child: 0 Id: x of type int [line: 19]                                                                     <
. . . . Child: 1 Const 2 of type int [line: 19]                                                                   <
. . . Child: 1 Assign: <- of type (null) [line: 19]                                                               <
. . . . Child: 0 Id: z of type int [line: 19]                                                                     <
. . . . Child: 1 Const 1 of type int [line: 19]                                                                   <
. . . Child: 2 Assign: <- of type (null) [line: 19]                                                               <
. . . . Child: 0 Id: z of type int [line: 19]                                                                     <
. . . . Child: 1 Const 2 of type int [line: 19]                                                                   <
. . Sibling: 9 If [line: 20]                                                                                      <
. . . Child: 0 Op: > of type (null) [line: 20]                                                                    <
. . . . Child: 0 Id: x of type int [line: 20]                                                                     <
. . . . Child: 1 Const 3 of type int [line: 20]                                                                   <
. . . Child: 1 If [line: 20]                                                                                      <
. . . . Child: 0 Op: > of type (null) [line: 20]                                                                  <
. . . . . Child: 0 Id: y of type int [line: 20]                                                                   <
. . . . . Child: 1 Const 4 of type int [line: 20]                                                                 <
. . . . Child: 1 Assign: <- of type (null) [line: 20]                                                             <
. . . . . Child: 0 Id: z of type int [line: 20]                                                                   <
. . . . . Child: 1 Const 3 of type int [line: 20]                                                                 <
. . Sibling: 10 If [line: 21]                                                                                     <
. . . Child: 0 Op: > of type (null) [line: 21]                                                                    <
. . . . Child: 0 Id: x of type int [line: 21]                                                                     <
. . . . Child: 1 Const 5 of type int [line: 21]                                                                   <
. . . Child: 1 If [line: 21]                                                                                      <
. . . . Child: 0 Op: > of type (null) [line: 21]                                                                  <
. . . . . Child: 0 Id: y of type int [line: 21]                                                                   <
. . . . . Child: 1 Const 6 of type int [line: 21]                                                                 <
. . . . Child: 1 Assign: <- of type (null) [line: 21]                                                             <
. . . . . Child: 0 Id: z of type int [line: 21]                                                                   <
. . . . . Child: 1 Const 4 of type int [line: 21]                                                                 <
. . . . Child: 2 Assign: <- of type (null) [line: 21]                                                             <
. . . . . Child: 0 Id: z of type int [line: 21]                                                                   <
. . . . . Child: 1 Const 5 of type int [line: 21]                                                                 <
. . Sibling: 11 If [line: 22]                                                                                     <
. . . Child: 0 Op: > of type (null) [line: 22]                                                                    <
. . . . Child: 0 Id: x of type int [line: 22]                                                                     <
. . . . Child: 1 Const 7 of type int [line: 22]                                                                   <
. . . Child: 1 If [line: 22]                                                                                      <
. . . . Child: 0 Op: > of type (null) [line: 22]                                                                  <
. . . . . Child: 0 Id: y of type int [line: 22]                                                                   <
. . . . . Child: 1 Const 8 of type int [line: 22]                                                                 <
. . . . Child: 1 Assign: <- of type (null) [line: 22]                                                             <
. . . . . Child: 0 Id: z of type int [line: 22]                                                                   <
. . . . . Child: 1 Const 6 of type int [line: 22]                                                                 <
. . . . Child: 2 Assign: <- of type (null) [line: 22]                                                             <
. . . . . Child: 0 Id: z of type int [line: 22]                                                                   <
. . . . . Child: 1 Const 7 of type int [line: 22]                                                                 <
. . . Child: 2 Assign: <- of type (null) [line: 22]                                                               <
. . . . Child: 0 Id: z of type int [line: 22]                                                                     <
. . . . Child: 1 Const 8 of type int [line: 22]                                                                   <
. . Sibling: 12 If [line: 23]                                                                                     <
. . . Child: 0 Op: < of type (null) [line: 23]                                                                    <
. . . . Child: 0 Id: x of type int [line: 23]                                                                     <
. . . . Child: 1 Const 9 of type int [line: 23]                                                                   <
. . . Child: 1 While [line: 23]                                                                                   <
. . . . Child: 0 Op: > of type (null) [line: 23]                                                                  <
. . . . . Child: 0 Id: y of type int [line: 23]                                                                   <
. . . . . Child: 1 Const 10 of type int [line: 23]                                                                <
. . . . Child: 1 Const 9 of type int [line: 23]                                                                   <
. . Sibling: 13 While [line: 24]                                                                                  <
. . . Child: 0 Op: > of type (null) [line: 24]                                                                    <
. . . . Child: 0 Id: y of type int [line: 24]                                                                     <
. . . . Child: 1 Const 10 of type int [line: 24]                                                                  <
. . . Child: 1 If [line: 24]                                                                                      <
. . . . Child: 0 Op: < of type (null) [line: 24]                                                                  <
. . . . . Child: 0 Id: x of type int [line: 24]                                                                   <
. . . . . Child: 1 Const 3 of type int [line: 24]                                                                 <
. . . . Child: 1 Const 3 of type int [line: 24]                                                                   <
. . Sibling: 14 While [line: 25]                                                                                  <
. . . Child: 0 Op: > of type (null) [line: 25]                                                                    <
. . . . Child: 0 Id: y of type int [line: 25]                                                                     <
. . . . Child: 1 Const 10 of type int [line: 25]                                                                  <
. . . Child: 1 If [line: 25]                                                                                      <
. . . . Child: 0 Op: < of type (null) [line: 25]                                                                  <
. . . . . Child: 0 Id: x of type int [line: 25]                                                                   <
. . . . . Child: 1 Const 3 of type int [line: 25]                                                                 <
. . . . Child: 1 Const 3 of type int [line: 25]                                                                   <
. . . . Child: 2 Const 9 of type int [line: 25]                                                                   <
. . Sibling: 15 If [line: 26]                                                                                     <
. . . Child: 0 Op: < of type (null) [line: 26]                                                                    <
. . . . Child: 0 Id: x of type int [line: 26]                                                                     <
. . . . Child: 1 Const 9 of type int [line: 26]                                                                   <
. . . Child: 1 While [line: 26]                                                                                   <
. . . . Child: 0 Op: > of type (null) [line: 26]                                                                  <
. . . . . Child: 0 Id: y of type int [line: 26]                                                                   <
. . . . . Child: 1 Const 10 of type int [line: 26]                                                                <
. . . . Child: 1 If [line: 26]                                                                                    <
. . . . . Child: 0 Op: < of type (null) [line: 26]                                                                <
. . . . . . Child: 0 Id: x of type int [line: 26]                                                                 <
. . . . . . Child: 1 Const 3 of type int [line: 26]                                                               <
. . . . . Child: 1 Const 3 of type int [line: 26]                                                                 <
. . . . . Child: 2 Const 9 of type int [line: 26]                                                                 <
. . Sibling: 16 While [line: 27]                                                                                  <
. . . Child: 0 Op: < of type (null) [line: 27]                                                                    <
. . . . Child: 0 Id: y of type int [line: 27]                                                                     <
. . . . Child: 1 Const 11 of type int [line: 27]                                                                  <
. . . Child: 1 If [line: 27]                                                                                      <
. . . . Child: 0 Op: < of type (null) [line: 27]                                                                  <
. . . . . Child: 0 Id: x of type int [line: 27]                                                                   <
. . . . . Child: 1 Const 12 of type int [line: 27]                                                                <
. . . . Child: 1 While [line: 27]                                                                                 <
. . . . . Child: 0 Op: > of type (null) [line: 27]                                                                <
. . . . . . Child: 0 Id: y of type int [line: 27]                                                                 <
. . . . . . Child: 1 Const 13 of type int [line: 27]                                                              <
. . . . . Child: 1 Const 10 of type int [line: 27]                                                                <
. . Sibling: 17 If [line: 28]                                                                                     <
. . . Child: 0 Op: < of type (null) [line: 28]                                                                    <
. . . . Child: 0 Id: x of type int [line: 28]                                                                     <
. . . . Child: 1 Const 13 of type int [line: 28]                                                                  <
. . . Child: 1 While [line: 28]                                                                                   <
. . . . Child: 0 Op: > of type (null) [line: 28]                                                                  <
. . . . . Child: 0 Id: y of type int [line: 28]                                                                   <
. . . . . Child: 1 Const 14 of type int [line: 28]                                                                <
. . . . Child: 1 Const 20 of type int [line: 28]                                                                  <
. . . Child: 2 Const 21 of type int [line: 28]                                                                    <
. . Sibling: 18 While [line: 29]                                                                                  <
. . . Child: 0 Op: > of type (null) [line: 29]                                                                    <
. . . . Child: 0 Id: y of type int [line: 29]                                                                     <
. . . . Child: 1 Const 15 of type int [line: 29]                                                                  <
. . . Child: 1 If [line: 29]                                                                                      <
. . . . Child: 0 Op: < of type (null) [line: 29]                                                                  <
. . . . . Child: 0 Id: x of type int [line: 29]                                                                   <
. . . . . Child: 1 Const 16 of type int [line: 29]                                                                <
. . . . Child: 1 Const 22 of type int [line: 29]                                                                  <
. . . . Child: 2 Const 23 of type int [line: 29]                                                                  <
. . Sibling: 19 While [line: 30]                                                                                  <
. . . Child: 0 Op: > of type (null) [line: 30]                                                                    <
. . . . Child: 0 Id: y of type int [line: 30]                                                                     <
. . . . Child: 1 Const 15 of type int [line: 30]                                                                  <
. . . Child: 1 If [line: 30]                                                                                      <
. . . . Child: 0 Op: < of type (null) [line: 30]                                                                  <
. . . . . Child: 0 Id: x of type int [line: 30]                                                                   <
. . . . . Child: 1 Const 16 of type int [line: 30]                                                                <
. . . . Child: 1 While [line: 30]                                                                                 <
. . . . . Child: 0 Op: < of type (null) [line: 30]                                                                <
. . . . . . Child: 0 Id: y of type int [line: 30]                                                                 <
. . . . . . Child: 1 Const 3 of type int [line: 30]                                                               <
. . . . . Child: 1 Const 9 of type int [line: 30]                                                                 <
. . . . Child: 2 Const 23 of type int [line: 30]                                                                  <
. . Sibling: 20 While [line: 31]                                                                                  <
. . . Child: 0 Op: > of type (null) [line: 31]                                                                    <
. . . . Child: 0 Id: y of type int [line: 31]                                                                     <
. . . . Child: 1 Const 15 of type int [line: 31]                                                                  <
. . . Child: 1 If [line: 31]                                                                                      <
. . . . Child: 0 Op: < of type (null) [line: 31]                                                                  <
. . . . . Child: 0 Id: x of type int [line: 31]                                                                   <
. . . . . Child: 1 Const 16 of type int [line: 31]                                                                <
. . . . Child: 1 While [line: 31]                                                                                 <
. . . . . Child: 0 Op: < of type (null) [line: 31]                                                                <
. . . . . . Child: 0 Id: y of type int [line: 31]                                                                 <
. . . . . . Child: 1 Const 3 of type int [line: 31]                                                               <
. . . . . Child: 1 Const 9 of type int [line: 31]                                                                 <
. . . . Child: 2 While [line: 31]                                                                                 <
. . . . . Child: 0 Op: > of type (null) [line: 31]                                                                <
. . . . . . Child: 0 Id: y of type int [line: 31]                                                                 <
. . . . . . Child: 1 Const 3 of type int [line: 31]                                                               <
. . . . . Child: 1 Const 23 of type int [line: 31]                                                                <
. . Sibling: 21 While [line: 32]                                                                                  <
. . . Child: 0 Op: > of type (null) [line: 32]                                                                    <
. . . . Child: 0 Id: y of type int [line: 32]                                                                     <
. . . . Child: 1 Const 15 of type int [line: 32]                                                                  <
. . . Child: 1 If [line: 32]                                                                                      <
. . . . Child: 0 Op: < of type (null) [line: 32]                                                                  <
. . . . . Child: 0 Id: x of type int [line: 32]                                                                   <
. . . . . Child: 1 Const 16 of type int [line: 32]                                                                <
. . . . Child: 1 While [line: 32]                                                                                 <
. . . . . Child: 0 Op: < of type (null) [line: 32]                                                                <
. . . . . . Child: 0 Id: y of type int [line: 32]                                                                 <
. . . . . . Child: 1 Const 3 of type int [line: 32]                                                               <
. . . . . Child: 1 If [line: 32]                                                                                  <
. . . . . . Child: 0 Id: b of type bool [line: 32]                                                                <
. . . . . . Child: 1 Const 34 of type int [line: 32]                                                              <
. . . . . . Child: 2 Const 34 of type int [line: 32]                                                              <
. . . . Child: 2 While [line: 32]                                                                                 <
. . . . . Child: 0 Op: > of type (null) [line: 32]                                                                <
. . . . . . Child: 0 Id: y of type int [line: 32]                                                                 <
. . . . . . Child: 1 Const 3 of type int [line: 32]                                                               <
. . . . . Child: 1 Const 23 of type int [line: 32]                                                                <
. . Sibling: 22 While [line: 33]                                                                                  <
. . . Child: 0 Op: > of type (null) [line: 33]                                                                    <
. . . . Child: 0 Id: y of type int [line: 33]                                                                     <
. . . . Child: 1 Const 15 of type int [line: 33]                                                                  <
. . . Child: 1 If [line: 33]                                                                                      <
. . . . Child: 0 Op: < of type (null) [line: 33]                                                                  <
. . . . . Child: 0 Id: x of type int [line: 33]                                                                   <
. . . . . Child: 1 Const 16 of type int [line: 33]                                                                <
. . . . Child: 1 Compound [line: 33]                                                                              <
. . . . . Child: 1 While [line: 33]                                                                               <
. . . . . . Child: 0 Op: < of type (null) [line: 33]                                                              <
. . . . . . . Child: 0 Id: y of type int [line: 33]                                                               <
. . . . . . . Child: 1 Const 3 of type int [line: 33]                                                             <
. . . . . . Child: 1 If [line: 33]                                                                                <
. . . . . . . Child: 0 Id: b of type bool [line: 33]                                                              <
. . . . . . . Child: 1 Const 34 of type int [line: 33]                                                            <
. . . . Child: 2 While [line: 33]                                                                                 <
. . . . . Child: 0 Op: > of type (null) [line: 33]                                                                <
. . . . . . Child: 0 Id: y of type int [line: 33]                                                                 <
. . . . . . Child: 1 Const 3 of type int [line: 33]                                                               <
. . . . . Child: 1 Const 23 of type int [line: 33]                                                                <
. . Sibling: 23 While [line: 35]                                                                                  <
. . . Child: 0 Id: b of type bool [line: 35]                                                                      <
. . . Child: 1 While [line: 35]                                                                                   <
. . . . Child: 0 Id: b of type bool [line: 35]                                                                    <
. . . . Child: 1 If [line: 35]                                                                                    <
. . . . . Child: 0 Id: b of type bool [line: 35]                                                                  <
. . . . . Child: 1 Id: x of type int [line: 35]                                                                   <
. . . . . Child: 2 Id: y of type int [line: 35]                                                                   <
. . Sibling: 24 While [line: 36]                                                                                  <
. . . Child: 0 Id: b of type bool [line: 36]                                                                      <
. . . Child: 1 While [line: 36]                                                                                   <
. . . . Child: 0 Id: b of type bool [line: 36]                                                                    <
. . . . Child: 1 If [line: 36]                                                                                    <
. . . . . Child: 0 Id: b of type bool [line: 36]                                                                  <
. . . . . Child: 1 Id: x of type int [line: 36]                                                                   <
. . Sibling: 25 If [line: 36]                                                                                     <
. . . Child: 0 Id: b of type bool [line: 36]                                                                      <
. . . Child: 1 Id: y of type int [line: 36]                                                                       <
. . . Child: 2 Id: z of type int [line: 36]                                                                       <
. . Sibling: 26 While [line: 38]                                                                                  <
. . . Child: 0 Id: b of type bool [line: 38]                                                                      <
. . . Child: 1 While [line: 38]                                                                                   <
. . . . Child: 0 Id: b of type bool [line: 38]                                                                    <
. . . . Child: 1 If [line: 38]                                                                                    <
. . . . . Child: 0 Id: b of type bool [line: 38]                                                                  <
. . . . . Child: 1 Id: x of type int [line: 38]                                                                   <
. . Sibling: 27 While [line: 39]                                                                                  <
. . . Child: 0 Id: b of type bool [line: 39]                                                                      <
. . . Child: 1 While [line: 39]                                                                                   <
. . . . Child: 0 Id: b of type bool [line: 39]                                                                    <
. . . . Child: 1 If [line: 39]                                                                                    <
. . . . . Child: 0 Id: b of type bool [line: 39]                                                                  <
. . . . . Child: 1 Id: x of type int [line: 39]                                                                   <
. . Sibling: 28 If [line: 39]                                                                                     <
. . . Child: 0 Id: b of type bool [line: 39]                                                                      <
. . . Child: 1 Id: y of type int [line: 39]                                                                       <
. . Sibling: 29 While [line: 41]                                                                                  <
. . . Child: 0 Id: b of type bool [line: 41]                                                                      <
. . . Child: 1 If [line: 41]                                                                                      <
. . . . Child: 0 Id: c of type bool [line: 41]                                                                    <
. . . . Child: 1 While [line: 41]                                                                                 <
. . . . . Child: 0 Id: b of type bool [line: 41]                                                                  <
. . . . . Child: 1 If [line: 41]                                                                                  <
. . . . . . Child: 0 Id: b of type bool [line: 41]                                                                <
. . . . . . Child: 1 Id: x of type int [line: 41]                                                                 <
. . . . . . Child: 2 Id: y of type int [line: 41]                                                                 <
. . Sibling: 30 While [line: 42]                                                                                  <
. . . Child: 0 Id: b of type bool [line: 42]                                                                      <
. . . Child: 1 If [line: 42]                                                                                      <
. . . . Child: 0 Id: c of type bool [line: 42]                                                                    <
. . . . Child: 1 While [line: 42]                                                                                 <
. . . . . Child: 0 Id: b of type bool [line: 42]                                                                  <
. . . . . Child: 1 If [line: 42]                                                                                  <
. . . . . . Child: 0 Id: b of type bool [line: 42]                                                                <
. . . . . . Child: 1 Id: x of type int [line: 42]                                                                 <
. . Sibling: 31 If [line: 42]                                                                                     <
. . . Child: 0 Id: b of type bool [line: 42]                                                                      <
. . . Child: 1 Id: y of type int [line: 42]                                                                       <
. . . Child: 2 Id: z of type int [line: 42]                                                                       <
. . Sibling: 32 If [line: 44]                                                                                     <
. . . Child: 0 Id: c of type bool [line: 44]                                                                      <
. . . Child: 1 While [line: 44]                                                                                   <
. . . . Child: 0 Id: b of type bool [line: 44]                                                                    <
. . . . Child: 1 While [line: 44]                                                                                 <
. . . . . Child: 0 Id: b of type bool [line: 44]                                                                  <
. . . . . Child: 1 If [line: 44]                                                                                  <
. . . . . . Child: 0 Id: b of type bool [line: 44]                                                                <
. . . . . . Child: 1 Id: x of type int [line: 44]                                                                 <
. . . . . . Child: 2 Id: y of type int [line: 44]                                                                 <
. . Sibling: 33 If [line: 45]                                                                                     <
. . . Child: 0 Id: c of type bool [line: 45]                                                                      <
. . . Child: 1 While [line: 45]                                                                                   <
. . . . Child: 0 Id: b of type bool [line: 45]                                                                    <
. . . . Child: 1 While [line: 45]                                                                                 <
. . . . . Child: 0 Id: b of type bool [line: 45]                                                                  <
. . . . . Child: 1 If [line: 45]                                                                                  <
. . . . . . Child: 0 Id: b of type bool [line: 45]                                                                <
. . . . . . Child: 1 Id: x of type int [line: 45]                                                                 <
. . Sibling: 34 If [line: 45]                                                                                     <
. . . Child: 0 Id: b of type bool [line: 45]                                                                      <
. . . Child: 1 Id: y of type int [line: 45]                                                                       <
. . . Child: 2 Id: z of type int [line: 45]                                                                       <
. . Sibling: 35 If [line: 47]                                                                                     <
. . . Child: 0 Id: c of type bool [line: 47]                                                                      <
. . . Child: 1 While [line: 47]                                                                                   <
. . . . Child: 0 Id: b of type bool [line: 47]                                                                    <
. . . . Child: 1 While [line: 47]                                                                                 <
. . . . . Child: 0 Id: b of type bool [line: 47]                                                                  <
. . . . . Child: 1 If [line: 47]                                                                                  <
. . . . . . Child: 0 Id: b of type bool [line: 47]                                                                <
. . . . . . Child: 1 Id: x of type int [line: 47]                                                                 <
. . . . . . Child: 2 Id: y of type int [line: 47]                                                                 <
. . . Child: 2 Id: z of type int [line: 47]                                                                       <
. . Sibling: 36 While [line: 49]                                                                                  <
. . . Child: 0 Id: a of type bool [line: 49]                                                                      <
. . . Child: 1 While [line: 49]                                                                                   <
. . . . Child: 0 Id: b of type bool [line: 49]                                                                    <
. . . . Child: 1 While [line: 49]                                                                                 <
. . . . . Child: 0 Id: c of type bool [line: 49]                                                                  <
. . . . . Child: 1 While [line: 49]                                                                               <
. . . . . . Child: 0 Id: d of type bool [line: 49]                                                                <
. . . . . . Child: 1 Id: e of type bool [line: 49]                                                                <
. . Sibling: 37 If [line: 50]                                                                                     <
. . . Child: 0 Id: a of type bool [line: 50]                                                                      <
. . . Child: 1 If [line: 50]                                                                                      <
. . . . Child: 0 Id: b of type bool [line: 50]                                                                    <
. . . . Child: 1 If [line: 50]                                                                                    <
. . . . . Child: 0 Id: c of type bool [line: 50]                                                                  <
. . . . . Child: 1 If [line: 50]                                                                                  <
. . . . . . Child: 0 Id: d of type bool [line: 50]                                                                <
. . . . . . Child: 1 Id: e of type bool [line: 50]                                                                <
. . Sibling: 38 If [line: 51]                                                                                     <
. . . Child: 0 Id: a of type bool [line: 51]                                                                      <
. . . Child: 2 If [line: 51]                                                                                      <
. . . . Child: 0 Id: b of type bool [line: 51]                                                                    <
. . . . Child: 2 If [line: 51]                                                                                    <
. . . . . Child: 0 Id: c of type bool [line: 51]                                                                  <
. . . . . Child: 2 If [line: 51]                                                                                  <
. . . . . . Child: 0 Id: d of type bool [line: 51]                                                                <
. . . . . . Child: 2 Id: e of type bool [line: 51]                                                                <
. . Sibling: 39 Return [line: 53]                                                                                 <
. . . Child: 0 Op: * of type (null) [line: 53]                                                                    <
. . . . Child: 0 Id: x of type int [line: 53]                                                                     <
. . . . Child: 1 Id: y of type int [line: 53]                                                                     <
Number of warnings: 0                                                                                                   Number of warnings: 0
Number of errors: 55                                                                                              |     Number of errors: 1

* End of testing                                                                                                        * End of testing
Kill all remaining c- processes                                                                                         Kill all remaining c- processes
